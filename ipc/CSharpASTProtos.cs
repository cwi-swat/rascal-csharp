// Generated by the protocol buffer compiler.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Landman.Rascal.CSharp.Profobuf {
  
  public static partial class CSharpASTProtos {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Landman_Rascal_CSharp_Profobuf_CSharpParseRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Landman.Rascal.CSharp.Profobuf.CSharpParseRequest, global::Landman.Rascal.CSharp.Profobuf.CSharpParseRequest.Builder> internal__static_Landman_Rascal_CSharp_Profobuf_CSharpParseRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Landman_Rascal_CSharp_Profobuf_CSharpParseResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Landman.Rascal.CSharp.Profobuf.CSharpParseResult, global::Landman.Rascal.CSharp.Profobuf.CSharpParseResult.Builder> internal__static_Landman_Rascal_CSharp_Profobuf_CSharpParseResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Landman_Rascal_CSharp_Profobuf_AstNode__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Landman.Rascal.CSharp.Profobuf.AstNode, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder> internal__static_Landman_Rascal_CSharp_Profobuf_AstNode__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Landman_Rascal_CSharp_Profobuf_QueryClause__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Landman.Rascal.CSharp.Profobuf.QueryClause, global::Landman.Rascal.CSharp.Profobuf.QueryClause.Builder> internal__static_Landman_Rascal_CSharp_Profobuf_QueryClause__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Landman_Rascal_CSharp_Profobuf_Expression__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Landman.Rascal.CSharp.Profobuf.Expression, global::Landman.Rascal.CSharp.Profobuf.Expression.Builder> internal__static_Landman_Rascal_CSharp_Profobuf_Expression__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Landman_Rascal_CSharp_Profobuf_AttributedNode__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Landman.Rascal.CSharp.Profobuf.AttributedNode, global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Builder> internal__static_Landman_Rascal_CSharp_Profobuf_AttributedNode__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Landman_Rascal_CSharp_Profobuf_MemberDeclaration__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration, global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration.Builder> internal__static_Landman_Rascal_CSharp_Profobuf_MemberDeclaration__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Landman_Rascal_CSharp_Profobuf_AstType__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Landman.Rascal.CSharp.Profobuf.AstType, global::Landman.Rascal.CSharp.Profobuf.AstType.Builder> internal__static_Landman_Rascal_CSharp_Profobuf_AstType__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Landman_Rascal_CSharp_Profobuf_Statement__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Landman.Rascal.CSharp.Profobuf.Statement, global::Landman.Rascal.CSharp.Profobuf.Statement.Builder> internal__static_Landman_Rascal_CSharp_Profobuf_Statement__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static CSharpASTProtos() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChRjc2hhcnAtYXN0LW5ldC5wcm90bxIeTGFuZG1hbi5SYXNjYWwuQ1NoYXJw" + 
          "LlByb2ZvYnVmGiRnb29nbGUvcHJvdG9idWYvY3NoYXJwX29wdGlvbnMucHJv" + 
          "dG8iJgoSQ1NoYXJwUGFyc2VSZXF1ZXN0EhAKCEZpbGVuYW1lGAEgAigJIkwK" + 
          "EUNTaGFycFBhcnNlUmVzdWx0EjcKBlJlc3VsdBgBIAMoCzInLkxhbmRtYW4u" + 
          "UmFzY2FsLkNTaGFycC5Qcm9mb2J1Zi5Bc3ROb2RlIvYTCgdBc3ROb2RlEkEK" + 
          "BEtpbmQYASACKA4yMy5MYW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9idWYu" + 
          "QXN0Tm9kZS5Bc3ROb2RlS2luZBJLCgtwX2RpcmVjdGlvbhgCIAEoDjI2Lkxh" + 
          "bmRtYW4uUmFzY2FsLkNTaGFycC5Qcm9mb2J1Zi5RdWVyeU9yZGVyaW5nRGly" + 
          "ZWN0aW9uEkcKE3BfZGVmYXVsdEV4cHJlc3Npb24YAyABKAsyKi5MYW5kbWFu" + 
          "LlJhc2NhbC5DU2hhcnAuUHJvZm9idWYuRXhwcmVzc2lvbhI9CgxwX2F0dHJp" + 
          "YnV0ZXMYBCADKAsyJy5MYW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9idWYu" + 
          "QXN0Tm9kZRJEChBwX25vZGVFeHByZXNzaW9uGAUgASgLMiouTGFuZG1hbi5S" + 
          "YXNjYWwuQ1NoYXJwLlByb2ZvYnVmLkV4cHJlc3Npb24SEgoKcF9mdWxsTmFt" + 
          "ZRgGIAEoCRIRCglwX2NvbnRlbnQYByABKAkSQgoPcF9ub2RlU3RhdGVtZW50" + 
          "GAggASgLMikuTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVmLlN0YXRl" + 
          "bWVudBI6CglwX21lbWJlcnMYCSADKAsyJy5MYW5kbWFuLlJhc2NhbC5DU2hh" + 
          "cnAuUHJvZm9idWYuQXN0Tm9kZRJECgpwX3ZhcmlhbmNlGAogASgOMjAuTGFu" + 
          "ZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVmLlZhcmlhbmNlTW9kaWZpZXIS" + 
          "FgoOcF92YXJpYWJsZU5hbWUYCyABKAkSPQoMcF9jYXNlTGFiZWxzGAwgAygL" + 
          "MicuTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVmLkFzdE5vZGUSQQoN" + 
          "cF9pbml0aWFsaXplchgNIAEoCzIqLkxhbmRtYW4uUmFzY2FsLkNTaGFycC5Q" + 
          "cm9mb2J1Zi5FeHByZXNzaW9uEj4KDXBfYXR0cmlidXRlc0EYDiADKAsyJy5M" + 
          "YW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9idWYuQXN0Tm9kZRJACgxwX2V4" + 
          "cHJlc3Npb24YDyABKAsyKi5MYW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9i" + 
          "dWYuRXhwcmVzc2lvbhJMChRwX25vZGVBdHRyaWJ1dGVkTm9kZRgQIAEoCzIu" + 
          "LkxhbmRtYW4uUmFzY2FsLkNTaGFycC5Qcm9mb2J1Zi5BdHRyaWJ1dGVkTm9k" + 
          "ZRI/CgtwX2FyZ3VtZW50cxgRIAMoCzIqLkxhbmRtYW4uUmFzY2FsLkNTaGFy" + 
          "cC5Qcm9mb2J1Zi5FeHByZXNzaW9uEj8KDHBfc3RhdGVtZW50cxgSIAMoCzIp" + 
          "LkxhbmRtYW4uUmFzY2FsLkNTaGFycC5Qcm9mb2J1Zi5TdGF0ZW1lbnQSOQoG" + 
          "cF9ib2R5GBMgASgLMikuTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVm" + 
          "LlN0YXRlbWVudBITCgtwX25hbWVzcGFjZRgUIAEoCRI+Cg1wX25vZGVBc3RU" + 
          "eXBlGBUgASgLMicuTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVmLkFz" + 
          "dFR5cGUSPgoNcF9jb21tZW50VHlwZRgWIAEoDjInLkxhbmRtYW4uUmFzY2Fs" + 
          "LkNTaGFycC5Qcm9mb2J1Zi5Db21tZW50Eg8KB3BfYWxpYXMYFyABKAkSFwoP" + 
          "cF90eXBlUGFyYW1ldGVyGBggASgJEk4KE3BfcGFyYW1ldGVyTW9kaWZpZXIY" + 
          "GSABKA4yMS5MYW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9idWYuUGFyYW1l" + 
          "dGVyTW9kaWZpZXISPQoKcF9tb2RpZmllchgaIAMoDjIpLkxhbmRtYW4uUmFz" + 
          "Y2FsLkNTaGFycC5Qcm9mb2J1Zi5Nb2RpZmllcnMSFAoMcF9zdGFydHNMaW5l" + 
          "GBsgASgIEg4KBnBfbmFtZRgcIAEoCRI8CgtwX2Jhc2VUeXBlcxgdIAMoCzIn" + 
          "LkxhbmRtYW4uUmFzY2FsLkNTaGFycC5Qcm9mb2J1Zi5Bc3RUeXBlEhQKDHBf" + 
          "ZGltZW5zaW9ucxgeIAEoBRJKChFwX2F0dHJpYnV0ZVRhcmdldBgfIAEoDjIv" + 
          "LkxhbmRtYW4uUmFzY2FsLkNTaGFycC5Qcm9mb2J1Zi5BdHRyaWJ1dGVUYXJn" + 
          "ZXQSPgoNcF9pZGVudGlmaWVycxggIAMoCzInLkxhbmRtYW4uUmFzY2FsLkNT" + 
          "aGFycC5Qcm9mb2J1Zi5Bc3ROb2RlElwKHHBfY29uc3RydWN0b3JJbml0aWFs" + 
          "aXplclR5cGUYISABKA4yNi5MYW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9i" + 
          "dWYuQ29uc3RydWN0b3JJbml0aWFsaXplchJBCg5wX2FsbE1vZGlmaWVycxgi" + 
          "IAMoDjIpLkxhbmRtYW4uUmFzY2FsLkNTaGFycC5Qcm9mb2J1Zi5Nb2RpZmll" + 
          "cnMSRgoRcF9ub2RlUXVlcnlDbGF1c2UYIyABKAsyKy5MYW5kbWFuLlJhc2Nh" + 
          "bC5DU2hhcnAuUHJvZm9idWYuUXVlcnlDbGF1c2UiuwQKC0FzdE5vZGVLaW5k" + 
          "Eg0KCWtfY29tbWVudBAAEhoKFmtfbmFtZXNwYWNlRGVjbGFyYXRpb24QARIQ" + 
          "CgxrX2NvbnN0cmFpbnQQAhIPCgtrX2F0dHJpYnV0ZRADEhMKD2tfcXVlcnlP" + 
          "cmRlcmluZxAEEhkKFWtfY1NoYXJwTW9kaWZpZXJUb2tlbhAFEhkKFWtfdmFy" + 
          "aWFibGVQbGFjZWhvbGRlchAGEhYKEmtfdXNpbmdEZWNsYXJhdGlvbhAHEhUK" + 
          "EWtfY1NoYXJwVG9rZW5Ob2RlEAgSGgoWa19wYXJhbWV0ZXJEZWNsYXJhdGlv" + 
          "bhAJEhMKD2tfc3dpdGNoU2VjdGlvbhAKEhsKF2tfdXNpbmdBbGlhc0RlY2xh" + 
          "cmF0aW9uEAsSHgoaa190eXBlUGFyYW1ldGVyRGVjbGFyYXRpb24QDBIRCg1r" + 
          "X2NhdGNoQ2xhdXNlEA0SEAoMa19pZGVudGlmaWVyEA4SFgoSa19hdHRyaWJ1" + 
          "dGVTZWN0aW9uEA8SHAoYa19jb25zdHJ1Y3RvckluaXRpYWxpemVyEBASGQoV" + 
          "a192YXJpYWJsZUluaXRpYWxpemVyEBESFAoQa19hcnJheVNwZWNpZmllchAS" + 
          "Eg8KC2tfY2FzZUxhYmVsEBMSDwoLa19zdGF0ZW1lbnQQFBINCglrX2FzdFR5" + 
          "cGUQFRIUChBrX2F0dHJpYnV0ZWROb2RlEBYSEAoMa19leHByZXNzaW9uEBcS" + 
          "EQoNa19xdWVyeUNsYXVzZRAYIuUHCgtRdWVyeUNsYXVzZRJJCgRLaW5kGAEg" + 
          "AigOMjsuTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVmLlF1ZXJ5Q2xh" + 
          "dXNlLlF1ZXJ5Q2xhdXNlS2luZBJACgxwX2V4cHJlc3Npb24YAiABKAsyKi5M" + 
          "YW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9idWYuRXhwcmVzc2lvbhI/Cgtw" + 
          "X2NvbmRpdGlvbhgDIAEoCzIqLkxhbmRtYW4uUmFzY2FsLkNTaGFycC5Qcm9m" + 
          "b2J1Zi5FeHByZXNzaW9uEkIKDnBfaW5FeHByZXNzaW9uGAQgASgLMiouTGFu" + 
          "ZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVmLkV4cHJlc3Npb24SFAoMcF9p" + 
          "ZGVudGlmaWVyGAUgASgJEhgKEHBfaW50b0lkZW50aWZpZXIYBiABKAkSOQoF" + 
          "cF9rZXkYByABKAsyKi5MYW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9idWYu" + 
          "RXhwcmVzc2lvbhJACgxwX3Byb2plY3Rpb24YCCABKAsyKi5MYW5kbWFuLlJh" + 
          "c2NhbC5DU2hhcnAuUHJvZm9idWYuRXhwcmVzc2lvbhIVCg1wX2lzR3JvdXBK" + 
          "b2luGAkgASgIEjwKC3Bfb3JkZXJpbmdzGAogAygLMicuTGFuZG1hbi5SYXNj" + 
          "YWwuQ1NoYXJwLlByb2ZvYnVmLkFzdE5vZGUSGAoQcF9qb2luSWRlbnRpZmll" + 
          "chgLIAEoCRJEChBwX3ByZWNlZGluZ1F1ZXJ5GAwgASgLMiouTGFuZG1hbi5S" + 
          "YXNjYWwuQ1NoYXJwLlByb2ZvYnVmLkV4cHJlc3Npb24SQgoOcF9vbkV4cHJl" + 
          "c3Npb24YDSABKAsyKi5MYW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9idWYu" + 
          "RXhwcmVzc2lvbhJGChJwX2VxdWFsc0V4cHJlc3Npb24YDiABKAsyKi5MYW5k" + 
          "bWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9idWYuRXhwcmVzc2lvbiLVAQoPUXVl" + 
          "cnlDbGF1c2VLaW5kEh0KGWtfcXVlcnlDb250aW51YXRpb25DbGF1c2UQABIW" + 
          "ChJrX3F1ZXJ5V2hlcmVDbGF1c2UQARIWChJrX3F1ZXJ5R3JvdXBDbGF1c2UQ" + 
          "AhIWChJrX3F1ZXJ5T3JkZXJDbGF1c2UQAxIXChNrX3F1ZXJ5U2VsZWN0Q2xh" + 
          "dXNlEAQSFAoQa19xdWVyeUxldENsYXVzZRAFEhUKEWtfcXVlcnlGcm9tQ2xh" + 
          "dXNlEAYSFQoRa19xdWVyeUpvaW5DbGF1c2UQByLiEwoKRXhwcmVzc2lvbhJH" + 
          "CgRLaW5kGAEgAigOMjkuTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVm" + 
          "LkV4cHJlc3Npb24uRXhwcmVzc2lvbktpbmQSPgoKcF9lbGVtZW50cxgCIAMo" + 
          "CzIqLkxhbmRtYW4uUmFzY2FsLkNTaGFycC5Qcm9mb2J1Zi5FeHByZXNzaW9u" + 
          "EkAKDHBfZXhwcmVzc2lvbhgDIAEoCzIqLkxhbmRtYW4uUmFzY2FsLkNTaGFy" + 
          "cC5Qcm9mb2J1Zi5FeHByZXNzaW9uEg8KB3BfdmFsdWUYBCABKAkSPwoLcF9h" + 
          "cmd1bWVudHMYBSADKAsyKi5MYW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9i" + 
          "dWYuRXhwcmVzc2lvbhJCCgpwX29wZXJhdG9yGAYgASgOMi4uTGFuZG1hbi5S" + 
          "YXNjYWwuQ1NoYXJwLlByb2ZvYnVmLkJpbmFyeU9wZXJhdG9yEj8KC3BfY29u" + 
          "ZGl0aW9uGAcgASgLMiouTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVm" + 
          "LkV4cHJlc3Npb24SRQoRcF9mYWxzZUV4cHJlc3Npb24YCCABKAsyKi5MYW5k" + 
          "bWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9idWYuRXhwcmVzc2lvbhI7CgdwX3Jp" + 
          "Z2h0GAkgASgLMiouTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVmLkV4" + 
          "cHJlc3Npb24SPgoJcF9jbGF1c2VzGAogAygLMisuTGFuZG1hbi5SYXNjYWwu" + 
          "Q1NoYXJwLlByb2ZvYnVmLlF1ZXJ5Q2xhdXNlEkIKC3Bfb3BlcmF0b3JVGAsg" + 
          "ASgOMi0uTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVmLlVuYXJ5T3Bl" + 
          "cmF0b3ISPAoIcF90YXJnZXQYDCABKAsyKi5MYW5kbWFuLlJhc2NhbC5DU2hh" + 
          "cnAuUHJvZm9idWYuRXhwcmVzc2lvbhJACg9wX3R5cGVBcmd1bWVudHMYDSAD" + 
          "KAsyJy5MYW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9idWYuQXN0VHlwZRJH" + 
          "CgtwX29wZXJhdG9yQRgOIAEoDjIyLkxhbmRtYW4uUmFzY2FsLkNTaGFycC5Q" + 
          "cm9mb2J1Zi5Bc3NpZ25tZW50T3BlcmF0b3ISTAobcF9hZGRpdGlvbmFsQXJy" + 
          "YXlTcGVjaWZpZXJzGA8gAygLMicuTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlBy" + 
          "b2ZvYnVmLkFzdE5vZGUSNwoGcF9ib2R5GBAgASgLMicuTGFuZG1hbi5SYXNj" + 
          "YWwuQ1NoYXJwLlByb2ZvYnVmLkFzdE5vZGUSFAoMcF9pZGVudGlmaWVyGBEg" + 
          "ASgJEjoKB3BfYm9keVMYEiABKAsyKS5MYW5kbWFuLlJhc2NhbC5DU2hhcnAu" + 
          "UHJvZm9idWYuU3RhdGVtZW50EhIKCnBfaXNBY2Nlc3MYEyABKAgSQQoNcF9p" + 
          "bml0aWFsaXplchgUIAEoCzIqLkxhbmRtYW4uUmFzY2FsLkNTaGFycC5Qcm9m" + 
          "b2J1Zi5FeHByZXNzaW9uEhQKDHBfbWVtYmVyTmFtZRgVIAEoCRJIChBwX2Zp" + 
          "ZWxkRGlyZWN0aW9uGBYgASgOMi4uTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlBy" + 
          "b2ZvYnVmLkZpZWxkRGlyZWN0aW9uEhoKEnBfaGFzUGFyYW1ldGVyTGlzdBgX" + 
          "IAEoCBI9CgxwX3BhcmFtZXRlcnMYGCADKAsyJy5MYW5kbWFuLlJhc2NhbC5D" + 
          "U2hhcnAuUHJvZm9idWYuQXN0Tm9kZRJEChBwX3RydWVFeHByZXNzaW9uGBkg" + 
          "ASgLMiouTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVmLkV4cHJlc3Np" + 
          "b24SOgoGcF9sZWZ0GBogASgLMiouTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlBy" + 
          "b2ZvYnVmLkV4cHJlc3Npb24SRQoRcF9jb3VudEV4cHJlc3Npb24YGyABKAsy" + 
          "Ki5MYW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9idWYuRXhwcmVzc2lvbiKs" + 
          "BwoORXhwcmVzc2lvbktpbmQSFgoSa19sYW1iZGFFeHByZXNzaW9uEAASGwoX" + 
          "a19jb25kaXRpb25hbEV4cHJlc3Npb24QARIeChprX2JpbmFyeU9wZXJhdG9y" + 
          "RXhwcmVzc2lvbhACEhkKFWtfZGlyZWN0aW9uRXhwcmVzc2lvbhADEhQKEGtf" + 
          "Y2FzdEV4cHJlc3Npb24QBBIXChNrX2luZGV4ZXJFeHByZXNzaW9uEAUSHQoZ" + 
          "a19wYXJlbnRoZXNpemVkRXhwcmVzc2lvbhAGEh0KGWtfYmFzZVJlZmVyZW5j" + 
          "ZUV4cHJlc3Npb24QBxIWChJrX3NpemVPZkV4cHJlc3Npb24QCBIbChdrX2Fy" + 
          "cmF5Q3JlYXRlRXhwcmVzc2lvbhAJEh0KGWtfdW5hcnlPcGVyYXRvckV4cHJl" + 
          "c3Npb24QChISCg5rX2FzRXhwcmVzc2lvbhALEh0KGWtfdHlwZVJlZmVyZW5j" + 
          "ZUV4cHJlc3Npb24QDBIWChJrX3R5cGVPZkV4cHJlc3Npb24QDRIcChhrX2Rl" + 
          "ZmF1bHRWYWx1ZUV4cHJlc3Npb24QDhIfChtrX2Fub255bW91c01ldGhvZEV4" + 
          "cHJlc3Npb24QDxIZChVrX3VuY2hlY2tlZEV4cHJlc3Npb24QEBISCg5rX2lz" + 
          "RXhwcmVzc2lvbhAREhoKFmtfaWRlbnRpZmllckV4cHJlc3Npb24QEhIXChNr" + 
          "X2NoZWNrZWRFeHByZXNzaW9uEBMSGQoVa19wcmltaXRpdmVFeHByZXNzaW9u" + 
          "EBQSGwoXa19leHByZXNzaW9uUGxhY2Vob2xkZXIQFRIcChhrX29iamVjdENy" + 
          "ZWF0ZUV4cHJlc3Npb24QFhIdChlrX25hbWVkQXJndW1lbnRFeHByZXNzaW9u" + 
          "EBcSFwoTa19hcmdMaXN0RXhwcmVzc2lvbhAYEh8KG2tfbWVtYmVyUmVmZXJl" + 
          "bmNlRXhwcmVzc2lvbhAZEhoKFmtfaW52b2NhdGlvbkV4cHJlc3Npb24QGhIg" + 
          "ChxrX3BvaW50ZXJSZWZlcmVuY2VFeHByZXNzaW9uEBsSGgoWa19hc3NpZ25t" + 
          "ZW50RXhwcmVzc2lvbhAcEh0KGWtfdGhpc1JlZmVyZW5jZUV4cHJlc3Npb24Q" + 
          "HRIaChZrX3N0YWNrQWxsb2NFeHByZXNzaW9uEB4SIAoca19hcnJheUluaXRp" + 
          "YWxpemVyRXhwcmVzc2lvbhAfEhUKEWtfcXVlcnlFeHByZXNzaW9uECAijwkK" + 
          "DkF0dHJpYnV0ZWROb2RlEk8KBEtpbmQYASACKA4yQS5MYW5kbWFuLlJhc2Nh" + 
          "bC5DU2hhcnAuUHJvZm9idWYuQXR0cmlidXRlZE5vZGUuQXR0cmlidXRlZE5v" + 
          "ZGVLaW5kEj4KDXBfY29uc3RyYWludHMYAiADKAsyJy5MYW5kbWFuLlJhc2Nh" + 
          "bC5DU2hhcnAuUHJvZm9idWYuQXN0Tm9kZRI9CgxwX2F0dHJpYnV0ZXMYAyAD" + 
          "KAsyJy5MYW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9idWYuQXN0Tm9kZRJB" + 
          "ChBwX3R5cGVQYXJhbWV0ZXJzGAQgAygLMicuTGFuZG1hbi5SYXNjYWwuQ1No" + 
          "YXJwLlByb2ZvYnVmLkFzdE5vZGUSOgoLcF9jbGFzc1R5cGUYBSABKA4yJS5M" + 
          "YW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9idWYuQ2xhc3MSDgoGcF9uYW1l" + 
          "GAYgASgJEjkKBnBfYm9keRgHIAEoCzIpLkxhbmRtYW4uUmFzY2FsLkNTaGFy" + 
          "cC5Qcm9mb2J1Zi5TdGF0ZW1lbnQSQQoJcF9tZW1iZXJzGAggAygLMi4uTGFu" + 
          "ZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVmLkF0dHJpYnV0ZWROb2RlEkEK" + 
          "EHBfbW9kaWZpZXJUb2tlbnMYCSADKAsyJy5MYW5kbWFuLlJhc2NhbC5DU2hh" + 
          "cnAuUHJvZm9idWYuQXN0Tm9kZRI/Cg5wX2luaXRpYWxpemVyQRgKIAEoCzIn" + 
          "LkxhbmRtYW4uUmFzY2FsLkNTaGFycC5Qcm9mb2J1Zi5Bc3ROb2RlEjwKC3Bf" + 
          "YmFzZVR5cGVzGAsgAygLMicuTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2Zv" + 
          "YnVmLkFzdFR5cGUSPgoLcF9tb2RpZmllcnMYDCADKA4yKS5MYW5kbWFuLlJh" + 
          "c2NhbC5DU2hhcnAuUHJvZm9idWYuTW9kaWZpZXJzEkEKDXBfaW5pdGlhbGl6" + 
          "ZXIYDSABKAsyKi5MYW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9idWYuRXhw" + 
          "cmVzc2lvbhI9CgxwX3BhcmFtZXRlcnMYDiADKAsyJy5MYW5kbWFuLlJhc2Nh" + 
          "bC5DU2hhcnAuUHJvZm9idWYuQXN0Tm9kZRJSChdwX25vZGVNZW1iZXJEZWNs" + 
          "YXJhdGlvbhgPIAEoCzIxLkxhbmRtYW4uUmFzY2FsLkNTaGFycC5Qcm9mb2J1" + 
          "Zi5NZW1iZXJEZWNsYXJhdGlvbiLHAQoSQXR0cmlidXRlZE5vZGVLaW5kEhsK" + 
          "F2tfZW51bU1lbWJlckRlY2xhcmF0aW9uEAASDgoKa19hY2Nlc3NvchABEhkK" + 
          "FWtfZGVsZWdhdGVEZWNsYXJhdGlvbhACEhsKF2tfZGVzdHJ1Y3RvckRlY2xh" + 
          "cmF0aW9uEAMSFQoRa190eXBlRGVjbGFyYXRpb24QBBIcChhrX2NvbnN0cnVj" + 
          "dG9yRGVjbGFyYXRpb24QBRIXChNrX21lbWJlckRlY2xhcmF0aW9uEAYivAkK" + 
          "EU1lbWJlckRlY2xhcmF0aW9uElUKBEtpbmQYASACKA4yRy5MYW5kbWFuLlJh" + 
          "c2NhbC5DU2hhcnAuUHJvZm9idWYuTWVtYmVyRGVjbGFyYXRpb24uTWVtYmVy" + 
          "RGVjbGFyYXRpb25LaW5kEj4KDXBfY29uc3RyYWludHMYAiADKAsyJy5MYW5k" + 
          "bWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9idWYuQXN0Tm9kZRIbChNwX2lzRXh0" + 
          "ZW5zaW9uTWV0aG9kGAMgASgIEj0KDHBfYXR0cmlidXRlcxgEIAMoCzInLkxh" + 
          "bmRtYW4uUmFzY2FsLkNTaGFycC5Qcm9mb2J1Zi5Bc3ROb2RlEjwKC3BfdmFy" + 
          "aWFibGVzGAUgAygLMicuTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVm" + 
          "LkFzdE5vZGUSQQoQcF90eXBlUGFyYW1ldGVycxgGIAMoCzInLkxhbmRtYW4u" + 
          "UmFzY2FsLkNTaGFycC5Qcm9mb2J1Zi5Bc3ROb2RlEkAKCHBfc2V0dGVyGAcg" + 
          "ASgLMi4uTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVmLkF0dHJpYnV0" + 
          "ZWROb2RlEg4KBnBfbmFtZRgIIAEoCRI5CgZwX2JvZHkYCSABKAsyKS5MYW5k" + 
          "bWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9idWYuU3RhdGVtZW50EkUKDXBfYWRk" + 
          "QWNjZXNzb3IYCiABKAsyLi5MYW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9i" + 
          "dWYuQXR0cmlidXRlZE5vZGUSQAoIcF9nZXR0ZXIYCyABKAsyLi5MYW5kbWFu" + 
          "LlJhc2NhbC5DU2hhcnAuUHJvZm9idWYuQXR0cmlidXRlZE5vZGUSSAoQcF9y" + 
          "ZW1vdmVBY2Nlc3NvchgMIAEoCzIuLkxhbmRtYW4uUmFzY2FsLkNTaGFycC5Q" + 
          "cm9mb2J1Zi5BdHRyaWJ1dGVkTm9kZRJBChBwX21vZGlmaWVyVG9rZW5zGA0g" + 
          "AygLMicuTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVmLkFzdE5vZGUS" + 
          "PgoLcF9tb2RpZmllcnMYDiADKA4yKS5MYW5kbWFuLlJhc2NhbC5DU2hhcnAu" + 
          "UHJvZm9idWYuTW9kaWZpZXJzEkAKDnBfb3BlcmF0b3JUeXBlGA8gASgOMigu" + 
          "TGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVmLk9wZXJhdG9yEj0KDHBf" + 
          "cGFyYW1ldGVycxgQIAMoCzInLkxhbmRtYW4uUmFzY2FsLkNTaGFycC5Qcm9m" + 
          "b2J1Zi5Bc3ROb2RlIs4BChVNZW1iZXJEZWNsYXJhdGlvbktpbmQSGAoUa19p" + 
          "bmRleGVyRGVjbGFyYXRpb24QABIXChNrX21ldGhvZERlY2xhcmF0aW9uEAES" + 
          "GQoVa19vcGVyYXRvckRlY2xhcmF0aW9uEAISGQoVa19wcm9wZXJ0eURlY2xh" + 
          "cmF0aW9uEAMSHAoYa19jdXN0b21FdmVudERlY2xhcmF0aW9uEAQSFgoSa19m" + 
          "aWVsZERlY2xhcmF0aW9uEAUSFgoSa19ldmVudERlY2xhcmF0aW9uEAYi1AMK" + 
          "B0FzdFR5cGUSQQoES2luZBgBIAIoDjIzLkxhbmRtYW4uUmFzY2FsLkNTaGFy" + 
          "cC5Qcm9mb2J1Zi5Bc3RUeXBlLkFzdFR5cGVLaW5kEhcKD3BfaXNEb3VibGVD" + 
          "b2xvbhgCIAEoCBIeChZwX2hhc051bGxhYmxlU3BlY2lmaWVyGAMgASgIEhEK" + 
          "CXBfa2V5d29yZBgEIAEoCRIUCgxwX2lkZW50aWZpZXIYBSABKAkSQgoRcF9h" + 
          "cnJheVNwZWNpZmllcnMYBiADKAsyJy5MYW5kbWFuLlJhc2NhbC5DU2hhcnAu" + 
          "UHJvZm9idWYuQXN0Tm9kZRIUCgxwX21lbWJlck5hbWUYByABKAkSFQoNcF9w" + 
          "b2ludGVyUmFuaxgIIAEoBRJACg9wX3R5cGVBcmd1bWVudHMYCSADKAsyJy5M" + 
          "YW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9idWYuQXN0VHlwZSJxCgtBc3RU" + 
          "eXBlS2luZBIQCgxrX3NpbXBsZVR5cGUQABISCg5rX2NvbXBvc2VkVHlwZRAB" + 
          "EhUKEWtfdHlwZVBsYWNlaG9sZGVyEAISEAoMa19tZW1iZXJUeXBlEAMSEwoP" + 
          "a19wcmltaXRpdmVUeXBlEAQi9w8KCVN0YXRlbWVudBJFCgRLaW5kGAEgAigO" + 
          "MjcuTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVmLlN0YXRlbWVudC5T" + 
          "dGF0ZW1lbnRLaW5kEkAKDHBfZXhwcmVzc2lvbhgCIAEoCzIqLkxhbmRtYW4u" + 
          "UmFzY2FsLkNTaGFycC5Qcm9mb2J1Zi5FeHByZXNzaW9uEjwKC3BfdmFyaWFi" + 
          "bGVzGAMgAygLMicuTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVmLkFz" + 
          "dE5vZGUSPgoLcF9pdGVyYXRvcnMYBCADKAsyKS5MYW5kbWFuLlJhc2NhbC5D" + 
          "U2hhcnAuUHJvZm9idWYuU3RhdGVtZW50Ej8KDHBfc3RhdGVtZW50cxgFIAMo" + 
          "CzIpLkxhbmRtYW4uUmFzY2FsLkNTaGFycC5Qcm9mb2J1Zi5TdGF0ZW1lbnQS" + 
          "PwoLcF9jb25kaXRpb24YBiABKAsyKi5MYW5kbWFuLlJhc2NhbC5DU2hhcnAu" + 
          "UHJvZm9idWYuRXhwcmVzc2lvbhJGChNwX2VtYmVkZGVkU3RhdGVtZW50GAcg" + 
          "ASgLMikuTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVmLlN0YXRlbWVu" + 
          "dBI5CgZwX2JvZHkYCCABKAsyKS5MYW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJv" + 
          "Zm9idWYuU3RhdGVtZW50EkIKDnBfaW5FeHByZXNzaW9uGAkgASgLMiouTGFu" + 
          "ZG1hbi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVmLkV4cHJlc3Npb24SQgoPcF90" + 
          "cnVlU3RhdGVtZW50GAogASgLMikuTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlBy" + 
          "b2ZvYnVmLlN0YXRlbWVudBJGChVwX3Jlc291cmNlQWNxdWlzaXRpb24YCyAB" + 
          "KAsyJy5MYW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9idWYuQXN0Tm9kZRJD" + 
          "ChBwX2ZhbHNlU3RhdGVtZW50GAwgASgLMikuTGFuZG1hbi5SYXNjYWwuQ1No" + 
          "YXJwLlByb2ZvYnVmLlN0YXRlbWVudBIPCgdwX2xhYmVsGA0gASgJEkEKDnBf" + 
          "ZmluYWxseUJsb2NrGA4gASgLMikuTGFuZG1hbi5SYXNjYWwuQ1NoYXJwLlBy" + 
          "b2ZvYnVmLlN0YXRlbWVudBI9CgpwX3RyeUJsb2NrGA8gASgLMikuTGFuZG1h" + 
          "bi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVmLlN0YXRlbWVudBJFChFwX2xhYmVs" + 
          "RXhwcmVzc2lvbhgQIAEoCzIqLkxhbmRtYW4uUmFzY2FsLkNTaGFycC5Qcm9m" + 
          "b2J1Zi5FeHByZXNzaW9uEkEKEHBfc3dpdGNoU2VjdGlvbnMYESADKAsyJy5M" + 
          "YW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9idWYuQXN0Tm9kZRJBCg5wX2lu" + 
          "aXRpYWxpemVycxgSIAMoCzIpLkxhbmRtYW4uUmFzY2FsLkNTaGFycC5Qcm9m" + 
          "b2J1Zi5TdGF0ZW1lbnQSFgoOcF92YXJpYWJsZU5hbWUYEyABKAkSPgoLcF9t" + 
          "b2RpZmllcnMYFCADKA4yKS5MYW5kbWFuLlJhc2NhbC5DU2hhcnAuUHJvZm9i" + 
          "dWYuTW9kaWZpZXJzEj8KDnBfY2F0Y2hDbGF1c2VzGBUgAygLMicuTGFuZG1h" + 
          "bi5SYXNjYWwuQ1NoYXJwLlByb2ZvYnVmLkFzdE5vZGUizwUKDVN0YXRlbWVu" + 
          "dEtpbmQSFQoRa19yZXR1cm5TdGF0ZW1lbnQQABIUChBrX3doaWxlU3RhdGVt" + 
          "ZW50EAESGQoVa195aWVsZEJyZWFrU3RhdGVtZW50EAISHwoba19ibG9ja1N0" + 
          "YXRlbWVudFBsYWNlaG9sZGVyEAMSFwoTa19nb3RvQ2FzZVN0YXRlbWVudBAE" + 
          "EhQKEGtfZml4ZWRTdGF0ZW1lbnQQBRIUChBrX2xhYmVsU3RhdGVtZW50EAYS" + 
          "FQoRa19zd2l0Y2hTdGF0ZW1lbnQQBxIVChFrX2lmRWxzZVN0YXRlbWVudBAI" + 
          "EhkKFWtfZXhwcmVzc2lvblN0YXRlbWVudBAJEhoKFmtfZ290b0RlZmF1bHRT" + 
          "dGF0ZW1lbnQQChIiCh5rX3ZhcmlhYmxlRGVjbGFyYXRpb25TdGF0ZW1lbnQQ" + 
          "CxIUChBrX2JyZWFrU3RhdGVtZW50EAwSFwoTa190cnlDYXRjaFN0YXRlbWVu" + 
          "dBANEhMKD2tfZ290b1N0YXRlbWVudBAOEhQKEGtfdXNpbmdTdGF0ZW1lbnQQ" + 
          "DxIUChBrX3Rocm93U3RhdGVtZW50EBASFQoRa191bnNhZmVTdGF0ZW1lbnQQ" + 
          "ERIWChJrX2RvV2hpbGVTdGF0ZW1lbnQQEhIXChNrX2NvbnRpbnVlU3RhdGVt" + 
          "ZW50EBMSFgoSa19jaGVja2VkU3RhdGVtZW50EBQSGgoWa19zdGF0ZW1lbnRQ" + 
          "bGFjZWhvbGRlchAVEhIKDmtfZm9yU3RhdGVtZW50EBYSFgoSa19mb3JlYWNo" + 
          "U3RhdGVtZW50EBcSEwoPa19sb2NrU3RhdGVtZW50EBgSFAoQa19ibG9ja1N0" + 
          "YXRlbWVudBAZEhQKEGtfZW1wdHlTdGF0ZW1lbnQQGhIUChBrX3lpZWxkU3Rh" + 
          "dGVtZW50EBsSGAoUa191bmNoZWNrZWRTdGF0ZW1lbnQQHCowChZDb25zdHJ1" + 
          "Y3RvckluaXRpYWxpemVyEgoKBmVfdGhpcxAAEgoKBmVfYmFzZRABKqQBChFQ" + 
          "YXJhbWV0ZXJNb2RpZmllchIbChdlX3BhcmFtZXRlck1vZGlmaWVyVGhpcxAA" + 
          "EhsKF2VfcGFyYW1ldGVyTW9kaWZpZXJOb25lEAESHQoZZV9wYXJhbWV0ZXJN" + 
          "b2RpZmllclBhcmFtcxACEhoKFmVfcGFyYW1ldGVyTW9kaWZpZXJSZWYQAxIa" + 
          "ChZlX3BhcmFtZXRlck1vZGlmaWVyT3V0EAQqiQEKFlF1ZXJ5T3JkZXJpbmdE" + 
          "aXJlY3Rpb24SJQohZV9xdWVyeU9yZGVyaW5nRGlyZWN0aW9uQXNjZW5kaW5n" + 
          "EAASIAocZV9xdWVyeU9yZGVyaW5nRGlyZWN0aW9uTm9uZRABEiYKImVfcXVl" + 
          "cnlPcmRlcmluZ0RpcmVjdGlvbkRlc2NlbmRpbmcQAiqxAQoNVW5hcnlPcGVy" + 
          "YXRvchIMCghlX2JpdE5vdBAAEhEKDWVfZGVyZWZlcmVuY2UQARIJCgVlX25v" + 
          "dBACEgoKBmVfcGx1cxADEg8KC2VfZGVjcmVtZW50EAQSCwoHZV9taW51cxAF" + 
          "EhMKD2VfcG9zdEluY3JlbWVudBAGEhMKD2VfcG9zdERlY3JlbWVudBAHEg8K" + 
          "C2VfYWRkcmVzc09mEAgSDwoLZV9pbmNyZW1lbnQQCSpcCg5GaWVsZERpcmVj" + 
          "dGlvbhIYChRlX2ZpZWxkRGlyZWN0aW9uTm9uZRAAEhcKE2VfZmllbGREaXJl" + 
          "Y3Rpb25SZWYQARIXChNlX2ZpZWxkRGlyZWN0aW9uT3V0EAIq8wIKDkJpbmFy" + 
          "eU9wZXJhdG9yEhMKD2VfY29uZGl0aW9uYWxPchAAEgwKCGVfZGl2aWRlEAES" + 
          "EAoMZV9pbkVxdWFsaXR5EAISFAoQZV9jb25kaXRpb25hbEFuZBADEg8KC2Vf" + 
          "Yml0d2lzZU9yEAQSEAoMZV9iaXR3aXNlQW5kEAUSDQoJZV9tb2R1bHVzEAYS" + 
          "DgoKZV9lcXVhbGl0eRAHEhUKEWVfbGVzc1RoYW5PckVxdWFsEAgSDgoKZV9s" + 
          "ZXNzVGhhbhAJEg8KC2Vfc2hpZnRMZWZ0EAoSEQoNZV9ncmVhdGVyVGhhbhAL" + 
          "EgkKBWVfYWRkEAwSEQoNZV9leGNsdXNpdmVPchANEhAKDGVfc2hpZnRSaWdo" + 
          "dBAOEg4KCmVfbXVsdGlwbHkQDxIJCgVlX2FueRAQEhQKEGVfbnVsbENvYWxl" + 
          "c2NpbmcQERIYChRlX2dyZWF0ZXJUaGFuT3JFcXVhbBASEg4KCmVfc3VidHJh" + 
          "Y3QQEyqmAwoSQXNzaWdubWVudE9wZXJhdG9yEiEKHWVfYXNzaWdubWVudE9w" + 
          "ZXJhdG9yU2hpZnRMZWZ0EAASHgoaZV9hc3NpZ25tZW50T3BlcmF0b3JEaXZp" + 
          "ZGUQARIeChplX2Fzc2lnbm1lbnRPcGVyYXRvckFzc2lnbhACEiEKHWVfYXNz" + 
          "aWdubWVudE9wZXJhdG9yQml0d2lzZU9yEAMSGwoXZV9hc3NpZ25tZW50T3Bl" + 
          "cmF0b3JBZGQQBBIjCh9lX2Fzc2lnbm1lbnRPcGVyYXRvckV4Y2x1c2l2ZU9y" + 
          "EAUSIgoeZV9hc3NpZ25tZW50T3BlcmF0b3JTaGlmdFJpZ2h0EAYSIAocZV9h" + 
          "c3NpZ25tZW50T3BlcmF0b3JNdWx0aXBseRAHEhsKF2VfYXNzaWdubWVudE9w" + 
          "ZXJhdG9yQW55EAgSIgoeZV9hc3NpZ25tZW50T3BlcmF0b3JCaXR3aXNlQW5k" + 
          "EAkSHwobZV9hc3NpZ25tZW50T3BlcmF0b3JNb2R1bHVzEAoSIAocZV9hc3Np" + 
          "Z25tZW50T3BlcmF0b3JTdWJ0cmFjdBALKl0KBUNsYXNzEg4KCmVfZGVsZWdh" + 
          "dGUQABIPCgtlX2ludGVyZmFjZRABEgwKCGVfbW9kdWxlEAISCwoHZV9jbGFz" + 
          "cxADEgoKBmVfZW51bRAEEgwKCGVfc3RydWN0EAUq0QMKCU1vZGlmaWVycxIX" + 
          "ChNlX21vZGlmaWVyc1JlYWRvbmx5EAASFgoSZV9tb2RpZmllcnNWaXJ0dWFs" + 
          "EAESFgoSZV9tb2RpZmllcnNQYXJ0aWFsEAISEgoOZV9tb2RpZmllcnNOZXcQ" + 
          "AxIUChBlX21vZGlmaWVyc0NvbnN0EAQSGAoUZV9tb2RpZmllcnNQcm90ZWN0" + 
          "ZWQQBRIVChFlX21vZGlmaWVyc1B1YmxpYxAGEhUKEWVfbW9kaWZpZXJzU2Vh" + 
          "bGVkEAcSFwoTZV9tb2RpZmllcnNBYnN0cmFjdBAIEhUKEWVfbW9kaWZpZXJz" + 
          "RXh0ZXJuEAkSEwoPZV9tb2RpZmllcnNOb25lEAoSFQoRZV9tb2RpZmllcnNT" + 
          "dGF0aWMQCxIdChllX21vZGlmaWVyc1Zpc2liaWxpdHlNYXNrEAwSFwoTZV9t" + 
          "b2RpZmllcnNPdmVycmlkZRANEhcKE2VfbW9kaWZpZXJzSW50ZXJuYWwQDhIV" + 
          "ChFlX21vZGlmaWVyc1Vuc2FmZRAPEhQKEGVfbW9kaWZpZXJzRml4ZWQQEBIX" + 
          "ChNlX21vZGlmaWVyc1ZvbGF0aWxlEBESFgoSZV9tb2RpZmllcnNQcml2YXRl" + 
          "EBIqQQoHQ29tbWVudBIPCgtlX211bHRpTGluZRAAEhAKDGVfc2luZ2xlTGlu" + 
          "ZRABEhMKD2VfZG9jdW1lbnRhdGlvbhACKqQFCghPcGVyYXRvchIWChJlX29w" + 
          "ZXJhdG9ySW1wbGljaXQQABISCg5lX29wZXJhdG9yVHJ1ZRABEhcKE2Vfb3Bl" + 
          "cmF0b3JCaXR3aXNlT3IQAhIWChJlX29wZXJhdG9yRGl2aXNpb24QAxIXChNl" + 
          "X29wZXJhdG9yRGVjcmVtZW50EAQSGwoXZV9vcGVyYXRvclVuYXJ5TmVnYXRp" + 
          "b24QBRIXChNlX29wZXJhdG9yTGVmdFNoaWZ0EAYSGAoUZV9vcGVyYXRvckJp" + 
          "dHdpc2VBbmQQBxIZChVlX29wZXJhdG9yU3VidHJhY3Rpb24QCBIYChRlX29w" + 
          "ZXJhdG9yUmlnaHRTaGlmdBAJEhUKEWVfb3BlcmF0b3JNb2R1bHVzEAoSFwoT" + 
          "ZV9vcGVyYXRvckluY3JlbWVudBALEhYKEmVfb3BlcmF0b3JFcXVhbGl0eRAM" + 
          "EhgKFGVfb3BlcmF0b3JJbmVxdWFsaXR5EA0SHQoZZV9vcGVyYXRvckxlc3NU" + 
          "aGFuT3JFcXVhbBAOEhYKEmVfb3BlcmF0b3JMZXNzVGhhbhAPEhgKFGVfb3Bl" + 
          "cmF0b3JMb2dpY2FsTm90EBASGQoVZV9vcGVyYXRvckdyZWF0ZXJUaGFuEBES" + 
          "FwoTZV9vcGVyYXRvclVuYXJ5UGx1cxASEhkKFWVfb3BlcmF0b3JFeGNsdXNp" + 
          "dmVPchATEhYKEmVfb3BlcmF0b3JFeHBsaWNpdBAUEhYKEmVfb3BlcmF0b3JN" + 
          "dWx0aXBseRAVEhMKD2Vfb3BlcmF0b3JGYWxzZRAWEhYKEmVfb3BlcmF0b3JB" + 
          "ZGRpdGlvbhAXEiAKHGVfb3BlcmF0b3JHcmVhdGVyVGhhbk9yRXF1YWwQGBIc" + 
          "ChhlX29wZXJhdG9yT25lc0NvbXBsZW1lbnQQGSqTAgoPQXR0cmlidXRlVGFy" + 
          "Z2V0EhoKFmVfYXR0cmlidXRlVGFyZ2V0RmllbGQQABIZChVlX2F0dHJpYnV0" + 
          "ZVRhcmdldE5vbmUQARIbChdlX2F0dHJpYnV0ZVRhcmdldFJldHVybhACEhwK" + 
          "GGVfYXR0cmlidXRlVGFyZ2V0VW5rbm93bhADEhkKFWVfYXR0cmlidXRlVGFy" + 
          "Z2V0VHlwZRAEEhsKF2VfYXR0cmlidXRlVGFyZ2V0TW9kdWxlEAUSHQoZZV9h" + 
          "dHRyaWJ1dGVUYXJnZXRBc3NlbWJseRAGEhsKF2VfYXR0cmlidXRlVGFyZ2V0" + 
          "TWV0aG9kEAcSGgoWZV9hdHRyaWJ1dGVUYXJnZXRQYXJhbRAIKkkKEFZhcmlh" + 
          "bmNlTW9kaWZpZXISDwoLZV9pbnZhcmlhbnQQABIPCgtlX2NvdmFyaWFudBAB" + 
          "EhMKD2VfY29udHJhdmFyaWFudBACQjZIAcI+MQoeTGFuZG1hbi5SYXNjYWwu" + 
          "Q1NoYXJwLlByb2ZvYnVmEg9DU2hhcnBBU1RQcm90b3M=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Landman_Rascal_CSharp_Profobuf_CSharpParseRequest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Landman_Rascal_CSharp_Profobuf_CSharpParseRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Landman.Rascal.CSharp.Profobuf.CSharpParseRequest, global::Landman.Rascal.CSharp.Profobuf.CSharpParseRequest.Builder>(internal__static_Landman_Rascal_CSharp_Profobuf_CSharpParseRequest__Descriptor,
                new string[] { "Filename", });
        internal__static_Landman_Rascal_CSharp_Profobuf_CSharpParseResult__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Landman_Rascal_CSharp_Profobuf_CSharpParseResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Landman.Rascal.CSharp.Profobuf.CSharpParseResult, global::Landman.Rascal.CSharp.Profobuf.CSharpParseResult.Builder>(internal__static_Landman_Rascal_CSharp_Profobuf_CSharpParseResult__Descriptor,
                new string[] { "Result", });
        internal__static_Landman_Rascal_CSharp_Profobuf_AstNode__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Landman_Rascal_CSharp_Profobuf_AstNode__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Landman.Rascal.CSharp.Profobuf.AstNode, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder>(internal__static_Landman_Rascal_CSharp_Profobuf_AstNode__Descriptor,
                new string[] { "Kind", "PDirection", "PDefaultExpression", "PAttributes", "PNodeExpression", "PFullName", "PContent", "PNodeStatement", "PMembers", "PVariance", "PVariableName", "PCaseLabels", "PInitializer", "PAttributesA", "PExpression", "PNodeAttributedNode", "PArguments", "PStatements", "PBody", "PNamespace", "PNodeAstType", "PCommentType", "PAlias", "PTypeParameter", "PParameterModifier", "PModifier", "PStartsLine", "PName", "PBaseTypes", "PDimensions", "PAttributeTarget", "PIdentifiers", "PConstructorInitializerType", "PAllModifiers", "PNodeQueryClause", });
        internal__static_Landman_Rascal_CSharp_Profobuf_QueryClause__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Landman_Rascal_CSharp_Profobuf_QueryClause__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Landman.Rascal.CSharp.Profobuf.QueryClause, global::Landman.Rascal.CSharp.Profobuf.QueryClause.Builder>(internal__static_Landman_Rascal_CSharp_Profobuf_QueryClause__Descriptor,
                new string[] { "Kind", "PExpression", "PCondition", "PInExpression", "PIdentifier", "PIntoIdentifier", "PKey", "PProjection", "PIsGroupJoin", "POrderings", "PJoinIdentifier", "PPrecedingQuery", "POnExpression", "PEqualsExpression", });
        internal__static_Landman_Rascal_CSharp_Profobuf_Expression__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Landman_Rascal_CSharp_Profobuf_Expression__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Landman.Rascal.CSharp.Profobuf.Expression, global::Landman.Rascal.CSharp.Profobuf.Expression.Builder>(internal__static_Landman_Rascal_CSharp_Profobuf_Expression__Descriptor,
                new string[] { "Kind", "PElements", "PExpression", "PValue", "PArguments", "POperator", "PCondition", "PFalseExpression", "PRight", "PClauses", "POperatorU", "PTarget", "PTypeArguments", "POperatorA", "PAdditionalArraySpecifiers", "PBody", "PIdentifier", "PBodyS", "PIsAccess", "PInitializer", "PMemberName", "PFieldDirection", "PHasParameterList", "PParameters", "PTrueExpression", "PLeft", "PCountExpression", });
        internal__static_Landman_Rascal_CSharp_Profobuf_AttributedNode__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Landman_Rascal_CSharp_Profobuf_AttributedNode__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Landman.Rascal.CSharp.Profobuf.AttributedNode, global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Builder>(internal__static_Landman_Rascal_CSharp_Profobuf_AttributedNode__Descriptor,
                new string[] { "Kind", "PConstraints", "PAttributes", "PTypeParameters", "PClassType", "PName", "PBody", "PMembers", "PModifierTokens", "PInitializerA", "PBaseTypes", "PModifiers", "PInitializer", "PParameters", "PNodeMemberDeclaration", });
        internal__static_Landman_Rascal_CSharp_Profobuf_MemberDeclaration__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Landman_Rascal_CSharp_Profobuf_MemberDeclaration__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration, global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration.Builder>(internal__static_Landman_Rascal_CSharp_Profobuf_MemberDeclaration__Descriptor,
                new string[] { "Kind", "PConstraints", "PIsExtensionMethod", "PAttributes", "PVariables", "PTypeParameters", "PSetter", "PName", "PBody", "PAddAccessor", "PGetter", "PRemoveAccessor", "PModifierTokens", "PModifiers", "POperatorType", "PParameters", });
        internal__static_Landman_Rascal_CSharp_Profobuf_AstType__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Landman_Rascal_CSharp_Profobuf_AstType__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Landman.Rascal.CSharp.Profobuf.AstType, global::Landman.Rascal.CSharp.Profobuf.AstType.Builder>(internal__static_Landman_Rascal_CSharp_Profobuf_AstType__Descriptor,
                new string[] { "Kind", "PIsDoubleColon", "PHasNullableSpecifier", "PKeyword", "PIdentifier", "PArraySpecifiers", "PMemberName", "PPointerRank", "PTypeArguments", });
        internal__static_Landman_Rascal_CSharp_Profobuf_Statement__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Landman_Rascal_CSharp_Profobuf_Statement__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Landman.Rascal.CSharp.Profobuf.Statement, global::Landman.Rascal.CSharp.Profobuf.Statement.Builder>(internal__static_Landman_Rascal_CSharp_Profobuf_Statement__Descriptor,
                new string[] { "Kind", "PExpression", "PVariables", "PIterators", "PStatements", "PCondition", "PEmbeddedStatement", "PBody", "PInExpression", "PTrueStatement", "PResourceAcquisition", "PFalseStatement", "PLabel", "PFinallyBlock", "PTryBlock", "PLabelExpression", "PSwitchSections", "PInitializers", "PVariableName", "PModifiers", "PCatchClauses", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum ConstructorInitializer {
    e_this = 0,
    e_base = 1,
  }
  
  public enum ParameterModifier {
    e_parameterModifierThis = 0,
    e_parameterModifierNone = 1,
    e_parameterModifierParams = 2,
    e_parameterModifierRef = 3,
    e_parameterModifierOut = 4,
  }
  
  public enum QueryOrderingDirection {
    e_queryOrderingDirectionAscending = 0,
    e_queryOrderingDirectionNone = 1,
    e_queryOrderingDirectionDescending = 2,
  }
  
  public enum UnaryOperator {
    e_bitNot = 0,
    e_dereference = 1,
    e_not = 2,
    e_plus = 3,
    e_decrement = 4,
    e_minus = 5,
    e_postIncrement = 6,
    e_postDecrement = 7,
    e_addressOf = 8,
    e_increment = 9,
  }
  
  public enum FieldDirection {
    e_fieldDirectionNone = 0,
    e_fieldDirectionRef = 1,
    e_fieldDirectionOut = 2,
  }
  
  public enum BinaryOperator {
    e_conditionalOr = 0,
    e_divide = 1,
    e_inEquality = 2,
    e_conditionalAnd = 3,
    e_bitwiseOr = 4,
    e_bitwiseAnd = 5,
    e_modulus = 6,
    e_equality = 7,
    e_lessThanOrEqual = 8,
    e_lessThan = 9,
    e_shiftLeft = 10,
    e_greaterThan = 11,
    e_add = 12,
    e_exclusiveOr = 13,
    e_shiftRight = 14,
    e_multiply = 15,
    e_any = 16,
    e_nullCoalescing = 17,
    e_greaterThanOrEqual = 18,
    e_subtract = 19,
  }
  
  public enum AssignmentOperator {
    e_assignmentOperatorShiftLeft = 0,
    e_assignmentOperatorDivide = 1,
    e_assignmentOperatorAssign = 2,
    e_assignmentOperatorBitwiseOr = 3,
    e_assignmentOperatorAdd = 4,
    e_assignmentOperatorExclusiveOr = 5,
    e_assignmentOperatorShiftRight = 6,
    e_assignmentOperatorMultiply = 7,
    e_assignmentOperatorAny = 8,
    e_assignmentOperatorBitwiseAnd = 9,
    e_assignmentOperatorModulus = 10,
    e_assignmentOperatorSubtract = 11,
  }
  
  public enum Class {
    e_delegate = 0,
    e_interface = 1,
    e_module = 2,
    e_class = 3,
    e_enum = 4,
    e_struct = 5,
  }
  
  public enum Modifiers {
    e_modifiersReadonly = 0,
    e_modifiersVirtual = 1,
    e_modifiersPartial = 2,
    e_modifiersNew = 3,
    e_modifiersConst = 4,
    e_modifiersProtected = 5,
    e_modifiersPublic = 6,
    e_modifiersSealed = 7,
    e_modifiersAbstract = 8,
    e_modifiersExtern = 9,
    e_modifiersNone = 10,
    e_modifiersStatic = 11,
    e_modifiersVisibilityMask = 12,
    e_modifiersOverride = 13,
    e_modifiersInternal = 14,
    e_modifiersUnsafe = 15,
    e_modifiersFixed = 16,
    e_modifiersVolatile = 17,
    e_modifiersPrivate = 18,
  }
  
  public enum Comment {
    e_multiLine = 0,
    e_singleLine = 1,
    e_documentation = 2,
  }
  
  public enum Operator {
    e_operatorImplicit = 0,
    e_operatorTrue = 1,
    e_operatorBitwiseOr = 2,
    e_operatorDivision = 3,
    e_operatorDecrement = 4,
    e_operatorUnaryNegation = 5,
    e_operatorLeftShift = 6,
    e_operatorBitwiseAnd = 7,
    e_operatorSubtraction = 8,
    e_operatorRightShift = 9,
    e_operatorModulus = 10,
    e_operatorIncrement = 11,
    e_operatorEquality = 12,
    e_operatorInequality = 13,
    e_operatorLessThanOrEqual = 14,
    e_operatorLessThan = 15,
    e_operatorLogicalNot = 16,
    e_operatorGreaterThan = 17,
    e_operatorUnaryPlus = 18,
    e_operatorExclusiveOr = 19,
    e_operatorExplicit = 20,
    e_operatorMultiply = 21,
    e_operatorFalse = 22,
    e_operatorAddition = 23,
    e_operatorGreaterThanOrEqual = 24,
    e_operatorOnesComplement = 25,
  }
  
  public enum AttributeTarget {
    e_attributeTargetField = 0,
    e_attributeTargetNone = 1,
    e_attributeTargetReturn = 2,
    e_attributeTargetUnknown = 3,
    e_attributeTargetType = 4,
    e_attributeTargetModule = 5,
    e_attributeTargetAssembly = 6,
    e_attributeTargetMethod = 7,
    e_attributeTargetParam = 8,
  }
  
  public enum VarianceModifier {
    e_invariant = 0,
    e_covariant = 1,
    e_contravariant = 2,
  }
  
  #endregion
  
  #region Messages
  public sealed partial class CSharpParseRequest : pb::GeneratedMessage<CSharpParseRequest, CSharpParseRequest.Builder> {
    private static readonly CSharpParseRequest defaultInstance = new Builder().BuildPartial();
    public static CSharpParseRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CSharpParseRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override CSharpParseRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.internal__static_Landman_Rascal_CSharp_Profobuf_CSharpParseRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CSharpParseRequest, CSharpParseRequest.Builder> InternalFieldAccessors {
      get { return global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.internal__static_Landman_Rascal_CSharp_Profobuf_CSharpParseRequest__FieldAccessorTable; }
    }
    
    public const int FilenameFieldNumber = 1;
    private bool hasFilename;
    private string filename_ = "";
    public bool HasFilename {
      get { return hasFilename; }
    }
    public string Filename {
      get { return filename_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFilename) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasFilename) {
        output.WriteString(1, Filename);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasFilename) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Filename);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CSharpParseRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CSharpParseRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CSharpParseRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CSharpParseRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CSharpParseRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CSharpParseRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CSharpParseRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CSharpParseRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CSharpParseRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CSharpParseRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CSharpParseRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<CSharpParseRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      CSharpParseRequest result = new CSharpParseRequest();
      
      protected override CSharpParseRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new CSharpParseRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Landman.Rascal.CSharp.Profobuf.CSharpParseRequest.Descriptor; }
      }
      
      public override CSharpParseRequest DefaultInstanceForType {
        get { return global::Landman.Rascal.CSharp.Profobuf.CSharpParseRequest.DefaultInstance; }
      }
      
      public override CSharpParseRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        CSharpParseRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CSharpParseRequest) {
          return MergeFrom((CSharpParseRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CSharpParseRequest other) {
        if (other == global::Landman.Rascal.CSharp.Profobuf.CSharpParseRequest.DefaultInstance) return this;
        if (other.HasFilename) {
          Filename = other.Filename;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Filename = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasFilename {
        get { return result.HasFilename; }
      }
      public string Filename {
        get { return result.Filename; }
        set { SetFilename(value); }
      }
      public Builder SetFilename(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasFilename = true;
        result.filename_ = value;
        return this;
      }
      public Builder ClearFilename() {
        result.hasFilename = false;
        result.filename_ = "";
        return this;
      }
    }
    static CSharpParseRequest() {
      object.ReferenceEquals(global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.Descriptor, null);
    }
  }
  
  public sealed partial class CSharpParseResult : pb::GeneratedMessage<CSharpParseResult, CSharpParseResult.Builder> {
    private static readonly CSharpParseResult defaultInstance = new Builder().BuildPartial();
    public static CSharpParseResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CSharpParseResult DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override CSharpParseResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.internal__static_Landman_Rascal_CSharp_Profobuf_CSharpParseResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CSharpParseResult, CSharpParseResult.Builder> InternalFieldAccessors {
      get { return global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.internal__static_Landman_Rascal_CSharp_Profobuf_CSharpParseResult__FieldAccessorTable; }
    }
    
    public const int ResultFieldNumber = 1;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> result_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> ResultList {
      get { return result_; }
    }
    public int ResultCount {
      get { return result_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetResult(int index) {
      return result_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in ResultList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in ResultList) {
        output.WriteMessage(1, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in ResultList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CSharpParseResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CSharpParseResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CSharpParseResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CSharpParseResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CSharpParseResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CSharpParseResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CSharpParseResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CSharpParseResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CSharpParseResult ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CSharpParseResult ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CSharpParseResult prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<CSharpParseResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      CSharpParseResult result = new CSharpParseResult();
      
      protected override CSharpParseResult MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new CSharpParseResult();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Landman.Rascal.CSharp.Profobuf.CSharpParseResult.Descriptor; }
      }
      
      public override CSharpParseResult DefaultInstanceForType {
        get { return global::Landman.Rascal.CSharp.Profobuf.CSharpParseResult.DefaultInstance; }
      }
      
      public override CSharpParseResult BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.result_.MakeReadOnly();
        CSharpParseResult returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CSharpParseResult) {
          return MergeFrom((CSharpParseResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CSharpParseResult other) {
        if (other == global::Landman.Rascal.CSharp.Profobuf.CSharpParseResult.DefaultInstance) return this;
        if (other.result_.Count != 0) {
          base.AddRange(other.result_, result.result_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddResult(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> ResultList {
        get { return result.result_; }
      }
      public int ResultCount {
        get { return result.ResultCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetResult(int index) {
        return result.GetResult(index);
      }
      public Builder SetResult(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.result_[index] = value;
        return this;
      }
      public Builder SetResult(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.result_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddResult(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.result_.Add(value);
        return this;
      }
      public Builder AddResult(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.result_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeResult(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.result_);
        return this;
      }
      public Builder ClearResult() {
        result.result_.Clear();
        return this;
      }
    }
    static CSharpParseResult() {
      object.ReferenceEquals(global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.Descriptor, null);
    }
  }
  
  public sealed partial class AstNode : pb::GeneratedMessage<AstNode, AstNode.Builder> {
    private static readonly AstNode defaultInstance = new Builder().BuildPartial();
    public static AstNode DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AstNode DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override AstNode ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.internal__static_Landman_Rascal_CSharp_Profobuf_AstNode__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AstNode, AstNode.Builder> InternalFieldAccessors {
      get { return global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.internal__static_Landman_Rascal_CSharp_Profobuf_AstNode__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum AstNodeKind {
        k_comment = 0,
        k_namespaceDeclaration = 1,
        k_constraint = 2,
        k_attribute = 3,
        k_queryOrdering = 4,
        k_cSharpModifierToken = 5,
        k_variablePlaceholder = 6,
        k_usingDeclaration = 7,
        k_cSharpTokenNode = 8,
        k_parameterDeclaration = 9,
        k_switchSection = 10,
        k_usingAliasDeclaration = 11,
        k_typeParameterDeclaration = 12,
        k_catchClause = 13,
        k_identifier = 14,
        k_attributeSection = 15,
        k_constructorInitializer = 16,
        k_variableInitializer = 17,
        k_arraySpecifier = 18,
        k_caseLabel = 19,
        k_statement = 20,
        k_astType = 21,
        k_attributedNode = 22,
        k_expression = 23,
        k_queryClause = 24,
      }
      
    }
    #endregion
    
    public const int KindFieldNumber = 1;
    private bool hasKind;
    private global::Landman.Rascal.CSharp.Profobuf.AstNode.Types.AstNodeKind kind_ = global::Landman.Rascal.CSharp.Profobuf.AstNode.Types.AstNodeKind.k_comment;
    public bool HasKind {
      get { return hasKind; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode.Types.AstNodeKind Kind {
      get { return kind_; }
    }
    
    public const int PDirectionFieldNumber = 2;
    private bool hasPDirection;
    private global::Landman.Rascal.CSharp.Profobuf.QueryOrderingDirection pDirection_ = global::Landman.Rascal.CSharp.Profobuf.QueryOrderingDirection.e_queryOrderingDirectionAscending;
    public bool HasPDirection {
      get { return hasPDirection; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.QueryOrderingDirection PDirection {
      get { return pDirection_; }
    }
    
    public const int PDefaultExpressionFieldNumber = 3;
    private bool hasPDefaultExpression;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pDefaultExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPDefaultExpression {
      get { return hasPDefaultExpression; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PDefaultExpression {
      get { return pDefaultExpression_; }
    }
    
    public const int PAttributesFieldNumber = 4;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pAttributes_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PAttributesList {
      get { return pAttributes_; }
    }
    public int PAttributesCount {
      get { return pAttributes_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPAttributes(int index) {
      return pAttributes_[index];
    }
    
    public const int PNodeExpressionFieldNumber = 5;
    private bool hasPNodeExpression;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pNodeExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPNodeExpression {
      get { return hasPNodeExpression; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PNodeExpression {
      get { return pNodeExpression_; }
    }
    
    public const int PFullNameFieldNumber = 6;
    private bool hasPFullName;
    private string pFullName_ = "";
    public bool HasPFullName {
      get { return hasPFullName; }
    }
    public string PFullName {
      get { return pFullName_; }
    }
    
    public const int PContentFieldNumber = 7;
    private bool hasPContent;
    private string pContent_ = "";
    public bool HasPContent {
      get { return hasPContent; }
    }
    public string PContent {
      get { return pContent_; }
    }
    
    public const int PNodeStatementFieldNumber = 8;
    private bool hasPNodeStatement;
    private global::Landman.Rascal.CSharp.Profobuf.Statement pNodeStatement_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
    public bool HasPNodeStatement {
      get { return hasPNodeStatement; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Statement PNodeStatement {
      get { return pNodeStatement_; }
    }
    
    public const int PMembersFieldNumber = 9;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pMembers_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PMembersList {
      get { return pMembers_; }
    }
    public int PMembersCount {
      get { return pMembers_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPMembers(int index) {
      return pMembers_[index];
    }
    
    public const int PVarianceFieldNumber = 10;
    private bool hasPVariance;
    private global::Landman.Rascal.CSharp.Profobuf.VarianceModifier pVariance_ = global::Landman.Rascal.CSharp.Profobuf.VarianceModifier.e_invariant;
    public bool HasPVariance {
      get { return hasPVariance; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.VarianceModifier PVariance {
      get { return pVariance_; }
    }
    
    public const int PVariableNameFieldNumber = 11;
    private bool hasPVariableName;
    private string pVariableName_ = "";
    public bool HasPVariableName {
      get { return hasPVariableName; }
    }
    public string PVariableName {
      get { return pVariableName_; }
    }
    
    public const int PCaseLabelsFieldNumber = 12;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pCaseLabels_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PCaseLabelsList {
      get { return pCaseLabels_; }
    }
    public int PCaseLabelsCount {
      get { return pCaseLabels_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPCaseLabels(int index) {
      return pCaseLabels_[index];
    }
    
    public const int PInitializerFieldNumber = 13;
    private bool hasPInitializer;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pInitializer_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPInitializer {
      get { return hasPInitializer; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PInitializer {
      get { return pInitializer_; }
    }
    
    public const int PAttributesAFieldNumber = 14;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pAttributesA_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PAttributesAList {
      get { return pAttributesA_; }
    }
    public int PAttributesACount {
      get { return pAttributesA_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPAttributesA(int index) {
      return pAttributesA_[index];
    }
    
    public const int PExpressionFieldNumber = 15;
    private bool hasPExpression;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPExpression {
      get { return hasPExpression; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PExpression {
      get { return pExpression_; }
    }
    
    public const int PNodeAttributedNodeFieldNumber = 16;
    private bool hasPNodeAttributedNode;
    private global::Landman.Rascal.CSharp.Profobuf.AttributedNode pNodeAttributedNode_ = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.DefaultInstance;
    public bool HasPNodeAttributedNode {
      get { return hasPNodeAttributedNode; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AttributedNode PNodeAttributedNode {
      get { return pNodeAttributedNode_; }
    }
    
    public const int PArgumentsFieldNumber = 17;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Expression> pArguments_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Expression>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.Expression> PArgumentsList {
      get { return pArguments_; }
    }
    public int PArgumentsCount {
      get { return pArguments_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression GetPArguments(int index) {
      return pArguments_[index];
    }
    
    public const int PStatementsFieldNumber = 18;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Statement> pStatements_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Statement>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.Statement> PStatementsList {
      get { return pStatements_; }
    }
    public int PStatementsCount {
      get { return pStatements_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Statement GetPStatements(int index) {
      return pStatements_[index];
    }
    
    public const int PBodyFieldNumber = 19;
    private bool hasPBody;
    private global::Landman.Rascal.CSharp.Profobuf.Statement pBody_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
    public bool HasPBody {
      get { return hasPBody; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Statement PBody {
      get { return pBody_; }
    }
    
    public const int PNamespaceFieldNumber = 20;
    private bool hasPNamespace;
    private string pNamespace_ = "";
    public bool HasPNamespace {
      get { return hasPNamespace; }
    }
    public string PNamespace {
      get { return pNamespace_; }
    }
    
    public const int PNodeAstTypeFieldNumber = 21;
    private bool hasPNodeAstType;
    private global::Landman.Rascal.CSharp.Profobuf.AstType pNodeAstType_ = global::Landman.Rascal.CSharp.Profobuf.AstType.DefaultInstance;
    public bool HasPNodeAstType {
      get { return hasPNodeAstType; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstType PNodeAstType {
      get { return pNodeAstType_; }
    }
    
    public const int PCommentTypeFieldNumber = 22;
    private bool hasPCommentType;
    private global::Landman.Rascal.CSharp.Profobuf.Comment pCommentType_ = global::Landman.Rascal.CSharp.Profobuf.Comment.e_multiLine;
    public bool HasPCommentType {
      get { return hasPCommentType; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Comment PCommentType {
      get { return pCommentType_; }
    }
    
    public const int PAliasFieldNumber = 23;
    private bool hasPAlias;
    private string pAlias_ = "";
    public bool HasPAlias {
      get { return hasPAlias; }
    }
    public string PAlias {
      get { return pAlias_; }
    }
    
    public const int PTypeParameterFieldNumber = 24;
    private bool hasPTypeParameter;
    private string pTypeParameter_ = "";
    public bool HasPTypeParameter {
      get { return hasPTypeParameter; }
    }
    public string PTypeParameter {
      get { return pTypeParameter_; }
    }
    
    public const int PParameterModifierFieldNumber = 25;
    private bool hasPParameterModifier;
    private global::Landman.Rascal.CSharp.Profobuf.ParameterModifier pParameterModifier_ = global::Landman.Rascal.CSharp.Profobuf.ParameterModifier.e_parameterModifierThis;
    public bool HasPParameterModifier {
      get { return hasPParameterModifier; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.ParameterModifier PParameterModifier {
      get { return pParameterModifier_; }
    }
    
    public const int PModifierFieldNumber = 26;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Modifiers> pModifier_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Modifiers>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.Modifiers> PModifierList {
      get { return pbc::Lists.AsReadOnly(pModifier_); }
    }
    public int PModifierCount {
      get { return pModifier_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Modifiers GetPModifier(int index) {
      return pModifier_[index];
    }
    
    public const int PStartsLineFieldNumber = 27;
    private bool hasPStartsLine;
    private bool pStartsLine_ = false;
    public bool HasPStartsLine {
      get { return hasPStartsLine; }
    }
    public bool PStartsLine {
      get { return pStartsLine_; }
    }
    
    public const int PNameFieldNumber = 28;
    private bool hasPName;
    private string pName_ = "";
    public bool HasPName {
      get { return hasPName; }
    }
    public string PName {
      get { return pName_; }
    }
    
    public const int PBaseTypesFieldNumber = 29;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstType> pBaseTypes_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstType>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstType> PBaseTypesList {
      get { return pBaseTypes_; }
    }
    public int PBaseTypesCount {
      get { return pBaseTypes_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstType GetPBaseTypes(int index) {
      return pBaseTypes_[index];
    }
    
    public const int PDimensionsFieldNumber = 30;
    private bool hasPDimensions;
    private int pDimensions_ = 0;
    public bool HasPDimensions {
      get { return hasPDimensions; }
    }
    public int PDimensions {
      get { return pDimensions_; }
    }
    
    public const int PAttributeTargetFieldNumber = 31;
    private bool hasPAttributeTarget;
    private global::Landman.Rascal.CSharp.Profobuf.AttributeTarget pAttributeTarget_ = global::Landman.Rascal.CSharp.Profobuf.AttributeTarget.e_attributeTargetField;
    public bool HasPAttributeTarget {
      get { return hasPAttributeTarget; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AttributeTarget PAttributeTarget {
      get { return pAttributeTarget_; }
    }
    
    public const int PIdentifiersFieldNumber = 32;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pIdentifiers_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PIdentifiersList {
      get { return pIdentifiers_; }
    }
    public int PIdentifiersCount {
      get { return pIdentifiers_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPIdentifiers(int index) {
      return pIdentifiers_[index];
    }
    
    public const int PConstructorInitializerTypeFieldNumber = 33;
    private bool hasPConstructorInitializerType;
    private global::Landman.Rascal.CSharp.Profobuf.ConstructorInitializer pConstructorInitializerType_ = global::Landman.Rascal.CSharp.Profobuf.ConstructorInitializer.e_this;
    public bool HasPConstructorInitializerType {
      get { return hasPConstructorInitializerType; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.ConstructorInitializer PConstructorInitializerType {
      get { return pConstructorInitializerType_; }
    }
    
    public const int PAllModifiersFieldNumber = 34;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Modifiers> pAllModifiers_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Modifiers>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.Modifiers> PAllModifiersList {
      get { return pbc::Lists.AsReadOnly(pAllModifiers_); }
    }
    public int PAllModifiersCount {
      get { return pAllModifiers_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Modifiers GetPAllModifiers(int index) {
      return pAllModifiers_[index];
    }
    
    public const int PNodeQueryClauseFieldNumber = 35;
    private bool hasPNodeQueryClause;
    private global::Landman.Rascal.CSharp.Profobuf.QueryClause pNodeQueryClause_ = global::Landman.Rascal.CSharp.Profobuf.QueryClause.DefaultInstance;
    public bool HasPNodeQueryClause {
      get { return hasPNodeQueryClause; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.QueryClause PNodeQueryClause {
      get { return pNodeQueryClause_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKind) return false;
        if (HasPDefaultExpression) {
          if (!PDefaultExpression.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PAttributesList) {
          if (!element.IsInitialized) return false;
        }
        if (HasPNodeExpression) {
          if (!PNodeExpression.IsInitialized) return false;
        }
        if (HasPNodeStatement) {
          if (!PNodeStatement.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PMembersList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PCaseLabelsList) {
          if (!element.IsInitialized) return false;
        }
        if (HasPInitializer) {
          if (!PInitializer.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PAttributesAList) {
          if (!element.IsInitialized) return false;
        }
        if (HasPExpression) {
          if (!PExpression.IsInitialized) return false;
        }
        if (HasPNodeAttributedNode) {
          if (!PNodeAttributedNode.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.Expression element in PArgumentsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.Statement element in PStatementsList) {
          if (!element.IsInitialized) return false;
        }
        if (HasPBody) {
          if (!PBody.IsInitialized) return false;
        }
        if (HasPNodeAstType) {
          if (!PNodeAstType.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstType element in PBaseTypesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PIdentifiersList) {
          if (!element.IsInitialized) return false;
        }
        if (HasPNodeQueryClause) {
          if (!PNodeQueryClause.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasKind) {
        output.WriteEnum(1, (int) Kind);
      }
      if (HasPDirection) {
        output.WriteEnum(2, (int) PDirection);
      }
      if (HasPDefaultExpression) {
        output.WriteMessage(3, PDefaultExpression);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PAttributesList) {
        output.WriteMessage(4, element);
      }
      if (HasPNodeExpression) {
        output.WriteMessage(5, PNodeExpression);
      }
      if (HasPFullName) {
        output.WriteString(6, PFullName);
      }
      if (HasPContent) {
        output.WriteString(7, PContent);
      }
      if (HasPNodeStatement) {
        output.WriteMessage(8, PNodeStatement);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PMembersList) {
        output.WriteMessage(9, element);
      }
      if (HasPVariance) {
        output.WriteEnum(10, (int) PVariance);
      }
      if (HasPVariableName) {
        output.WriteString(11, PVariableName);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PCaseLabelsList) {
        output.WriteMessage(12, element);
      }
      if (HasPInitializer) {
        output.WriteMessage(13, PInitializer);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PAttributesAList) {
        output.WriteMessage(14, element);
      }
      if (HasPExpression) {
        output.WriteMessage(15, PExpression);
      }
      if (HasPNodeAttributedNode) {
        output.WriteMessage(16, PNodeAttributedNode);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.Expression element in PArgumentsList) {
        output.WriteMessage(17, element);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.Statement element in PStatementsList) {
        output.WriteMessage(18, element);
      }
      if (HasPBody) {
        output.WriteMessage(19, PBody);
      }
      if (HasPNamespace) {
        output.WriteString(20, PNamespace);
      }
      if (HasPNodeAstType) {
        output.WriteMessage(21, PNodeAstType);
      }
      if (HasPCommentType) {
        output.WriteEnum(22, (int) PCommentType);
      }
      if (HasPAlias) {
        output.WriteString(23, PAlias);
      }
      if (HasPTypeParameter) {
        output.WriteString(24, PTypeParameter);
      }
      if (HasPParameterModifier) {
        output.WriteEnum(25, (int) PParameterModifier);
      }
      if (pModifier_.Count > 0) {
        foreach (int element in pModifier_) {
          output.WriteEnum(26, element);
        }
      }
      if (HasPStartsLine) {
        output.WriteBool(27, PStartsLine);
      }
      if (HasPName) {
        output.WriteString(28, PName);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstType element in PBaseTypesList) {
        output.WriteMessage(29, element);
      }
      if (HasPDimensions) {
        output.WriteInt32(30, PDimensions);
      }
      if (HasPAttributeTarget) {
        output.WriteEnum(31, (int) PAttributeTarget);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PIdentifiersList) {
        output.WriteMessage(32, element);
      }
      if (HasPConstructorInitializerType) {
        output.WriteEnum(33, (int) PConstructorInitializerType);
      }
      if (pAllModifiers_.Count > 0) {
        foreach (int element in pAllModifiers_) {
          output.WriteEnum(34, element);
        }
      }
      if (HasPNodeQueryClause) {
        output.WriteMessage(35, PNodeQueryClause);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasKind) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Kind);
        }
        if (HasPDirection) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) PDirection);
        }
        if (HasPDefaultExpression) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, PDefaultExpression);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PAttributesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        if (HasPNodeExpression) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, PNodeExpression);
        }
        if (HasPFullName) {
          size += pb::CodedOutputStream.ComputeStringSize(6, PFullName);
        }
        if (HasPContent) {
          size += pb::CodedOutputStream.ComputeStringSize(7, PContent);
        }
        if (HasPNodeStatement) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, PNodeStatement);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PMembersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, element);
        }
        if (HasPVariance) {
          size += pb::CodedOutputStream.ComputeEnumSize(10, (int) PVariance);
        }
        if (HasPVariableName) {
          size += pb::CodedOutputStream.ComputeStringSize(11, PVariableName);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PCaseLabelsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, element);
        }
        if (HasPInitializer) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, PInitializer);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PAttributesAList) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, element);
        }
        if (HasPExpression) {
          size += pb::CodedOutputStream.ComputeMessageSize(15, PExpression);
        }
        if (HasPNodeAttributedNode) {
          size += pb::CodedOutputStream.ComputeMessageSize(16, PNodeAttributedNode);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.Expression element in PArgumentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(17, element);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.Statement element in PStatementsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(18, element);
        }
        if (HasPBody) {
          size += pb::CodedOutputStream.ComputeMessageSize(19, PBody);
        }
        if (HasPNamespace) {
          size += pb::CodedOutputStream.ComputeStringSize(20, PNamespace);
        }
        if (HasPNodeAstType) {
          size += pb::CodedOutputStream.ComputeMessageSize(21, PNodeAstType);
        }
        if (HasPCommentType) {
          size += pb::CodedOutputStream.ComputeEnumSize(22, (int) PCommentType);
        }
        if (HasPAlias) {
          size += pb::CodedOutputStream.ComputeStringSize(23, PAlias);
        }
        if (HasPTypeParameter) {
          size += pb::CodedOutputStream.ComputeStringSize(24, PTypeParameter);
        }
        if (HasPParameterModifier) {
          size += pb::CodedOutputStream.ComputeEnumSize(25, (int) PParameterModifier);
        }
        {
          int dataSize = 0;
          if (pModifier_.Count > 0) {
            foreach (global::Landman.Rascal.CSharp.Profobuf.Modifiers element in pModifier_) {
              dataSize += pb::CodedOutputStream.ComputeEnumSizeNoTag((int) element);
            }
            size += dataSize;
            size += 2 * pModifier_.Count;
          }
        }
        if (HasPStartsLine) {
          size += pb::CodedOutputStream.ComputeBoolSize(27, PStartsLine);
        }
        if (HasPName) {
          size += pb::CodedOutputStream.ComputeStringSize(28, PName);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstType element in PBaseTypesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(29, element);
        }
        if (HasPDimensions) {
          size += pb::CodedOutputStream.ComputeInt32Size(30, PDimensions);
        }
        if (HasPAttributeTarget) {
          size += pb::CodedOutputStream.ComputeEnumSize(31, (int) PAttributeTarget);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PIdentifiersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(32, element);
        }
        if (HasPConstructorInitializerType) {
          size += pb::CodedOutputStream.ComputeEnumSize(33, (int) PConstructorInitializerType);
        }
        {
          int dataSize = 0;
          if (pAllModifiers_.Count > 0) {
            foreach (global::Landman.Rascal.CSharp.Profobuf.Modifiers element in pAllModifiers_) {
              dataSize += pb::CodedOutputStream.ComputeEnumSizeNoTag((int) element);
            }
            size += dataSize;
            size += 2 * pAllModifiers_.Count;
          }
        }
        if (HasPNodeQueryClause) {
          size += pb::CodedOutputStream.ComputeMessageSize(35, PNodeQueryClause);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AstNode ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AstNode ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AstNode ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AstNode ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AstNode ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AstNode ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AstNode ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AstNode ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AstNode ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AstNode ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AstNode prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<AstNode, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      AstNode result = new AstNode();
      
      protected override AstNode MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new AstNode();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Landman.Rascal.CSharp.Profobuf.AstNode.Descriptor; }
      }
      
      public override AstNode DefaultInstanceForType {
        get { return global::Landman.Rascal.CSharp.Profobuf.AstNode.DefaultInstance; }
      }
      
      public override AstNode BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.pAttributes_.MakeReadOnly();
        result.pMembers_.MakeReadOnly();
        result.pCaseLabels_.MakeReadOnly();
        result.pAttributesA_.MakeReadOnly();
        result.pArguments_.MakeReadOnly();
        result.pStatements_.MakeReadOnly();
        result.pModifier_.MakeReadOnly();
        result.pBaseTypes_.MakeReadOnly();
        result.pIdentifiers_.MakeReadOnly();
        result.pAllModifiers_.MakeReadOnly();
        AstNode returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AstNode) {
          return MergeFrom((AstNode) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AstNode other) {
        if (other == global::Landman.Rascal.CSharp.Profobuf.AstNode.DefaultInstance) return this;
        if (other.HasKind) {
          Kind = other.Kind;
        }
        if (other.HasPDirection) {
          PDirection = other.PDirection;
        }
        if (other.HasPDefaultExpression) {
          MergePDefaultExpression(other.PDefaultExpression);
        }
        if (other.pAttributes_.Count != 0) {
          base.AddRange(other.pAttributes_, result.pAttributes_);
        }
        if (other.HasPNodeExpression) {
          MergePNodeExpression(other.PNodeExpression);
        }
        if (other.HasPFullName) {
          PFullName = other.PFullName;
        }
        if (other.HasPContent) {
          PContent = other.PContent;
        }
        if (other.HasPNodeStatement) {
          MergePNodeStatement(other.PNodeStatement);
        }
        if (other.pMembers_.Count != 0) {
          base.AddRange(other.pMembers_, result.pMembers_);
        }
        if (other.HasPVariance) {
          PVariance = other.PVariance;
        }
        if (other.HasPVariableName) {
          PVariableName = other.PVariableName;
        }
        if (other.pCaseLabels_.Count != 0) {
          base.AddRange(other.pCaseLabels_, result.pCaseLabels_);
        }
        if (other.HasPInitializer) {
          MergePInitializer(other.PInitializer);
        }
        if (other.pAttributesA_.Count != 0) {
          base.AddRange(other.pAttributesA_, result.pAttributesA_);
        }
        if (other.HasPExpression) {
          MergePExpression(other.PExpression);
        }
        if (other.HasPNodeAttributedNode) {
          MergePNodeAttributedNode(other.PNodeAttributedNode);
        }
        if (other.pArguments_.Count != 0) {
          base.AddRange(other.pArguments_, result.pArguments_);
        }
        if (other.pStatements_.Count != 0) {
          base.AddRange(other.pStatements_, result.pStatements_);
        }
        if (other.HasPBody) {
          MergePBody(other.PBody);
        }
        if (other.HasPNamespace) {
          PNamespace = other.PNamespace;
        }
        if (other.HasPNodeAstType) {
          MergePNodeAstType(other.PNodeAstType);
        }
        if (other.HasPCommentType) {
          PCommentType = other.PCommentType;
        }
        if (other.HasPAlias) {
          PAlias = other.PAlias;
        }
        if (other.HasPTypeParameter) {
          PTypeParameter = other.PTypeParameter;
        }
        if (other.HasPParameterModifier) {
          PParameterModifier = other.PParameterModifier;
        }
        if (other.pModifier_.Count != 0) {
          base.AddRange(other.pModifier_, result.pModifier_);
        }
        if (other.HasPStartsLine) {
          PStartsLine = other.PStartsLine;
        }
        if (other.HasPName) {
          PName = other.PName;
        }
        if (other.pBaseTypes_.Count != 0) {
          base.AddRange(other.pBaseTypes_, result.pBaseTypes_);
        }
        if (other.HasPDimensions) {
          PDimensions = other.PDimensions;
        }
        if (other.HasPAttributeTarget) {
          PAttributeTarget = other.PAttributeTarget;
        }
        if (other.pIdentifiers_.Count != 0) {
          base.AddRange(other.pIdentifiers_, result.pIdentifiers_);
        }
        if (other.HasPConstructorInitializerType) {
          PConstructorInitializerType = other.PConstructorInitializerType;
        }
        if (other.pAllModifiers_.Count != 0) {
          base.AddRange(other.pAllModifiers_, result.pAllModifiers_);
        }
        if (other.HasPNodeQueryClause) {
          MergePNodeQueryClause(other.PNodeQueryClause);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.AstNode.Types.AstNodeKind), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong) rawValue);
              } else {
                Kind = (global::Landman.Rascal.CSharp.Profobuf.AstNode.Types.AstNodeKind) rawValue;
              }
              break;
            }
            case 16: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.QueryOrderingDirection), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong) rawValue);
              } else {
                PDirection = (global::Landman.Rascal.CSharp.Profobuf.QueryOrderingDirection) rawValue;
              }
              break;
            }
            case 26: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPDefaultExpression) {
                subBuilder.MergeFrom(PDefaultExpression);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PDefaultExpression = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPAttributes(subBuilder.BuildPartial());
              break;
            }
            case 42: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPNodeExpression) {
                subBuilder.MergeFrom(PNodeExpression);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PNodeExpression = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              PFullName = input.ReadString();
              break;
            }
            case 58: {
              PContent = input.ReadString();
              break;
            }
            case 66: {
              global::Landman.Rascal.CSharp.Profobuf.Statement.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder();
              if (HasPNodeStatement) {
                subBuilder.MergeFrom(PNodeStatement);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PNodeStatement = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPMembers(subBuilder.BuildPartial());
              break;
            }
            case 80: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.VarianceModifier), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(10, (ulong) rawValue);
              } else {
                PVariance = (global::Landman.Rascal.CSharp.Profobuf.VarianceModifier) rawValue;
              }
              break;
            }
            case 90: {
              PVariableName = input.ReadString();
              break;
            }
            case 98: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPCaseLabels(subBuilder.BuildPartial());
              break;
            }
            case 106: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPInitializer) {
                subBuilder.MergeFrom(PInitializer);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PInitializer = subBuilder.BuildPartial();
              break;
            }
            case 114: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPAttributesA(subBuilder.BuildPartial());
              break;
            }
            case 122: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPExpression) {
                subBuilder.MergeFrom(PExpression);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PExpression = subBuilder.BuildPartial();
              break;
            }
            case 130: {
              global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.CreateBuilder();
              if (HasPNodeAttributedNode) {
                subBuilder.MergeFrom(PNodeAttributedNode);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PNodeAttributedNode = subBuilder.BuildPartial();
              break;
            }
            case 138: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPArguments(subBuilder.BuildPartial());
              break;
            }
            case 146: {
              global::Landman.Rascal.CSharp.Profobuf.Statement.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPStatements(subBuilder.BuildPartial());
              break;
            }
            case 154: {
              global::Landman.Rascal.CSharp.Profobuf.Statement.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder();
              if (HasPBody) {
                subBuilder.MergeFrom(PBody);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PBody = subBuilder.BuildPartial();
              break;
            }
            case 162: {
              PNamespace = input.ReadString();
              break;
            }
            case 170: {
              global::Landman.Rascal.CSharp.Profobuf.AstType.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstType.CreateBuilder();
              if (HasPNodeAstType) {
                subBuilder.MergeFrom(PNodeAstType);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PNodeAstType = subBuilder.BuildPartial();
              break;
            }
            case 176: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.Comment), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(22, (ulong) rawValue);
              } else {
                PCommentType = (global::Landman.Rascal.CSharp.Profobuf.Comment) rawValue;
              }
              break;
            }
            case 186: {
              PAlias = input.ReadString();
              break;
            }
            case 194: {
              PTypeParameter = input.ReadString();
              break;
            }
            case 200: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.ParameterModifier), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(25, (ulong) rawValue);
              } else {
                PParameterModifier = (global::Landman.Rascal.CSharp.Profobuf.ParameterModifier) rawValue;
              }
              break;
            }
            case 208: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.Modifiers), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(26, (ulong) rawValue);
              } else {
                AddPModifier((global::Landman.Rascal.CSharp.Profobuf.Modifiers) rawValue);
              }
              break;
            }
            case 216: {
              PStartsLine = input.ReadBool();
              break;
            }
            case 226: {
              PName = input.ReadString();
              break;
            }
            case 234: {
              global::Landman.Rascal.CSharp.Profobuf.AstType.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstType.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPBaseTypes(subBuilder.BuildPartial());
              break;
            }
            case 240: {
              PDimensions = input.ReadInt32();
              break;
            }
            case 248: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.AttributeTarget), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(31, (ulong) rawValue);
              } else {
                PAttributeTarget = (global::Landman.Rascal.CSharp.Profobuf.AttributeTarget) rawValue;
              }
              break;
            }
            case 258: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPIdentifiers(subBuilder.BuildPartial());
              break;
            }
            case 264: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.ConstructorInitializer), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(33, (ulong) rawValue);
              } else {
                PConstructorInitializerType = (global::Landman.Rascal.CSharp.Profobuf.ConstructorInitializer) rawValue;
              }
              break;
            }
            case 272: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.Modifiers), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(34, (ulong) rawValue);
              } else {
                AddPAllModifiers((global::Landman.Rascal.CSharp.Profobuf.Modifiers) rawValue);
              }
              break;
            }
            case 282: {
              global::Landman.Rascal.CSharp.Profobuf.QueryClause.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.QueryClause.CreateBuilder();
              if (HasPNodeQueryClause) {
                subBuilder.MergeFrom(PNodeQueryClause);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PNodeQueryClause = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasKind {
       get { return result.HasKind; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode.Types.AstNodeKind Kind {
        get { return result.Kind; }
        set { SetKind(value); }
      }
      public Builder SetKind(global::Landman.Rascal.CSharp.Profobuf.AstNode.Types.AstNodeKind value) {
        result.hasKind = true;
        result.kind_ = value;
        return this;
      }
      public Builder ClearKind() {
        result.hasKind = false;
        result.kind_ = global::Landman.Rascal.CSharp.Profobuf.AstNode.Types.AstNodeKind.k_comment;
        return this;
      }
      
      public bool HasPDirection {
       get { return result.HasPDirection; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.QueryOrderingDirection PDirection {
        get { return result.PDirection; }
        set { SetPDirection(value); }
      }
      public Builder SetPDirection(global::Landman.Rascal.CSharp.Profobuf.QueryOrderingDirection value) {
        result.hasPDirection = true;
        result.pDirection_ = value;
        return this;
      }
      public Builder ClearPDirection() {
        result.hasPDirection = false;
        result.pDirection_ = global::Landman.Rascal.CSharp.Profobuf.QueryOrderingDirection.e_queryOrderingDirectionAscending;
        return this;
      }
      
      public bool HasPDefaultExpression {
       get { return result.HasPDefaultExpression; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PDefaultExpression {
        get { return result.PDefaultExpression; }
        set { SetPDefaultExpression(value); }
      }
      public Builder SetPDefaultExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPDefaultExpression = true;
        result.pDefaultExpression_ = value;
        return this;
      }
      public Builder SetPDefaultExpression(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPDefaultExpression = true;
        result.pDefaultExpression_ = builderForValue.Build();
        return this;
      }
      public Builder MergePDefaultExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPDefaultExpression &&
            result.pDefaultExpression_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pDefaultExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pDefaultExpression_).MergeFrom(value).BuildPartial();
        } else {
          result.pDefaultExpression_ = value;
        }
        result.hasPDefaultExpression = true;
        return this;
      }
      public Builder ClearPDefaultExpression() {
        result.hasPDefaultExpression = false;
        result.pDefaultExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PAttributesList {
        get { return result.pAttributes_; }
      }
      public int PAttributesCount {
        get { return result.PAttributesCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPAttributes(int index) {
        return result.GetPAttributes(index);
      }
      public Builder SetPAttributes(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pAttributes_[index] = value;
        return this;
      }
      public Builder SetPAttributes(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pAttributes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPAttributes(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pAttributes_.Add(value);
        return this;
      }
      public Builder AddPAttributes(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pAttributes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePAttributes(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pAttributes_);
        return this;
      }
      public Builder ClearPAttributes() {
        result.pAttributes_.Clear();
        return this;
      }
      
      public bool HasPNodeExpression {
       get { return result.HasPNodeExpression; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PNodeExpression {
        get { return result.PNodeExpression; }
        set { SetPNodeExpression(value); }
      }
      public Builder SetPNodeExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPNodeExpression = true;
        result.pNodeExpression_ = value;
        return this;
      }
      public Builder SetPNodeExpression(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPNodeExpression = true;
        result.pNodeExpression_ = builderForValue.Build();
        return this;
      }
      public Builder MergePNodeExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPNodeExpression &&
            result.pNodeExpression_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pNodeExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pNodeExpression_).MergeFrom(value).BuildPartial();
        } else {
          result.pNodeExpression_ = value;
        }
        result.hasPNodeExpression = true;
        return this;
      }
      public Builder ClearPNodeExpression() {
        result.hasPNodeExpression = false;
        result.pNodeExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public bool HasPFullName {
        get { return result.HasPFullName; }
      }
      public string PFullName {
        get { return result.PFullName; }
        set { SetPFullName(value); }
      }
      public Builder SetPFullName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPFullName = true;
        result.pFullName_ = value;
        return this;
      }
      public Builder ClearPFullName() {
        result.hasPFullName = false;
        result.pFullName_ = "";
        return this;
      }
      
      public bool HasPContent {
        get { return result.HasPContent; }
      }
      public string PContent {
        get { return result.PContent; }
        set { SetPContent(value); }
      }
      public Builder SetPContent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPContent = true;
        result.pContent_ = value;
        return this;
      }
      public Builder ClearPContent() {
        result.hasPContent = false;
        result.pContent_ = "";
        return this;
      }
      
      public bool HasPNodeStatement {
       get { return result.HasPNodeStatement; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Statement PNodeStatement {
        get { return result.PNodeStatement; }
        set { SetPNodeStatement(value); }
      }
      public Builder SetPNodeStatement(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPNodeStatement = true;
        result.pNodeStatement_ = value;
        return this;
      }
      public Builder SetPNodeStatement(global::Landman.Rascal.CSharp.Profobuf.Statement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPNodeStatement = true;
        result.pNodeStatement_ = builderForValue.Build();
        return this;
      }
      public Builder MergePNodeStatement(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPNodeStatement &&
            result.pNodeStatement_ != global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance) {
            result.pNodeStatement_ = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder(result.pNodeStatement_).MergeFrom(value).BuildPartial();
        } else {
          result.pNodeStatement_ = value;
        }
        result.hasPNodeStatement = true;
        return this;
      }
      public Builder ClearPNodeStatement() {
        result.hasPNodeStatement = false;
        result.pNodeStatement_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PMembersList {
        get { return result.pMembers_; }
      }
      public int PMembersCount {
        get { return result.PMembersCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPMembers(int index) {
        return result.GetPMembers(index);
      }
      public Builder SetPMembers(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pMembers_[index] = value;
        return this;
      }
      public Builder SetPMembers(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pMembers_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPMembers(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pMembers_.Add(value);
        return this;
      }
      public Builder AddPMembers(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pMembers_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePMembers(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pMembers_);
        return this;
      }
      public Builder ClearPMembers() {
        result.pMembers_.Clear();
        return this;
      }
      
      public bool HasPVariance {
       get { return result.HasPVariance; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.VarianceModifier PVariance {
        get { return result.PVariance; }
        set { SetPVariance(value); }
      }
      public Builder SetPVariance(global::Landman.Rascal.CSharp.Profobuf.VarianceModifier value) {
        result.hasPVariance = true;
        result.pVariance_ = value;
        return this;
      }
      public Builder ClearPVariance() {
        result.hasPVariance = false;
        result.pVariance_ = global::Landman.Rascal.CSharp.Profobuf.VarianceModifier.e_invariant;
        return this;
      }
      
      public bool HasPVariableName {
        get { return result.HasPVariableName; }
      }
      public string PVariableName {
        get { return result.PVariableName; }
        set { SetPVariableName(value); }
      }
      public Builder SetPVariableName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPVariableName = true;
        result.pVariableName_ = value;
        return this;
      }
      public Builder ClearPVariableName() {
        result.hasPVariableName = false;
        result.pVariableName_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PCaseLabelsList {
        get { return result.pCaseLabels_; }
      }
      public int PCaseLabelsCount {
        get { return result.PCaseLabelsCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPCaseLabels(int index) {
        return result.GetPCaseLabels(index);
      }
      public Builder SetPCaseLabels(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pCaseLabels_[index] = value;
        return this;
      }
      public Builder SetPCaseLabels(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pCaseLabels_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPCaseLabels(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pCaseLabels_.Add(value);
        return this;
      }
      public Builder AddPCaseLabels(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pCaseLabels_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePCaseLabels(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pCaseLabels_);
        return this;
      }
      public Builder ClearPCaseLabels() {
        result.pCaseLabels_.Clear();
        return this;
      }
      
      public bool HasPInitializer {
       get { return result.HasPInitializer; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PInitializer {
        get { return result.PInitializer; }
        set { SetPInitializer(value); }
      }
      public Builder SetPInitializer(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPInitializer = true;
        result.pInitializer_ = value;
        return this;
      }
      public Builder SetPInitializer(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPInitializer = true;
        result.pInitializer_ = builderForValue.Build();
        return this;
      }
      public Builder MergePInitializer(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPInitializer &&
            result.pInitializer_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pInitializer_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pInitializer_).MergeFrom(value).BuildPartial();
        } else {
          result.pInitializer_ = value;
        }
        result.hasPInitializer = true;
        return this;
      }
      public Builder ClearPInitializer() {
        result.hasPInitializer = false;
        result.pInitializer_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PAttributesAList {
        get { return result.pAttributesA_; }
      }
      public int PAttributesACount {
        get { return result.PAttributesACount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPAttributesA(int index) {
        return result.GetPAttributesA(index);
      }
      public Builder SetPAttributesA(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pAttributesA_[index] = value;
        return this;
      }
      public Builder SetPAttributesA(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pAttributesA_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPAttributesA(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pAttributesA_.Add(value);
        return this;
      }
      public Builder AddPAttributesA(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pAttributesA_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePAttributesA(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pAttributesA_);
        return this;
      }
      public Builder ClearPAttributesA() {
        result.pAttributesA_.Clear();
        return this;
      }
      
      public bool HasPExpression {
       get { return result.HasPExpression; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PExpression {
        get { return result.PExpression; }
        set { SetPExpression(value); }
      }
      public Builder SetPExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPExpression = true;
        result.pExpression_ = value;
        return this;
      }
      public Builder SetPExpression(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPExpression = true;
        result.pExpression_ = builderForValue.Build();
        return this;
      }
      public Builder MergePExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPExpression &&
            result.pExpression_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pExpression_).MergeFrom(value).BuildPartial();
        } else {
          result.pExpression_ = value;
        }
        result.hasPExpression = true;
        return this;
      }
      public Builder ClearPExpression() {
        result.hasPExpression = false;
        result.pExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public bool HasPNodeAttributedNode {
       get { return result.HasPNodeAttributedNode; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AttributedNode PNodeAttributedNode {
        get { return result.PNodeAttributedNode; }
        set { SetPNodeAttributedNode(value); }
      }
      public Builder SetPNodeAttributedNode(global::Landman.Rascal.CSharp.Profobuf.AttributedNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPNodeAttributedNode = true;
        result.pNodeAttributedNode_ = value;
        return this;
      }
      public Builder SetPNodeAttributedNode(global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPNodeAttributedNode = true;
        result.pNodeAttributedNode_ = builderForValue.Build();
        return this;
      }
      public Builder MergePNodeAttributedNode(global::Landman.Rascal.CSharp.Profobuf.AttributedNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPNodeAttributedNode &&
            result.pNodeAttributedNode_ != global::Landman.Rascal.CSharp.Profobuf.AttributedNode.DefaultInstance) {
            result.pNodeAttributedNode_ = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.CreateBuilder(result.pNodeAttributedNode_).MergeFrom(value).BuildPartial();
        } else {
          result.pNodeAttributedNode_ = value;
        }
        result.hasPNodeAttributedNode = true;
        return this;
      }
      public Builder ClearPNodeAttributedNode() {
        result.hasPNodeAttributedNode = false;
        result.pNodeAttributedNode_ = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.Expression> PArgumentsList {
        get { return result.pArguments_; }
      }
      public int PArgumentsCount {
        get { return result.PArgumentsCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression GetPArguments(int index) {
        return result.GetPArguments(index);
      }
      public Builder SetPArguments(int index, global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pArguments_[index] = value;
        return this;
      }
      public Builder SetPArguments(int index, global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pArguments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPArguments(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pArguments_.Add(value);
        return this;
      }
      public Builder AddPArguments(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pArguments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePArguments(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.Expression> values) {
        base.AddRange(values, result.pArguments_);
        return this;
      }
      public Builder ClearPArguments() {
        result.pArguments_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.Statement> PStatementsList {
        get { return result.pStatements_; }
      }
      public int PStatementsCount {
        get { return result.PStatementsCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Statement GetPStatements(int index) {
        return result.GetPStatements(index);
      }
      public Builder SetPStatements(int index, global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pStatements_[index] = value;
        return this;
      }
      public Builder SetPStatements(int index, global::Landman.Rascal.CSharp.Profobuf.Statement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pStatements_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPStatements(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pStatements_.Add(value);
        return this;
      }
      public Builder AddPStatements(global::Landman.Rascal.CSharp.Profobuf.Statement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pStatements_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePStatements(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.Statement> values) {
        base.AddRange(values, result.pStatements_);
        return this;
      }
      public Builder ClearPStatements() {
        result.pStatements_.Clear();
        return this;
      }
      
      public bool HasPBody {
       get { return result.HasPBody; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Statement PBody {
        get { return result.PBody; }
        set { SetPBody(value); }
      }
      public Builder SetPBody(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPBody = true;
        result.pBody_ = value;
        return this;
      }
      public Builder SetPBody(global::Landman.Rascal.CSharp.Profobuf.Statement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPBody = true;
        result.pBody_ = builderForValue.Build();
        return this;
      }
      public Builder MergePBody(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPBody &&
            result.pBody_ != global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance) {
            result.pBody_ = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder(result.pBody_).MergeFrom(value).BuildPartial();
        } else {
          result.pBody_ = value;
        }
        result.hasPBody = true;
        return this;
      }
      public Builder ClearPBody() {
        result.hasPBody = false;
        result.pBody_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
        return this;
      }
      
      public bool HasPNamespace {
        get { return result.HasPNamespace; }
      }
      public string PNamespace {
        get { return result.PNamespace; }
        set { SetPNamespace(value); }
      }
      public Builder SetPNamespace(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPNamespace = true;
        result.pNamespace_ = value;
        return this;
      }
      public Builder ClearPNamespace() {
        result.hasPNamespace = false;
        result.pNamespace_ = "";
        return this;
      }
      
      public bool HasPNodeAstType {
       get { return result.HasPNodeAstType; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstType PNodeAstType {
        get { return result.PNodeAstType; }
        set { SetPNodeAstType(value); }
      }
      public Builder SetPNodeAstType(global::Landman.Rascal.CSharp.Profobuf.AstType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPNodeAstType = true;
        result.pNodeAstType_ = value;
        return this;
      }
      public Builder SetPNodeAstType(global::Landman.Rascal.CSharp.Profobuf.AstType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPNodeAstType = true;
        result.pNodeAstType_ = builderForValue.Build();
        return this;
      }
      public Builder MergePNodeAstType(global::Landman.Rascal.CSharp.Profobuf.AstType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPNodeAstType &&
            result.pNodeAstType_ != global::Landman.Rascal.CSharp.Profobuf.AstType.DefaultInstance) {
            result.pNodeAstType_ = global::Landman.Rascal.CSharp.Profobuf.AstType.CreateBuilder(result.pNodeAstType_).MergeFrom(value).BuildPartial();
        } else {
          result.pNodeAstType_ = value;
        }
        result.hasPNodeAstType = true;
        return this;
      }
      public Builder ClearPNodeAstType() {
        result.hasPNodeAstType = false;
        result.pNodeAstType_ = global::Landman.Rascal.CSharp.Profobuf.AstType.DefaultInstance;
        return this;
      }
      
      public bool HasPCommentType {
       get { return result.HasPCommentType; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Comment PCommentType {
        get { return result.PCommentType; }
        set { SetPCommentType(value); }
      }
      public Builder SetPCommentType(global::Landman.Rascal.CSharp.Profobuf.Comment value) {
        result.hasPCommentType = true;
        result.pCommentType_ = value;
        return this;
      }
      public Builder ClearPCommentType() {
        result.hasPCommentType = false;
        result.pCommentType_ = global::Landman.Rascal.CSharp.Profobuf.Comment.e_multiLine;
        return this;
      }
      
      public bool HasPAlias {
        get { return result.HasPAlias; }
      }
      public string PAlias {
        get { return result.PAlias; }
        set { SetPAlias(value); }
      }
      public Builder SetPAlias(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPAlias = true;
        result.pAlias_ = value;
        return this;
      }
      public Builder ClearPAlias() {
        result.hasPAlias = false;
        result.pAlias_ = "";
        return this;
      }
      
      public bool HasPTypeParameter {
        get { return result.HasPTypeParameter; }
      }
      public string PTypeParameter {
        get { return result.PTypeParameter; }
        set { SetPTypeParameter(value); }
      }
      public Builder SetPTypeParameter(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPTypeParameter = true;
        result.pTypeParameter_ = value;
        return this;
      }
      public Builder ClearPTypeParameter() {
        result.hasPTypeParameter = false;
        result.pTypeParameter_ = "";
        return this;
      }
      
      public bool HasPParameterModifier {
       get { return result.HasPParameterModifier; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.ParameterModifier PParameterModifier {
        get { return result.PParameterModifier; }
        set { SetPParameterModifier(value); }
      }
      public Builder SetPParameterModifier(global::Landman.Rascal.CSharp.Profobuf.ParameterModifier value) {
        result.hasPParameterModifier = true;
        result.pParameterModifier_ = value;
        return this;
      }
      public Builder ClearPParameterModifier() {
        result.hasPParameterModifier = false;
        result.pParameterModifier_ = global::Landman.Rascal.CSharp.Profobuf.ParameterModifier.e_parameterModifierThis;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.Modifiers> PModifierList {
        get { return result.pModifier_; }
      }
      public int PModifierCount {
        get { return result.PModifierCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Modifiers GetPModifier(int index) {
        return result.GetPModifier(index);
      }
      public Builder SetPModifier(int index, global::Landman.Rascal.CSharp.Profobuf.Modifiers value) {
        result.pModifier_[index] = value;
        return this;
      }
      public Builder AddPModifier(global::Landman.Rascal.CSharp.Profobuf.Modifiers value) {
        result.pModifier_.Add(value);
        return this;
      }
      public Builder AddRangePModifier(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.Modifiers> values) {
        base.AddRange(values, result.pModifier_);
        return this;
      }
      public Builder ClearPModifier() {
        result.pModifier_.Clear();
        return this;
      }
      
      public bool HasPStartsLine {
        get { return result.HasPStartsLine; }
      }
      public bool PStartsLine {
        get { return result.PStartsLine; }
        set { SetPStartsLine(value); }
      }
      public Builder SetPStartsLine(bool value) {
        result.hasPStartsLine = true;
        result.pStartsLine_ = value;
        return this;
      }
      public Builder ClearPStartsLine() {
        result.hasPStartsLine = false;
        result.pStartsLine_ = false;
        return this;
      }
      
      public bool HasPName {
        get { return result.HasPName; }
      }
      public string PName {
        get { return result.PName; }
        set { SetPName(value); }
      }
      public Builder SetPName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPName = true;
        result.pName_ = value;
        return this;
      }
      public Builder ClearPName() {
        result.hasPName = false;
        result.pName_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstType> PBaseTypesList {
        get { return result.pBaseTypes_; }
      }
      public int PBaseTypesCount {
        get { return result.PBaseTypesCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstType GetPBaseTypes(int index) {
        return result.GetPBaseTypes(index);
      }
      public Builder SetPBaseTypes(int index, global::Landman.Rascal.CSharp.Profobuf.AstType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pBaseTypes_[index] = value;
        return this;
      }
      public Builder SetPBaseTypes(int index, global::Landman.Rascal.CSharp.Profobuf.AstType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pBaseTypes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPBaseTypes(global::Landman.Rascal.CSharp.Profobuf.AstType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pBaseTypes_.Add(value);
        return this;
      }
      public Builder AddPBaseTypes(global::Landman.Rascal.CSharp.Profobuf.AstType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pBaseTypes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePBaseTypes(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstType> values) {
        base.AddRange(values, result.pBaseTypes_);
        return this;
      }
      public Builder ClearPBaseTypes() {
        result.pBaseTypes_.Clear();
        return this;
      }
      
      public bool HasPDimensions {
        get { return result.HasPDimensions; }
      }
      public int PDimensions {
        get { return result.PDimensions; }
        set { SetPDimensions(value); }
      }
      public Builder SetPDimensions(int value) {
        result.hasPDimensions = true;
        result.pDimensions_ = value;
        return this;
      }
      public Builder ClearPDimensions() {
        result.hasPDimensions = false;
        result.pDimensions_ = 0;
        return this;
      }
      
      public bool HasPAttributeTarget {
       get { return result.HasPAttributeTarget; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AttributeTarget PAttributeTarget {
        get { return result.PAttributeTarget; }
        set { SetPAttributeTarget(value); }
      }
      public Builder SetPAttributeTarget(global::Landman.Rascal.CSharp.Profobuf.AttributeTarget value) {
        result.hasPAttributeTarget = true;
        result.pAttributeTarget_ = value;
        return this;
      }
      public Builder ClearPAttributeTarget() {
        result.hasPAttributeTarget = false;
        result.pAttributeTarget_ = global::Landman.Rascal.CSharp.Profobuf.AttributeTarget.e_attributeTargetField;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PIdentifiersList {
        get { return result.pIdentifiers_; }
      }
      public int PIdentifiersCount {
        get { return result.PIdentifiersCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPIdentifiers(int index) {
        return result.GetPIdentifiers(index);
      }
      public Builder SetPIdentifiers(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pIdentifiers_[index] = value;
        return this;
      }
      public Builder SetPIdentifiers(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pIdentifiers_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPIdentifiers(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pIdentifiers_.Add(value);
        return this;
      }
      public Builder AddPIdentifiers(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pIdentifiers_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePIdentifiers(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pIdentifiers_);
        return this;
      }
      public Builder ClearPIdentifiers() {
        result.pIdentifiers_.Clear();
        return this;
      }
      
      public bool HasPConstructorInitializerType {
       get { return result.HasPConstructorInitializerType; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.ConstructorInitializer PConstructorInitializerType {
        get { return result.PConstructorInitializerType; }
        set { SetPConstructorInitializerType(value); }
      }
      public Builder SetPConstructorInitializerType(global::Landman.Rascal.CSharp.Profobuf.ConstructorInitializer value) {
        result.hasPConstructorInitializerType = true;
        result.pConstructorInitializerType_ = value;
        return this;
      }
      public Builder ClearPConstructorInitializerType() {
        result.hasPConstructorInitializerType = false;
        result.pConstructorInitializerType_ = global::Landman.Rascal.CSharp.Profobuf.ConstructorInitializer.e_this;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.Modifiers> PAllModifiersList {
        get { return result.pAllModifiers_; }
      }
      public int PAllModifiersCount {
        get { return result.PAllModifiersCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Modifiers GetPAllModifiers(int index) {
        return result.GetPAllModifiers(index);
      }
      public Builder SetPAllModifiers(int index, global::Landman.Rascal.CSharp.Profobuf.Modifiers value) {
        result.pAllModifiers_[index] = value;
        return this;
      }
      public Builder AddPAllModifiers(global::Landman.Rascal.CSharp.Profobuf.Modifiers value) {
        result.pAllModifiers_.Add(value);
        return this;
      }
      public Builder AddRangePAllModifiers(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.Modifiers> values) {
        base.AddRange(values, result.pAllModifiers_);
        return this;
      }
      public Builder ClearPAllModifiers() {
        result.pAllModifiers_.Clear();
        return this;
      }
      
      public bool HasPNodeQueryClause {
       get { return result.HasPNodeQueryClause; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.QueryClause PNodeQueryClause {
        get { return result.PNodeQueryClause; }
        set { SetPNodeQueryClause(value); }
      }
      public Builder SetPNodeQueryClause(global::Landman.Rascal.CSharp.Profobuf.QueryClause value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPNodeQueryClause = true;
        result.pNodeQueryClause_ = value;
        return this;
      }
      public Builder SetPNodeQueryClause(global::Landman.Rascal.CSharp.Profobuf.QueryClause.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPNodeQueryClause = true;
        result.pNodeQueryClause_ = builderForValue.Build();
        return this;
      }
      public Builder MergePNodeQueryClause(global::Landman.Rascal.CSharp.Profobuf.QueryClause value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPNodeQueryClause &&
            result.pNodeQueryClause_ != global::Landman.Rascal.CSharp.Profobuf.QueryClause.DefaultInstance) {
            result.pNodeQueryClause_ = global::Landman.Rascal.CSharp.Profobuf.QueryClause.CreateBuilder(result.pNodeQueryClause_).MergeFrom(value).BuildPartial();
        } else {
          result.pNodeQueryClause_ = value;
        }
        result.hasPNodeQueryClause = true;
        return this;
      }
      public Builder ClearPNodeQueryClause() {
        result.hasPNodeQueryClause = false;
        result.pNodeQueryClause_ = global::Landman.Rascal.CSharp.Profobuf.QueryClause.DefaultInstance;
        return this;
      }
    }
    static AstNode() {
      object.ReferenceEquals(global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.Descriptor, null);
    }
  }
  
  public sealed partial class QueryClause : pb::GeneratedMessage<QueryClause, QueryClause.Builder> {
    private static readonly QueryClause defaultInstance = new Builder().BuildPartial();
    public static QueryClause DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QueryClause DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override QueryClause ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.internal__static_Landman_Rascal_CSharp_Profobuf_QueryClause__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QueryClause, QueryClause.Builder> InternalFieldAccessors {
      get { return global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.internal__static_Landman_Rascal_CSharp_Profobuf_QueryClause__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum QueryClauseKind {
        k_queryContinuationClause = 0,
        k_queryWhereClause = 1,
        k_queryGroupClause = 2,
        k_queryOrderClause = 3,
        k_querySelectClause = 4,
        k_queryLetClause = 5,
        k_queryFromClause = 6,
        k_queryJoinClause = 7,
      }
      
    }
    #endregion
    
    public const int KindFieldNumber = 1;
    private bool hasKind;
    private global::Landman.Rascal.CSharp.Profobuf.QueryClause.Types.QueryClauseKind kind_ = global::Landman.Rascal.CSharp.Profobuf.QueryClause.Types.QueryClauseKind.k_queryContinuationClause;
    public bool HasKind {
      get { return hasKind; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.QueryClause.Types.QueryClauseKind Kind {
      get { return kind_; }
    }
    
    public const int PExpressionFieldNumber = 2;
    private bool hasPExpression;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPExpression {
      get { return hasPExpression; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PExpression {
      get { return pExpression_; }
    }
    
    public const int PConditionFieldNumber = 3;
    private bool hasPCondition;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pCondition_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPCondition {
      get { return hasPCondition; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PCondition {
      get { return pCondition_; }
    }
    
    public const int PInExpressionFieldNumber = 4;
    private bool hasPInExpression;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pInExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPInExpression {
      get { return hasPInExpression; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PInExpression {
      get { return pInExpression_; }
    }
    
    public const int PIdentifierFieldNumber = 5;
    private bool hasPIdentifier;
    private string pIdentifier_ = "";
    public bool HasPIdentifier {
      get { return hasPIdentifier; }
    }
    public string PIdentifier {
      get { return pIdentifier_; }
    }
    
    public const int PIntoIdentifierFieldNumber = 6;
    private bool hasPIntoIdentifier;
    private string pIntoIdentifier_ = "";
    public bool HasPIntoIdentifier {
      get { return hasPIntoIdentifier; }
    }
    public string PIntoIdentifier {
      get { return pIntoIdentifier_; }
    }
    
    public const int PKeyFieldNumber = 7;
    private bool hasPKey;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pKey_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPKey {
      get { return hasPKey; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PKey {
      get { return pKey_; }
    }
    
    public const int PProjectionFieldNumber = 8;
    private bool hasPProjection;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pProjection_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPProjection {
      get { return hasPProjection; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PProjection {
      get { return pProjection_; }
    }
    
    public const int PIsGroupJoinFieldNumber = 9;
    private bool hasPIsGroupJoin;
    private bool pIsGroupJoin_ = false;
    public bool HasPIsGroupJoin {
      get { return hasPIsGroupJoin; }
    }
    public bool PIsGroupJoin {
      get { return pIsGroupJoin_; }
    }
    
    public const int POrderingsFieldNumber = 10;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pOrderings_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> POrderingsList {
      get { return pOrderings_; }
    }
    public int POrderingsCount {
      get { return pOrderings_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPOrderings(int index) {
      return pOrderings_[index];
    }
    
    public const int PJoinIdentifierFieldNumber = 11;
    private bool hasPJoinIdentifier;
    private string pJoinIdentifier_ = "";
    public bool HasPJoinIdentifier {
      get { return hasPJoinIdentifier; }
    }
    public string PJoinIdentifier {
      get { return pJoinIdentifier_; }
    }
    
    public const int PPrecedingQueryFieldNumber = 12;
    private bool hasPPrecedingQuery;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pPrecedingQuery_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPPrecedingQuery {
      get { return hasPPrecedingQuery; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PPrecedingQuery {
      get { return pPrecedingQuery_; }
    }
    
    public const int POnExpressionFieldNumber = 13;
    private bool hasPOnExpression;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pOnExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPOnExpression {
      get { return hasPOnExpression; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression POnExpression {
      get { return pOnExpression_; }
    }
    
    public const int PEqualsExpressionFieldNumber = 14;
    private bool hasPEqualsExpression;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pEqualsExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPEqualsExpression {
      get { return hasPEqualsExpression; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PEqualsExpression {
      get { return pEqualsExpression_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKind) return false;
        if (HasPExpression) {
          if (!PExpression.IsInitialized) return false;
        }
        if (HasPCondition) {
          if (!PCondition.IsInitialized) return false;
        }
        if (HasPInExpression) {
          if (!PInExpression.IsInitialized) return false;
        }
        if (HasPKey) {
          if (!PKey.IsInitialized) return false;
        }
        if (HasPProjection) {
          if (!PProjection.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in POrderingsList) {
          if (!element.IsInitialized) return false;
        }
        if (HasPPrecedingQuery) {
          if (!PPrecedingQuery.IsInitialized) return false;
        }
        if (HasPOnExpression) {
          if (!POnExpression.IsInitialized) return false;
        }
        if (HasPEqualsExpression) {
          if (!PEqualsExpression.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasKind) {
        output.WriteEnum(1, (int) Kind);
      }
      if (HasPExpression) {
        output.WriteMessage(2, PExpression);
      }
      if (HasPCondition) {
        output.WriteMessage(3, PCondition);
      }
      if (HasPInExpression) {
        output.WriteMessage(4, PInExpression);
      }
      if (HasPIdentifier) {
        output.WriteString(5, PIdentifier);
      }
      if (HasPIntoIdentifier) {
        output.WriteString(6, PIntoIdentifier);
      }
      if (HasPKey) {
        output.WriteMessage(7, PKey);
      }
      if (HasPProjection) {
        output.WriteMessage(8, PProjection);
      }
      if (HasPIsGroupJoin) {
        output.WriteBool(9, PIsGroupJoin);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in POrderingsList) {
        output.WriteMessage(10, element);
      }
      if (HasPJoinIdentifier) {
        output.WriteString(11, PJoinIdentifier);
      }
      if (HasPPrecedingQuery) {
        output.WriteMessage(12, PPrecedingQuery);
      }
      if (HasPOnExpression) {
        output.WriteMessage(13, POnExpression);
      }
      if (HasPEqualsExpression) {
        output.WriteMessage(14, PEqualsExpression);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasKind) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Kind);
        }
        if (HasPExpression) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, PExpression);
        }
        if (HasPCondition) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, PCondition);
        }
        if (HasPInExpression) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, PInExpression);
        }
        if (HasPIdentifier) {
          size += pb::CodedOutputStream.ComputeStringSize(5, PIdentifier);
        }
        if (HasPIntoIdentifier) {
          size += pb::CodedOutputStream.ComputeStringSize(6, PIntoIdentifier);
        }
        if (HasPKey) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, PKey);
        }
        if (HasPProjection) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, PProjection);
        }
        if (HasPIsGroupJoin) {
          size += pb::CodedOutputStream.ComputeBoolSize(9, PIsGroupJoin);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in POrderingsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, element);
        }
        if (HasPJoinIdentifier) {
          size += pb::CodedOutputStream.ComputeStringSize(11, PJoinIdentifier);
        }
        if (HasPPrecedingQuery) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, PPrecedingQuery);
        }
        if (HasPOnExpression) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, POnExpression);
        }
        if (HasPEqualsExpression) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, PEqualsExpression);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QueryClause ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryClause ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryClause ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryClause ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryClause ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryClause ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QueryClause ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QueryClause ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QueryClause ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryClause ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QueryClause prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<QueryClause, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      QueryClause result = new QueryClause();
      
      protected override QueryClause MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new QueryClause();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Landman.Rascal.CSharp.Profobuf.QueryClause.Descriptor; }
      }
      
      public override QueryClause DefaultInstanceForType {
        get { return global::Landman.Rascal.CSharp.Profobuf.QueryClause.DefaultInstance; }
      }
      
      public override QueryClause BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.pOrderings_.MakeReadOnly();
        QueryClause returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QueryClause) {
          return MergeFrom((QueryClause) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QueryClause other) {
        if (other == global::Landman.Rascal.CSharp.Profobuf.QueryClause.DefaultInstance) return this;
        if (other.HasKind) {
          Kind = other.Kind;
        }
        if (other.HasPExpression) {
          MergePExpression(other.PExpression);
        }
        if (other.HasPCondition) {
          MergePCondition(other.PCondition);
        }
        if (other.HasPInExpression) {
          MergePInExpression(other.PInExpression);
        }
        if (other.HasPIdentifier) {
          PIdentifier = other.PIdentifier;
        }
        if (other.HasPIntoIdentifier) {
          PIntoIdentifier = other.PIntoIdentifier;
        }
        if (other.HasPKey) {
          MergePKey(other.PKey);
        }
        if (other.HasPProjection) {
          MergePProjection(other.PProjection);
        }
        if (other.HasPIsGroupJoin) {
          PIsGroupJoin = other.PIsGroupJoin;
        }
        if (other.pOrderings_.Count != 0) {
          base.AddRange(other.pOrderings_, result.pOrderings_);
        }
        if (other.HasPJoinIdentifier) {
          PJoinIdentifier = other.PJoinIdentifier;
        }
        if (other.HasPPrecedingQuery) {
          MergePPrecedingQuery(other.PPrecedingQuery);
        }
        if (other.HasPOnExpression) {
          MergePOnExpression(other.POnExpression);
        }
        if (other.HasPEqualsExpression) {
          MergePEqualsExpression(other.PEqualsExpression);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.QueryClause.Types.QueryClauseKind), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong) rawValue);
              } else {
                Kind = (global::Landman.Rascal.CSharp.Profobuf.QueryClause.Types.QueryClauseKind) rawValue;
              }
              break;
            }
            case 18: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPExpression) {
                subBuilder.MergeFrom(PExpression);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PExpression = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPCondition) {
                subBuilder.MergeFrom(PCondition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PCondition = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPInExpression) {
                subBuilder.MergeFrom(PInExpression);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PInExpression = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              PIdentifier = input.ReadString();
              break;
            }
            case 50: {
              PIntoIdentifier = input.ReadString();
              break;
            }
            case 58: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPKey) {
                subBuilder.MergeFrom(PKey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PKey = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPProjection) {
                subBuilder.MergeFrom(PProjection);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PProjection = subBuilder.BuildPartial();
              break;
            }
            case 72: {
              PIsGroupJoin = input.ReadBool();
              break;
            }
            case 82: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPOrderings(subBuilder.BuildPartial());
              break;
            }
            case 90: {
              PJoinIdentifier = input.ReadString();
              break;
            }
            case 98: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPPrecedingQuery) {
                subBuilder.MergeFrom(PPrecedingQuery);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PPrecedingQuery = subBuilder.BuildPartial();
              break;
            }
            case 106: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPOnExpression) {
                subBuilder.MergeFrom(POnExpression);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              POnExpression = subBuilder.BuildPartial();
              break;
            }
            case 114: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPEqualsExpression) {
                subBuilder.MergeFrom(PEqualsExpression);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PEqualsExpression = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasKind {
       get { return result.HasKind; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.QueryClause.Types.QueryClauseKind Kind {
        get { return result.Kind; }
        set { SetKind(value); }
      }
      public Builder SetKind(global::Landman.Rascal.CSharp.Profobuf.QueryClause.Types.QueryClauseKind value) {
        result.hasKind = true;
        result.kind_ = value;
        return this;
      }
      public Builder ClearKind() {
        result.hasKind = false;
        result.kind_ = global::Landman.Rascal.CSharp.Profobuf.QueryClause.Types.QueryClauseKind.k_queryContinuationClause;
        return this;
      }
      
      public bool HasPExpression {
       get { return result.HasPExpression; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PExpression {
        get { return result.PExpression; }
        set { SetPExpression(value); }
      }
      public Builder SetPExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPExpression = true;
        result.pExpression_ = value;
        return this;
      }
      public Builder SetPExpression(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPExpression = true;
        result.pExpression_ = builderForValue.Build();
        return this;
      }
      public Builder MergePExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPExpression &&
            result.pExpression_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pExpression_).MergeFrom(value).BuildPartial();
        } else {
          result.pExpression_ = value;
        }
        result.hasPExpression = true;
        return this;
      }
      public Builder ClearPExpression() {
        result.hasPExpression = false;
        result.pExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public bool HasPCondition {
       get { return result.HasPCondition; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PCondition {
        get { return result.PCondition; }
        set { SetPCondition(value); }
      }
      public Builder SetPCondition(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPCondition = true;
        result.pCondition_ = value;
        return this;
      }
      public Builder SetPCondition(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPCondition = true;
        result.pCondition_ = builderForValue.Build();
        return this;
      }
      public Builder MergePCondition(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPCondition &&
            result.pCondition_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pCondition_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pCondition_).MergeFrom(value).BuildPartial();
        } else {
          result.pCondition_ = value;
        }
        result.hasPCondition = true;
        return this;
      }
      public Builder ClearPCondition() {
        result.hasPCondition = false;
        result.pCondition_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public bool HasPInExpression {
       get { return result.HasPInExpression; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PInExpression {
        get { return result.PInExpression; }
        set { SetPInExpression(value); }
      }
      public Builder SetPInExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPInExpression = true;
        result.pInExpression_ = value;
        return this;
      }
      public Builder SetPInExpression(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPInExpression = true;
        result.pInExpression_ = builderForValue.Build();
        return this;
      }
      public Builder MergePInExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPInExpression &&
            result.pInExpression_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pInExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pInExpression_).MergeFrom(value).BuildPartial();
        } else {
          result.pInExpression_ = value;
        }
        result.hasPInExpression = true;
        return this;
      }
      public Builder ClearPInExpression() {
        result.hasPInExpression = false;
        result.pInExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public bool HasPIdentifier {
        get { return result.HasPIdentifier; }
      }
      public string PIdentifier {
        get { return result.PIdentifier; }
        set { SetPIdentifier(value); }
      }
      public Builder SetPIdentifier(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPIdentifier = true;
        result.pIdentifier_ = value;
        return this;
      }
      public Builder ClearPIdentifier() {
        result.hasPIdentifier = false;
        result.pIdentifier_ = "";
        return this;
      }
      
      public bool HasPIntoIdentifier {
        get { return result.HasPIntoIdentifier; }
      }
      public string PIntoIdentifier {
        get { return result.PIntoIdentifier; }
        set { SetPIntoIdentifier(value); }
      }
      public Builder SetPIntoIdentifier(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPIntoIdentifier = true;
        result.pIntoIdentifier_ = value;
        return this;
      }
      public Builder ClearPIntoIdentifier() {
        result.hasPIntoIdentifier = false;
        result.pIntoIdentifier_ = "";
        return this;
      }
      
      public bool HasPKey {
       get { return result.HasPKey; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PKey {
        get { return result.PKey; }
        set { SetPKey(value); }
      }
      public Builder SetPKey(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPKey = true;
        result.pKey_ = value;
        return this;
      }
      public Builder SetPKey(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPKey = true;
        result.pKey_ = builderForValue.Build();
        return this;
      }
      public Builder MergePKey(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPKey &&
            result.pKey_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pKey_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pKey_).MergeFrom(value).BuildPartial();
        } else {
          result.pKey_ = value;
        }
        result.hasPKey = true;
        return this;
      }
      public Builder ClearPKey() {
        result.hasPKey = false;
        result.pKey_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public bool HasPProjection {
       get { return result.HasPProjection; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PProjection {
        get { return result.PProjection; }
        set { SetPProjection(value); }
      }
      public Builder SetPProjection(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPProjection = true;
        result.pProjection_ = value;
        return this;
      }
      public Builder SetPProjection(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPProjection = true;
        result.pProjection_ = builderForValue.Build();
        return this;
      }
      public Builder MergePProjection(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPProjection &&
            result.pProjection_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pProjection_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pProjection_).MergeFrom(value).BuildPartial();
        } else {
          result.pProjection_ = value;
        }
        result.hasPProjection = true;
        return this;
      }
      public Builder ClearPProjection() {
        result.hasPProjection = false;
        result.pProjection_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public bool HasPIsGroupJoin {
        get { return result.HasPIsGroupJoin; }
      }
      public bool PIsGroupJoin {
        get { return result.PIsGroupJoin; }
        set { SetPIsGroupJoin(value); }
      }
      public Builder SetPIsGroupJoin(bool value) {
        result.hasPIsGroupJoin = true;
        result.pIsGroupJoin_ = value;
        return this;
      }
      public Builder ClearPIsGroupJoin() {
        result.hasPIsGroupJoin = false;
        result.pIsGroupJoin_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> POrderingsList {
        get { return result.pOrderings_; }
      }
      public int POrderingsCount {
        get { return result.POrderingsCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPOrderings(int index) {
        return result.GetPOrderings(index);
      }
      public Builder SetPOrderings(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pOrderings_[index] = value;
        return this;
      }
      public Builder SetPOrderings(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pOrderings_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPOrderings(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pOrderings_.Add(value);
        return this;
      }
      public Builder AddPOrderings(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pOrderings_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePOrderings(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pOrderings_);
        return this;
      }
      public Builder ClearPOrderings() {
        result.pOrderings_.Clear();
        return this;
      }
      
      public bool HasPJoinIdentifier {
        get { return result.HasPJoinIdentifier; }
      }
      public string PJoinIdentifier {
        get { return result.PJoinIdentifier; }
        set { SetPJoinIdentifier(value); }
      }
      public Builder SetPJoinIdentifier(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPJoinIdentifier = true;
        result.pJoinIdentifier_ = value;
        return this;
      }
      public Builder ClearPJoinIdentifier() {
        result.hasPJoinIdentifier = false;
        result.pJoinIdentifier_ = "";
        return this;
      }
      
      public bool HasPPrecedingQuery {
       get { return result.HasPPrecedingQuery; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PPrecedingQuery {
        get { return result.PPrecedingQuery; }
        set { SetPPrecedingQuery(value); }
      }
      public Builder SetPPrecedingQuery(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPPrecedingQuery = true;
        result.pPrecedingQuery_ = value;
        return this;
      }
      public Builder SetPPrecedingQuery(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPPrecedingQuery = true;
        result.pPrecedingQuery_ = builderForValue.Build();
        return this;
      }
      public Builder MergePPrecedingQuery(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPPrecedingQuery &&
            result.pPrecedingQuery_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pPrecedingQuery_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pPrecedingQuery_).MergeFrom(value).BuildPartial();
        } else {
          result.pPrecedingQuery_ = value;
        }
        result.hasPPrecedingQuery = true;
        return this;
      }
      public Builder ClearPPrecedingQuery() {
        result.hasPPrecedingQuery = false;
        result.pPrecedingQuery_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public bool HasPOnExpression {
       get { return result.HasPOnExpression; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression POnExpression {
        get { return result.POnExpression; }
        set { SetPOnExpression(value); }
      }
      public Builder SetPOnExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPOnExpression = true;
        result.pOnExpression_ = value;
        return this;
      }
      public Builder SetPOnExpression(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPOnExpression = true;
        result.pOnExpression_ = builderForValue.Build();
        return this;
      }
      public Builder MergePOnExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPOnExpression &&
            result.pOnExpression_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pOnExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pOnExpression_).MergeFrom(value).BuildPartial();
        } else {
          result.pOnExpression_ = value;
        }
        result.hasPOnExpression = true;
        return this;
      }
      public Builder ClearPOnExpression() {
        result.hasPOnExpression = false;
        result.pOnExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public bool HasPEqualsExpression {
       get { return result.HasPEqualsExpression; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PEqualsExpression {
        get { return result.PEqualsExpression; }
        set { SetPEqualsExpression(value); }
      }
      public Builder SetPEqualsExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPEqualsExpression = true;
        result.pEqualsExpression_ = value;
        return this;
      }
      public Builder SetPEqualsExpression(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPEqualsExpression = true;
        result.pEqualsExpression_ = builderForValue.Build();
        return this;
      }
      public Builder MergePEqualsExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPEqualsExpression &&
            result.pEqualsExpression_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pEqualsExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pEqualsExpression_).MergeFrom(value).BuildPartial();
        } else {
          result.pEqualsExpression_ = value;
        }
        result.hasPEqualsExpression = true;
        return this;
      }
      public Builder ClearPEqualsExpression() {
        result.hasPEqualsExpression = false;
        result.pEqualsExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
    }
    static QueryClause() {
      object.ReferenceEquals(global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.Descriptor, null);
    }
  }
  
  public sealed partial class Expression : pb::GeneratedMessage<Expression, Expression.Builder> {
    private static readonly Expression defaultInstance = new Builder().BuildPartial();
    public static Expression DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Expression DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Expression ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.internal__static_Landman_Rascal_CSharp_Profobuf_Expression__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Expression, Expression.Builder> InternalFieldAccessors {
      get { return global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.internal__static_Landman_Rascal_CSharp_Profobuf_Expression__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum ExpressionKind {
        k_lambdaExpression = 0,
        k_conditionalExpression = 1,
        k_binaryOperatorExpression = 2,
        k_directionExpression = 3,
        k_castExpression = 4,
        k_indexerExpression = 5,
        k_parenthesizedExpression = 6,
        k_baseReferenceExpression = 7,
        k_sizeOfExpression = 8,
        k_arrayCreateExpression = 9,
        k_unaryOperatorExpression = 10,
        k_asExpression = 11,
        k_typeReferenceExpression = 12,
        k_typeOfExpression = 13,
        k_defaultValueExpression = 14,
        k_anonymousMethodExpression = 15,
        k_uncheckedExpression = 16,
        k_isExpression = 17,
        k_identifierExpression = 18,
        k_checkedExpression = 19,
        k_primitiveExpression = 20,
        k_expressionPlaceholder = 21,
        k_objectCreateExpression = 22,
        k_namedArgumentExpression = 23,
        k_argListExpression = 24,
        k_memberReferenceExpression = 25,
        k_invocationExpression = 26,
        k_pointerReferenceExpression = 27,
        k_assignmentExpression = 28,
        k_thisReferenceExpression = 29,
        k_stackAllocExpression = 30,
        k_arrayInitializerExpression = 31,
        k_queryExpression = 32,
      }
      
    }
    #endregion
    
    public const int KindFieldNumber = 1;
    private bool hasKind;
    private global::Landman.Rascal.CSharp.Profobuf.Expression.Types.ExpressionKind kind_ = global::Landman.Rascal.CSharp.Profobuf.Expression.Types.ExpressionKind.k_lambdaExpression;
    public bool HasKind {
      get { return hasKind; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression.Types.ExpressionKind Kind {
      get { return kind_; }
    }
    
    public const int PElementsFieldNumber = 2;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Expression> pElements_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Expression>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.Expression> PElementsList {
      get { return pElements_; }
    }
    public int PElementsCount {
      get { return pElements_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression GetPElements(int index) {
      return pElements_[index];
    }
    
    public const int PExpressionFieldNumber = 3;
    private bool hasPExpression;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPExpression {
      get { return hasPExpression; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PExpression {
      get { return pExpression_; }
    }
    
    public const int PValueFieldNumber = 4;
    private bool hasPValue;
    private string pValue_ = "";
    public bool HasPValue {
      get { return hasPValue; }
    }
    public string PValue {
      get { return pValue_; }
    }
    
    public const int PArgumentsFieldNumber = 5;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Expression> pArguments_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Expression>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.Expression> PArgumentsList {
      get { return pArguments_; }
    }
    public int PArgumentsCount {
      get { return pArguments_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression GetPArguments(int index) {
      return pArguments_[index];
    }
    
    public const int POperatorFieldNumber = 6;
    private bool hasPOperator;
    private global::Landman.Rascal.CSharp.Profobuf.BinaryOperator pOperator_ = global::Landman.Rascal.CSharp.Profobuf.BinaryOperator.e_conditionalOr;
    public bool HasPOperator {
      get { return hasPOperator; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.BinaryOperator POperator {
      get { return pOperator_; }
    }
    
    public const int PConditionFieldNumber = 7;
    private bool hasPCondition;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pCondition_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPCondition {
      get { return hasPCondition; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PCondition {
      get { return pCondition_; }
    }
    
    public const int PFalseExpressionFieldNumber = 8;
    private bool hasPFalseExpression;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pFalseExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPFalseExpression {
      get { return hasPFalseExpression; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PFalseExpression {
      get { return pFalseExpression_; }
    }
    
    public const int PRightFieldNumber = 9;
    private bool hasPRight;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pRight_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPRight {
      get { return hasPRight; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PRight {
      get { return pRight_; }
    }
    
    public const int PClausesFieldNumber = 10;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.QueryClause> pClauses_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.QueryClause>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.QueryClause> PClausesList {
      get { return pClauses_; }
    }
    public int PClausesCount {
      get { return pClauses_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.QueryClause GetPClauses(int index) {
      return pClauses_[index];
    }
    
    public const int POperatorUFieldNumber = 11;
    private bool hasPOperatorU;
    private global::Landman.Rascal.CSharp.Profobuf.UnaryOperator pOperatorU_ = global::Landman.Rascal.CSharp.Profobuf.UnaryOperator.e_bitNot;
    public bool HasPOperatorU {
      get { return hasPOperatorU; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.UnaryOperator POperatorU {
      get { return pOperatorU_; }
    }
    
    public const int PTargetFieldNumber = 12;
    private bool hasPTarget;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pTarget_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPTarget {
      get { return hasPTarget; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PTarget {
      get { return pTarget_; }
    }
    
    public const int PTypeArgumentsFieldNumber = 13;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstType> pTypeArguments_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstType>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstType> PTypeArgumentsList {
      get { return pTypeArguments_; }
    }
    public int PTypeArgumentsCount {
      get { return pTypeArguments_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstType GetPTypeArguments(int index) {
      return pTypeArguments_[index];
    }
    
    public const int POperatorAFieldNumber = 14;
    private bool hasPOperatorA;
    private global::Landman.Rascal.CSharp.Profobuf.AssignmentOperator pOperatorA_ = global::Landman.Rascal.CSharp.Profobuf.AssignmentOperator.e_assignmentOperatorShiftLeft;
    public bool HasPOperatorA {
      get { return hasPOperatorA; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AssignmentOperator POperatorA {
      get { return pOperatorA_; }
    }
    
    public const int PAdditionalArraySpecifiersFieldNumber = 15;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pAdditionalArraySpecifiers_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PAdditionalArraySpecifiersList {
      get { return pAdditionalArraySpecifiers_; }
    }
    public int PAdditionalArraySpecifiersCount {
      get { return pAdditionalArraySpecifiers_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPAdditionalArraySpecifiers(int index) {
      return pAdditionalArraySpecifiers_[index];
    }
    
    public const int PBodyFieldNumber = 16;
    private bool hasPBody;
    private global::Landman.Rascal.CSharp.Profobuf.AstNode pBody_ = global::Landman.Rascal.CSharp.Profobuf.AstNode.DefaultInstance;
    public bool HasPBody {
      get { return hasPBody; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode PBody {
      get { return pBody_; }
    }
    
    public const int PIdentifierFieldNumber = 17;
    private bool hasPIdentifier;
    private string pIdentifier_ = "";
    public bool HasPIdentifier {
      get { return hasPIdentifier; }
    }
    public string PIdentifier {
      get { return pIdentifier_; }
    }
    
    public const int PBodySFieldNumber = 18;
    private bool hasPBodyS;
    private global::Landman.Rascal.CSharp.Profobuf.Statement pBodyS_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
    public bool HasPBodyS {
      get { return hasPBodyS; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Statement PBodyS {
      get { return pBodyS_; }
    }
    
    public const int PIsAccessFieldNumber = 19;
    private bool hasPIsAccess;
    private bool pIsAccess_ = false;
    public bool HasPIsAccess {
      get { return hasPIsAccess; }
    }
    public bool PIsAccess {
      get { return pIsAccess_; }
    }
    
    public const int PInitializerFieldNumber = 20;
    private bool hasPInitializer;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pInitializer_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPInitializer {
      get { return hasPInitializer; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PInitializer {
      get { return pInitializer_; }
    }
    
    public const int PMemberNameFieldNumber = 21;
    private bool hasPMemberName;
    private string pMemberName_ = "";
    public bool HasPMemberName {
      get { return hasPMemberName; }
    }
    public string PMemberName {
      get { return pMemberName_; }
    }
    
    public const int PFieldDirectionFieldNumber = 22;
    private bool hasPFieldDirection;
    private global::Landman.Rascal.CSharp.Profobuf.FieldDirection pFieldDirection_ = global::Landman.Rascal.CSharp.Profobuf.FieldDirection.e_fieldDirectionNone;
    public bool HasPFieldDirection {
      get { return hasPFieldDirection; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.FieldDirection PFieldDirection {
      get { return pFieldDirection_; }
    }
    
    public const int PHasParameterListFieldNumber = 23;
    private bool hasPHasParameterList;
    private bool pHasParameterList_ = false;
    public bool HasPHasParameterList {
      get { return hasPHasParameterList; }
    }
    public bool PHasParameterList {
      get { return pHasParameterList_; }
    }
    
    public const int PParametersFieldNumber = 24;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pParameters_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PParametersList {
      get { return pParameters_; }
    }
    public int PParametersCount {
      get { return pParameters_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPParameters(int index) {
      return pParameters_[index];
    }
    
    public const int PTrueExpressionFieldNumber = 25;
    private bool hasPTrueExpression;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pTrueExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPTrueExpression {
      get { return hasPTrueExpression; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PTrueExpression {
      get { return pTrueExpression_; }
    }
    
    public const int PLeftFieldNumber = 26;
    private bool hasPLeft;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pLeft_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPLeft {
      get { return hasPLeft; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PLeft {
      get { return pLeft_; }
    }
    
    public const int PCountExpressionFieldNumber = 27;
    private bool hasPCountExpression;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pCountExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPCountExpression {
      get { return hasPCountExpression; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PCountExpression {
      get { return pCountExpression_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKind) return false;
        foreach (global::Landman.Rascal.CSharp.Profobuf.Expression element in PElementsList) {
          if (!element.IsInitialized) return false;
        }
        if (HasPExpression) {
          if (!PExpression.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.Expression element in PArgumentsList) {
          if (!element.IsInitialized) return false;
        }
        if (HasPCondition) {
          if (!PCondition.IsInitialized) return false;
        }
        if (HasPFalseExpression) {
          if (!PFalseExpression.IsInitialized) return false;
        }
        if (HasPRight) {
          if (!PRight.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.QueryClause element in PClausesList) {
          if (!element.IsInitialized) return false;
        }
        if (HasPTarget) {
          if (!PTarget.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstType element in PTypeArgumentsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PAdditionalArraySpecifiersList) {
          if (!element.IsInitialized) return false;
        }
        if (HasPBody) {
          if (!PBody.IsInitialized) return false;
        }
        if (HasPBodyS) {
          if (!PBodyS.IsInitialized) return false;
        }
        if (HasPInitializer) {
          if (!PInitializer.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PParametersList) {
          if (!element.IsInitialized) return false;
        }
        if (HasPTrueExpression) {
          if (!PTrueExpression.IsInitialized) return false;
        }
        if (HasPLeft) {
          if (!PLeft.IsInitialized) return false;
        }
        if (HasPCountExpression) {
          if (!PCountExpression.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasKind) {
        output.WriteEnum(1, (int) Kind);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.Expression element in PElementsList) {
        output.WriteMessage(2, element);
      }
      if (HasPExpression) {
        output.WriteMessage(3, PExpression);
      }
      if (HasPValue) {
        output.WriteString(4, PValue);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.Expression element in PArgumentsList) {
        output.WriteMessage(5, element);
      }
      if (HasPOperator) {
        output.WriteEnum(6, (int) POperator);
      }
      if (HasPCondition) {
        output.WriteMessage(7, PCondition);
      }
      if (HasPFalseExpression) {
        output.WriteMessage(8, PFalseExpression);
      }
      if (HasPRight) {
        output.WriteMessage(9, PRight);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.QueryClause element in PClausesList) {
        output.WriteMessage(10, element);
      }
      if (HasPOperatorU) {
        output.WriteEnum(11, (int) POperatorU);
      }
      if (HasPTarget) {
        output.WriteMessage(12, PTarget);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstType element in PTypeArgumentsList) {
        output.WriteMessage(13, element);
      }
      if (HasPOperatorA) {
        output.WriteEnum(14, (int) POperatorA);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PAdditionalArraySpecifiersList) {
        output.WriteMessage(15, element);
      }
      if (HasPBody) {
        output.WriteMessage(16, PBody);
      }
      if (HasPIdentifier) {
        output.WriteString(17, PIdentifier);
      }
      if (HasPBodyS) {
        output.WriteMessage(18, PBodyS);
      }
      if (HasPIsAccess) {
        output.WriteBool(19, PIsAccess);
      }
      if (HasPInitializer) {
        output.WriteMessage(20, PInitializer);
      }
      if (HasPMemberName) {
        output.WriteString(21, PMemberName);
      }
      if (HasPFieldDirection) {
        output.WriteEnum(22, (int) PFieldDirection);
      }
      if (HasPHasParameterList) {
        output.WriteBool(23, PHasParameterList);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PParametersList) {
        output.WriteMessage(24, element);
      }
      if (HasPTrueExpression) {
        output.WriteMessage(25, PTrueExpression);
      }
      if (HasPLeft) {
        output.WriteMessage(26, PLeft);
      }
      if (HasPCountExpression) {
        output.WriteMessage(27, PCountExpression);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasKind) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Kind);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.Expression element in PElementsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (HasPExpression) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, PExpression);
        }
        if (HasPValue) {
          size += pb::CodedOutputStream.ComputeStringSize(4, PValue);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.Expression element in PArgumentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        if (HasPOperator) {
          size += pb::CodedOutputStream.ComputeEnumSize(6, (int) POperator);
        }
        if (HasPCondition) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, PCondition);
        }
        if (HasPFalseExpression) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, PFalseExpression);
        }
        if (HasPRight) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, PRight);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.QueryClause element in PClausesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, element);
        }
        if (HasPOperatorU) {
          size += pb::CodedOutputStream.ComputeEnumSize(11, (int) POperatorU);
        }
        if (HasPTarget) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, PTarget);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstType element in PTypeArgumentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, element);
        }
        if (HasPOperatorA) {
          size += pb::CodedOutputStream.ComputeEnumSize(14, (int) POperatorA);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PAdditionalArraySpecifiersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(15, element);
        }
        if (HasPBody) {
          size += pb::CodedOutputStream.ComputeMessageSize(16, PBody);
        }
        if (HasPIdentifier) {
          size += pb::CodedOutputStream.ComputeStringSize(17, PIdentifier);
        }
        if (HasPBodyS) {
          size += pb::CodedOutputStream.ComputeMessageSize(18, PBodyS);
        }
        if (HasPIsAccess) {
          size += pb::CodedOutputStream.ComputeBoolSize(19, PIsAccess);
        }
        if (HasPInitializer) {
          size += pb::CodedOutputStream.ComputeMessageSize(20, PInitializer);
        }
        if (HasPMemberName) {
          size += pb::CodedOutputStream.ComputeStringSize(21, PMemberName);
        }
        if (HasPFieldDirection) {
          size += pb::CodedOutputStream.ComputeEnumSize(22, (int) PFieldDirection);
        }
        if (HasPHasParameterList) {
          size += pb::CodedOutputStream.ComputeBoolSize(23, PHasParameterList);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PParametersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(24, element);
        }
        if (HasPTrueExpression) {
          size += pb::CodedOutputStream.ComputeMessageSize(25, PTrueExpression);
        }
        if (HasPLeft) {
          size += pb::CodedOutputStream.ComputeMessageSize(26, PLeft);
        }
        if (HasPCountExpression) {
          size += pb::CodedOutputStream.ComputeMessageSize(27, PCountExpression);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Expression ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Expression ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Expression ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Expression ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Expression ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Expression ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Expression ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Expression ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Expression ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Expression ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Expression prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Expression, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Expression result = new Expression();
      
      protected override Expression MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Expression();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Landman.Rascal.CSharp.Profobuf.Expression.Descriptor; }
      }
      
      public override Expression DefaultInstanceForType {
        get { return global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance; }
      }
      
      public override Expression BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.pElements_.MakeReadOnly();
        result.pArguments_.MakeReadOnly();
        result.pClauses_.MakeReadOnly();
        result.pTypeArguments_.MakeReadOnly();
        result.pAdditionalArraySpecifiers_.MakeReadOnly();
        result.pParameters_.MakeReadOnly();
        Expression returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Expression) {
          return MergeFrom((Expression) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Expression other) {
        if (other == global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) return this;
        if (other.HasKind) {
          Kind = other.Kind;
        }
        if (other.pElements_.Count != 0) {
          base.AddRange(other.pElements_, result.pElements_);
        }
        if (other.HasPExpression) {
          MergePExpression(other.PExpression);
        }
        if (other.HasPValue) {
          PValue = other.PValue;
        }
        if (other.pArguments_.Count != 0) {
          base.AddRange(other.pArguments_, result.pArguments_);
        }
        if (other.HasPOperator) {
          POperator = other.POperator;
        }
        if (other.HasPCondition) {
          MergePCondition(other.PCondition);
        }
        if (other.HasPFalseExpression) {
          MergePFalseExpression(other.PFalseExpression);
        }
        if (other.HasPRight) {
          MergePRight(other.PRight);
        }
        if (other.pClauses_.Count != 0) {
          base.AddRange(other.pClauses_, result.pClauses_);
        }
        if (other.HasPOperatorU) {
          POperatorU = other.POperatorU;
        }
        if (other.HasPTarget) {
          MergePTarget(other.PTarget);
        }
        if (other.pTypeArguments_.Count != 0) {
          base.AddRange(other.pTypeArguments_, result.pTypeArguments_);
        }
        if (other.HasPOperatorA) {
          POperatorA = other.POperatorA;
        }
        if (other.pAdditionalArraySpecifiers_.Count != 0) {
          base.AddRange(other.pAdditionalArraySpecifiers_, result.pAdditionalArraySpecifiers_);
        }
        if (other.HasPBody) {
          MergePBody(other.PBody);
        }
        if (other.HasPIdentifier) {
          PIdentifier = other.PIdentifier;
        }
        if (other.HasPBodyS) {
          MergePBodyS(other.PBodyS);
        }
        if (other.HasPIsAccess) {
          PIsAccess = other.PIsAccess;
        }
        if (other.HasPInitializer) {
          MergePInitializer(other.PInitializer);
        }
        if (other.HasPMemberName) {
          PMemberName = other.PMemberName;
        }
        if (other.HasPFieldDirection) {
          PFieldDirection = other.PFieldDirection;
        }
        if (other.HasPHasParameterList) {
          PHasParameterList = other.PHasParameterList;
        }
        if (other.pParameters_.Count != 0) {
          base.AddRange(other.pParameters_, result.pParameters_);
        }
        if (other.HasPTrueExpression) {
          MergePTrueExpression(other.PTrueExpression);
        }
        if (other.HasPLeft) {
          MergePLeft(other.PLeft);
        }
        if (other.HasPCountExpression) {
          MergePCountExpression(other.PCountExpression);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.Expression.Types.ExpressionKind), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong) rawValue);
              } else {
                Kind = (global::Landman.Rascal.CSharp.Profobuf.Expression.Types.ExpressionKind) rawValue;
              }
              break;
            }
            case 18: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPElements(subBuilder.BuildPartial());
              break;
            }
            case 26: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPExpression) {
                subBuilder.MergeFrom(PExpression);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PExpression = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              PValue = input.ReadString();
              break;
            }
            case 42: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPArguments(subBuilder.BuildPartial());
              break;
            }
            case 48: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.BinaryOperator), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(6, (ulong) rawValue);
              } else {
                POperator = (global::Landman.Rascal.CSharp.Profobuf.BinaryOperator) rawValue;
              }
              break;
            }
            case 58: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPCondition) {
                subBuilder.MergeFrom(PCondition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PCondition = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPFalseExpression) {
                subBuilder.MergeFrom(PFalseExpression);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PFalseExpression = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPRight) {
                subBuilder.MergeFrom(PRight);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PRight = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::Landman.Rascal.CSharp.Profobuf.QueryClause.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.QueryClause.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPClauses(subBuilder.BuildPartial());
              break;
            }
            case 88: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.UnaryOperator), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(11, (ulong) rawValue);
              } else {
                POperatorU = (global::Landman.Rascal.CSharp.Profobuf.UnaryOperator) rawValue;
              }
              break;
            }
            case 98: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPTarget) {
                subBuilder.MergeFrom(PTarget);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PTarget = subBuilder.BuildPartial();
              break;
            }
            case 106: {
              global::Landman.Rascal.CSharp.Profobuf.AstType.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstType.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPTypeArguments(subBuilder.BuildPartial());
              break;
            }
            case 112: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.AssignmentOperator), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(14, (ulong) rawValue);
              } else {
                POperatorA = (global::Landman.Rascal.CSharp.Profobuf.AssignmentOperator) rawValue;
              }
              break;
            }
            case 122: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPAdditionalArraySpecifiers(subBuilder.BuildPartial());
              break;
            }
            case 130: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              if (HasPBody) {
                subBuilder.MergeFrom(PBody);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PBody = subBuilder.BuildPartial();
              break;
            }
            case 138: {
              PIdentifier = input.ReadString();
              break;
            }
            case 146: {
              global::Landman.Rascal.CSharp.Profobuf.Statement.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder();
              if (HasPBodyS) {
                subBuilder.MergeFrom(PBodyS);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PBodyS = subBuilder.BuildPartial();
              break;
            }
            case 152: {
              PIsAccess = input.ReadBool();
              break;
            }
            case 162: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPInitializer) {
                subBuilder.MergeFrom(PInitializer);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PInitializer = subBuilder.BuildPartial();
              break;
            }
            case 170: {
              PMemberName = input.ReadString();
              break;
            }
            case 176: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.FieldDirection), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(22, (ulong) rawValue);
              } else {
                PFieldDirection = (global::Landman.Rascal.CSharp.Profobuf.FieldDirection) rawValue;
              }
              break;
            }
            case 184: {
              PHasParameterList = input.ReadBool();
              break;
            }
            case 194: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPParameters(subBuilder.BuildPartial());
              break;
            }
            case 202: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPTrueExpression) {
                subBuilder.MergeFrom(PTrueExpression);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PTrueExpression = subBuilder.BuildPartial();
              break;
            }
            case 210: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPLeft) {
                subBuilder.MergeFrom(PLeft);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PLeft = subBuilder.BuildPartial();
              break;
            }
            case 218: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPCountExpression) {
                subBuilder.MergeFrom(PCountExpression);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PCountExpression = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasKind {
       get { return result.HasKind; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression.Types.ExpressionKind Kind {
        get { return result.Kind; }
        set { SetKind(value); }
      }
      public Builder SetKind(global::Landman.Rascal.CSharp.Profobuf.Expression.Types.ExpressionKind value) {
        result.hasKind = true;
        result.kind_ = value;
        return this;
      }
      public Builder ClearKind() {
        result.hasKind = false;
        result.kind_ = global::Landman.Rascal.CSharp.Profobuf.Expression.Types.ExpressionKind.k_lambdaExpression;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.Expression> PElementsList {
        get { return result.pElements_; }
      }
      public int PElementsCount {
        get { return result.PElementsCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression GetPElements(int index) {
        return result.GetPElements(index);
      }
      public Builder SetPElements(int index, global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pElements_[index] = value;
        return this;
      }
      public Builder SetPElements(int index, global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pElements_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPElements(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pElements_.Add(value);
        return this;
      }
      public Builder AddPElements(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pElements_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePElements(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.Expression> values) {
        base.AddRange(values, result.pElements_);
        return this;
      }
      public Builder ClearPElements() {
        result.pElements_.Clear();
        return this;
      }
      
      public bool HasPExpression {
       get { return result.HasPExpression; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PExpression {
        get { return result.PExpression; }
        set { SetPExpression(value); }
      }
      public Builder SetPExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPExpression = true;
        result.pExpression_ = value;
        return this;
      }
      public Builder SetPExpression(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPExpression = true;
        result.pExpression_ = builderForValue.Build();
        return this;
      }
      public Builder MergePExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPExpression &&
            result.pExpression_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pExpression_).MergeFrom(value).BuildPartial();
        } else {
          result.pExpression_ = value;
        }
        result.hasPExpression = true;
        return this;
      }
      public Builder ClearPExpression() {
        result.hasPExpression = false;
        result.pExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public bool HasPValue {
        get { return result.HasPValue; }
      }
      public string PValue {
        get { return result.PValue; }
        set { SetPValue(value); }
      }
      public Builder SetPValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPValue = true;
        result.pValue_ = value;
        return this;
      }
      public Builder ClearPValue() {
        result.hasPValue = false;
        result.pValue_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.Expression> PArgumentsList {
        get { return result.pArguments_; }
      }
      public int PArgumentsCount {
        get { return result.PArgumentsCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression GetPArguments(int index) {
        return result.GetPArguments(index);
      }
      public Builder SetPArguments(int index, global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pArguments_[index] = value;
        return this;
      }
      public Builder SetPArguments(int index, global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pArguments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPArguments(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pArguments_.Add(value);
        return this;
      }
      public Builder AddPArguments(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pArguments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePArguments(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.Expression> values) {
        base.AddRange(values, result.pArguments_);
        return this;
      }
      public Builder ClearPArguments() {
        result.pArguments_.Clear();
        return this;
      }
      
      public bool HasPOperator {
       get { return result.HasPOperator; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.BinaryOperator POperator {
        get { return result.POperator; }
        set { SetPOperator(value); }
      }
      public Builder SetPOperator(global::Landman.Rascal.CSharp.Profobuf.BinaryOperator value) {
        result.hasPOperator = true;
        result.pOperator_ = value;
        return this;
      }
      public Builder ClearPOperator() {
        result.hasPOperator = false;
        result.pOperator_ = global::Landman.Rascal.CSharp.Profobuf.BinaryOperator.e_conditionalOr;
        return this;
      }
      
      public bool HasPCondition {
       get { return result.HasPCondition; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PCondition {
        get { return result.PCondition; }
        set { SetPCondition(value); }
      }
      public Builder SetPCondition(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPCondition = true;
        result.pCondition_ = value;
        return this;
      }
      public Builder SetPCondition(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPCondition = true;
        result.pCondition_ = builderForValue.Build();
        return this;
      }
      public Builder MergePCondition(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPCondition &&
            result.pCondition_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pCondition_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pCondition_).MergeFrom(value).BuildPartial();
        } else {
          result.pCondition_ = value;
        }
        result.hasPCondition = true;
        return this;
      }
      public Builder ClearPCondition() {
        result.hasPCondition = false;
        result.pCondition_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public bool HasPFalseExpression {
       get { return result.HasPFalseExpression; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PFalseExpression {
        get { return result.PFalseExpression; }
        set { SetPFalseExpression(value); }
      }
      public Builder SetPFalseExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPFalseExpression = true;
        result.pFalseExpression_ = value;
        return this;
      }
      public Builder SetPFalseExpression(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPFalseExpression = true;
        result.pFalseExpression_ = builderForValue.Build();
        return this;
      }
      public Builder MergePFalseExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPFalseExpression &&
            result.pFalseExpression_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pFalseExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pFalseExpression_).MergeFrom(value).BuildPartial();
        } else {
          result.pFalseExpression_ = value;
        }
        result.hasPFalseExpression = true;
        return this;
      }
      public Builder ClearPFalseExpression() {
        result.hasPFalseExpression = false;
        result.pFalseExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public bool HasPRight {
       get { return result.HasPRight; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PRight {
        get { return result.PRight; }
        set { SetPRight(value); }
      }
      public Builder SetPRight(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPRight = true;
        result.pRight_ = value;
        return this;
      }
      public Builder SetPRight(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPRight = true;
        result.pRight_ = builderForValue.Build();
        return this;
      }
      public Builder MergePRight(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPRight &&
            result.pRight_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pRight_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pRight_).MergeFrom(value).BuildPartial();
        } else {
          result.pRight_ = value;
        }
        result.hasPRight = true;
        return this;
      }
      public Builder ClearPRight() {
        result.hasPRight = false;
        result.pRight_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.QueryClause> PClausesList {
        get { return result.pClauses_; }
      }
      public int PClausesCount {
        get { return result.PClausesCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.QueryClause GetPClauses(int index) {
        return result.GetPClauses(index);
      }
      public Builder SetPClauses(int index, global::Landman.Rascal.CSharp.Profobuf.QueryClause value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pClauses_[index] = value;
        return this;
      }
      public Builder SetPClauses(int index, global::Landman.Rascal.CSharp.Profobuf.QueryClause.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pClauses_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPClauses(global::Landman.Rascal.CSharp.Profobuf.QueryClause value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pClauses_.Add(value);
        return this;
      }
      public Builder AddPClauses(global::Landman.Rascal.CSharp.Profobuf.QueryClause.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pClauses_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePClauses(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.QueryClause> values) {
        base.AddRange(values, result.pClauses_);
        return this;
      }
      public Builder ClearPClauses() {
        result.pClauses_.Clear();
        return this;
      }
      
      public bool HasPOperatorU {
       get { return result.HasPOperatorU; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.UnaryOperator POperatorU {
        get { return result.POperatorU; }
        set { SetPOperatorU(value); }
      }
      public Builder SetPOperatorU(global::Landman.Rascal.CSharp.Profobuf.UnaryOperator value) {
        result.hasPOperatorU = true;
        result.pOperatorU_ = value;
        return this;
      }
      public Builder ClearPOperatorU() {
        result.hasPOperatorU = false;
        result.pOperatorU_ = global::Landman.Rascal.CSharp.Profobuf.UnaryOperator.e_bitNot;
        return this;
      }
      
      public bool HasPTarget {
       get { return result.HasPTarget; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PTarget {
        get { return result.PTarget; }
        set { SetPTarget(value); }
      }
      public Builder SetPTarget(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPTarget = true;
        result.pTarget_ = value;
        return this;
      }
      public Builder SetPTarget(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPTarget = true;
        result.pTarget_ = builderForValue.Build();
        return this;
      }
      public Builder MergePTarget(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPTarget &&
            result.pTarget_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pTarget_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pTarget_).MergeFrom(value).BuildPartial();
        } else {
          result.pTarget_ = value;
        }
        result.hasPTarget = true;
        return this;
      }
      public Builder ClearPTarget() {
        result.hasPTarget = false;
        result.pTarget_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstType> PTypeArgumentsList {
        get { return result.pTypeArguments_; }
      }
      public int PTypeArgumentsCount {
        get { return result.PTypeArgumentsCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstType GetPTypeArguments(int index) {
        return result.GetPTypeArguments(index);
      }
      public Builder SetPTypeArguments(int index, global::Landman.Rascal.CSharp.Profobuf.AstType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pTypeArguments_[index] = value;
        return this;
      }
      public Builder SetPTypeArguments(int index, global::Landman.Rascal.CSharp.Profobuf.AstType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pTypeArguments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPTypeArguments(global::Landman.Rascal.CSharp.Profobuf.AstType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pTypeArguments_.Add(value);
        return this;
      }
      public Builder AddPTypeArguments(global::Landman.Rascal.CSharp.Profobuf.AstType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pTypeArguments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePTypeArguments(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstType> values) {
        base.AddRange(values, result.pTypeArguments_);
        return this;
      }
      public Builder ClearPTypeArguments() {
        result.pTypeArguments_.Clear();
        return this;
      }
      
      public bool HasPOperatorA {
       get { return result.HasPOperatorA; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AssignmentOperator POperatorA {
        get { return result.POperatorA; }
        set { SetPOperatorA(value); }
      }
      public Builder SetPOperatorA(global::Landman.Rascal.CSharp.Profobuf.AssignmentOperator value) {
        result.hasPOperatorA = true;
        result.pOperatorA_ = value;
        return this;
      }
      public Builder ClearPOperatorA() {
        result.hasPOperatorA = false;
        result.pOperatorA_ = global::Landman.Rascal.CSharp.Profobuf.AssignmentOperator.e_assignmentOperatorShiftLeft;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PAdditionalArraySpecifiersList {
        get { return result.pAdditionalArraySpecifiers_; }
      }
      public int PAdditionalArraySpecifiersCount {
        get { return result.PAdditionalArraySpecifiersCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPAdditionalArraySpecifiers(int index) {
        return result.GetPAdditionalArraySpecifiers(index);
      }
      public Builder SetPAdditionalArraySpecifiers(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pAdditionalArraySpecifiers_[index] = value;
        return this;
      }
      public Builder SetPAdditionalArraySpecifiers(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pAdditionalArraySpecifiers_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPAdditionalArraySpecifiers(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pAdditionalArraySpecifiers_.Add(value);
        return this;
      }
      public Builder AddPAdditionalArraySpecifiers(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pAdditionalArraySpecifiers_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePAdditionalArraySpecifiers(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pAdditionalArraySpecifiers_);
        return this;
      }
      public Builder ClearPAdditionalArraySpecifiers() {
        result.pAdditionalArraySpecifiers_.Clear();
        return this;
      }
      
      public bool HasPBody {
       get { return result.HasPBody; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode PBody {
        get { return result.PBody; }
        set { SetPBody(value); }
      }
      public Builder SetPBody(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPBody = true;
        result.pBody_ = value;
        return this;
      }
      public Builder SetPBody(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPBody = true;
        result.pBody_ = builderForValue.Build();
        return this;
      }
      public Builder MergePBody(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPBody &&
            result.pBody_ != global::Landman.Rascal.CSharp.Profobuf.AstNode.DefaultInstance) {
            result.pBody_ = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder(result.pBody_).MergeFrom(value).BuildPartial();
        } else {
          result.pBody_ = value;
        }
        result.hasPBody = true;
        return this;
      }
      public Builder ClearPBody() {
        result.hasPBody = false;
        result.pBody_ = global::Landman.Rascal.CSharp.Profobuf.AstNode.DefaultInstance;
        return this;
      }
      
      public bool HasPIdentifier {
        get { return result.HasPIdentifier; }
      }
      public string PIdentifier {
        get { return result.PIdentifier; }
        set { SetPIdentifier(value); }
      }
      public Builder SetPIdentifier(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPIdentifier = true;
        result.pIdentifier_ = value;
        return this;
      }
      public Builder ClearPIdentifier() {
        result.hasPIdentifier = false;
        result.pIdentifier_ = "";
        return this;
      }
      
      public bool HasPBodyS {
       get { return result.HasPBodyS; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Statement PBodyS {
        get { return result.PBodyS; }
        set { SetPBodyS(value); }
      }
      public Builder SetPBodyS(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPBodyS = true;
        result.pBodyS_ = value;
        return this;
      }
      public Builder SetPBodyS(global::Landman.Rascal.CSharp.Profobuf.Statement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPBodyS = true;
        result.pBodyS_ = builderForValue.Build();
        return this;
      }
      public Builder MergePBodyS(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPBodyS &&
            result.pBodyS_ != global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance) {
            result.pBodyS_ = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder(result.pBodyS_).MergeFrom(value).BuildPartial();
        } else {
          result.pBodyS_ = value;
        }
        result.hasPBodyS = true;
        return this;
      }
      public Builder ClearPBodyS() {
        result.hasPBodyS = false;
        result.pBodyS_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
        return this;
      }
      
      public bool HasPIsAccess {
        get { return result.HasPIsAccess; }
      }
      public bool PIsAccess {
        get { return result.PIsAccess; }
        set { SetPIsAccess(value); }
      }
      public Builder SetPIsAccess(bool value) {
        result.hasPIsAccess = true;
        result.pIsAccess_ = value;
        return this;
      }
      public Builder ClearPIsAccess() {
        result.hasPIsAccess = false;
        result.pIsAccess_ = false;
        return this;
      }
      
      public bool HasPInitializer {
       get { return result.HasPInitializer; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PInitializer {
        get { return result.PInitializer; }
        set { SetPInitializer(value); }
      }
      public Builder SetPInitializer(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPInitializer = true;
        result.pInitializer_ = value;
        return this;
      }
      public Builder SetPInitializer(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPInitializer = true;
        result.pInitializer_ = builderForValue.Build();
        return this;
      }
      public Builder MergePInitializer(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPInitializer &&
            result.pInitializer_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pInitializer_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pInitializer_).MergeFrom(value).BuildPartial();
        } else {
          result.pInitializer_ = value;
        }
        result.hasPInitializer = true;
        return this;
      }
      public Builder ClearPInitializer() {
        result.hasPInitializer = false;
        result.pInitializer_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public bool HasPMemberName {
        get { return result.HasPMemberName; }
      }
      public string PMemberName {
        get { return result.PMemberName; }
        set { SetPMemberName(value); }
      }
      public Builder SetPMemberName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPMemberName = true;
        result.pMemberName_ = value;
        return this;
      }
      public Builder ClearPMemberName() {
        result.hasPMemberName = false;
        result.pMemberName_ = "";
        return this;
      }
      
      public bool HasPFieldDirection {
       get { return result.HasPFieldDirection; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.FieldDirection PFieldDirection {
        get { return result.PFieldDirection; }
        set { SetPFieldDirection(value); }
      }
      public Builder SetPFieldDirection(global::Landman.Rascal.CSharp.Profobuf.FieldDirection value) {
        result.hasPFieldDirection = true;
        result.pFieldDirection_ = value;
        return this;
      }
      public Builder ClearPFieldDirection() {
        result.hasPFieldDirection = false;
        result.pFieldDirection_ = global::Landman.Rascal.CSharp.Profobuf.FieldDirection.e_fieldDirectionNone;
        return this;
      }
      
      public bool HasPHasParameterList {
        get { return result.HasPHasParameterList; }
      }
      public bool PHasParameterList {
        get { return result.PHasParameterList; }
        set { SetPHasParameterList(value); }
      }
      public Builder SetPHasParameterList(bool value) {
        result.hasPHasParameterList = true;
        result.pHasParameterList_ = value;
        return this;
      }
      public Builder ClearPHasParameterList() {
        result.hasPHasParameterList = false;
        result.pHasParameterList_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PParametersList {
        get { return result.pParameters_; }
      }
      public int PParametersCount {
        get { return result.PParametersCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPParameters(int index) {
        return result.GetPParameters(index);
      }
      public Builder SetPParameters(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pParameters_[index] = value;
        return this;
      }
      public Builder SetPParameters(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pParameters_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPParameters(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pParameters_.Add(value);
        return this;
      }
      public Builder AddPParameters(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pParameters_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePParameters(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pParameters_);
        return this;
      }
      public Builder ClearPParameters() {
        result.pParameters_.Clear();
        return this;
      }
      
      public bool HasPTrueExpression {
       get { return result.HasPTrueExpression; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PTrueExpression {
        get { return result.PTrueExpression; }
        set { SetPTrueExpression(value); }
      }
      public Builder SetPTrueExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPTrueExpression = true;
        result.pTrueExpression_ = value;
        return this;
      }
      public Builder SetPTrueExpression(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPTrueExpression = true;
        result.pTrueExpression_ = builderForValue.Build();
        return this;
      }
      public Builder MergePTrueExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPTrueExpression &&
            result.pTrueExpression_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pTrueExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pTrueExpression_).MergeFrom(value).BuildPartial();
        } else {
          result.pTrueExpression_ = value;
        }
        result.hasPTrueExpression = true;
        return this;
      }
      public Builder ClearPTrueExpression() {
        result.hasPTrueExpression = false;
        result.pTrueExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public bool HasPLeft {
       get { return result.HasPLeft; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PLeft {
        get { return result.PLeft; }
        set { SetPLeft(value); }
      }
      public Builder SetPLeft(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPLeft = true;
        result.pLeft_ = value;
        return this;
      }
      public Builder SetPLeft(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPLeft = true;
        result.pLeft_ = builderForValue.Build();
        return this;
      }
      public Builder MergePLeft(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPLeft &&
            result.pLeft_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pLeft_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pLeft_).MergeFrom(value).BuildPartial();
        } else {
          result.pLeft_ = value;
        }
        result.hasPLeft = true;
        return this;
      }
      public Builder ClearPLeft() {
        result.hasPLeft = false;
        result.pLeft_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public bool HasPCountExpression {
       get { return result.HasPCountExpression; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PCountExpression {
        get { return result.PCountExpression; }
        set { SetPCountExpression(value); }
      }
      public Builder SetPCountExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPCountExpression = true;
        result.pCountExpression_ = value;
        return this;
      }
      public Builder SetPCountExpression(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPCountExpression = true;
        result.pCountExpression_ = builderForValue.Build();
        return this;
      }
      public Builder MergePCountExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPCountExpression &&
            result.pCountExpression_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pCountExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pCountExpression_).MergeFrom(value).BuildPartial();
        } else {
          result.pCountExpression_ = value;
        }
        result.hasPCountExpression = true;
        return this;
      }
      public Builder ClearPCountExpression() {
        result.hasPCountExpression = false;
        result.pCountExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
    }
    static Expression() {
      object.ReferenceEquals(global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.Descriptor, null);
    }
  }
  
  public sealed partial class AttributedNode : pb::GeneratedMessage<AttributedNode, AttributedNode.Builder> {
    private static readonly AttributedNode defaultInstance = new Builder().BuildPartial();
    public static AttributedNode DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AttributedNode DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override AttributedNode ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.internal__static_Landman_Rascal_CSharp_Profobuf_AttributedNode__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AttributedNode, AttributedNode.Builder> InternalFieldAccessors {
      get { return global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.internal__static_Landman_Rascal_CSharp_Profobuf_AttributedNode__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum AttributedNodeKind {
        k_enumMemberDeclaration = 0,
        k_accessor = 1,
        k_delegateDeclaration = 2,
        k_destructorDeclaration = 3,
        k_typeDeclaration = 4,
        k_constructorDeclaration = 5,
        k_memberDeclaration = 6,
      }
      
    }
    #endregion
    
    public const int KindFieldNumber = 1;
    private bool hasKind;
    private global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Types.AttributedNodeKind kind_ = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Types.AttributedNodeKind.k_enumMemberDeclaration;
    public bool HasKind {
      get { return hasKind; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Types.AttributedNodeKind Kind {
      get { return kind_; }
    }
    
    public const int PConstraintsFieldNumber = 2;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pConstraints_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PConstraintsList {
      get { return pConstraints_; }
    }
    public int PConstraintsCount {
      get { return pConstraints_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPConstraints(int index) {
      return pConstraints_[index];
    }
    
    public const int PAttributesFieldNumber = 3;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pAttributes_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PAttributesList {
      get { return pAttributes_; }
    }
    public int PAttributesCount {
      get { return pAttributes_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPAttributes(int index) {
      return pAttributes_[index];
    }
    
    public const int PTypeParametersFieldNumber = 4;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pTypeParameters_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PTypeParametersList {
      get { return pTypeParameters_; }
    }
    public int PTypeParametersCount {
      get { return pTypeParameters_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPTypeParameters(int index) {
      return pTypeParameters_[index];
    }
    
    public const int PClassTypeFieldNumber = 5;
    private bool hasPClassType;
    private global::Landman.Rascal.CSharp.Profobuf.Class pClassType_ = global::Landman.Rascal.CSharp.Profobuf.Class.e_delegate;
    public bool HasPClassType {
      get { return hasPClassType; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Class PClassType {
      get { return pClassType_; }
    }
    
    public const int PNameFieldNumber = 6;
    private bool hasPName;
    private string pName_ = "";
    public bool HasPName {
      get { return hasPName; }
    }
    public string PName {
      get { return pName_; }
    }
    
    public const int PBodyFieldNumber = 7;
    private bool hasPBody;
    private global::Landman.Rascal.CSharp.Profobuf.Statement pBody_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
    public bool HasPBody {
      get { return hasPBody; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Statement PBody {
      get { return pBody_; }
    }
    
    public const int PMembersFieldNumber = 8;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AttributedNode> pMembers_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AttributedNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AttributedNode> PMembersList {
      get { return pMembers_; }
    }
    public int PMembersCount {
      get { return pMembers_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AttributedNode GetPMembers(int index) {
      return pMembers_[index];
    }
    
    public const int PModifierTokensFieldNumber = 9;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pModifierTokens_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PModifierTokensList {
      get { return pModifierTokens_; }
    }
    public int PModifierTokensCount {
      get { return pModifierTokens_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPModifierTokens(int index) {
      return pModifierTokens_[index];
    }
    
    public const int PInitializerAFieldNumber = 10;
    private bool hasPInitializerA;
    private global::Landman.Rascal.CSharp.Profobuf.AstNode pInitializerA_ = global::Landman.Rascal.CSharp.Profobuf.AstNode.DefaultInstance;
    public bool HasPInitializerA {
      get { return hasPInitializerA; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode PInitializerA {
      get { return pInitializerA_; }
    }
    
    public const int PBaseTypesFieldNumber = 11;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstType> pBaseTypes_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstType>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstType> PBaseTypesList {
      get { return pBaseTypes_; }
    }
    public int PBaseTypesCount {
      get { return pBaseTypes_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstType GetPBaseTypes(int index) {
      return pBaseTypes_[index];
    }
    
    public const int PModifiersFieldNumber = 12;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Modifiers> pModifiers_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Modifiers>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.Modifiers> PModifiersList {
      get { return pbc::Lists.AsReadOnly(pModifiers_); }
    }
    public int PModifiersCount {
      get { return pModifiers_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Modifiers GetPModifiers(int index) {
      return pModifiers_[index];
    }
    
    public const int PInitializerFieldNumber = 13;
    private bool hasPInitializer;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pInitializer_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPInitializer {
      get { return hasPInitializer; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PInitializer {
      get { return pInitializer_; }
    }
    
    public const int PParametersFieldNumber = 14;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pParameters_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PParametersList {
      get { return pParameters_; }
    }
    public int PParametersCount {
      get { return pParameters_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPParameters(int index) {
      return pParameters_[index];
    }
    
    public const int PNodeMemberDeclarationFieldNumber = 15;
    private bool hasPNodeMemberDeclaration;
    private global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration pNodeMemberDeclaration_ = global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration.DefaultInstance;
    public bool HasPNodeMemberDeclaration {
      get { return hasPNodeMemberDeclaration; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration PNodeMemberDeclaration {
      get { return pNodeMemberDeclaration_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKind) return false;
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PConstraintsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PAttributesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PTypeParametersList) {
          if (!element.IsInitialized) return false;
        }
        if (HasPBody) {
          if (!PBody.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AttributedNode element in PMembersList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PModifierTokensList) {
          if (!element.IsInitialized) return false;
        }
        if (HasPInitializerA) {
          if (!PInitializerA.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstType element in PBaseTypesList) {
          if (!element.IsInitialized) return false;
        }
        if (HasPInitializer) {
          if (!PInitializer.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PParametersList) {
          if (!element.IsInitialized) return false;
        }
        if (HasPNodeMemberDeclaration) {
          if (!PNodeMemberDeclaration.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasKind) {
        output.WriteEnum(1, (int) Kind);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PConstraintsList) {
        output.WriteMessage(2, element);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PAttributesList) {
        output.WriteMessage(3, element);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PTypeParametersList) {
        output.WriteMessage(4, element);
      }
      if (HasPClassType) {
        output.WriteEnum(5, (int) PClassType);
      }
      if (HasPName) {
        output.WriteString(6, PName);
      }
      if (HasPBody) {
        output.WriteMessage(7, PBody);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AttributedNode element in PMembersList) {
        output.WriteMessage(8, element);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PModifierTokensList) {
        output.WriteMessage(9, element);
      }
      if (HasPInitializerA) {
        output.WriteMessage(10, PInitializerA);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstType element in PBaseTypesList) {
        output.WriteMessage(11, element);
      }
      if (pModifiers_.Count > 0) {
        foreach (int element in pModifiers_) {
          output.WriteEnum(12, element);
        }
      }
      if (HasPInitializer) {
        output.WriteMessage(13, PInitializer);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PParametersList) {
        output.WriteMessage(14, element);
      }
      if (HasPNodeMemberDeclaration) {
        output.WriteMessage(15, PNodeMemberDeclaration);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasKind) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Kind);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PConstraintsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PAttributesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PTypeParametersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        if (HasPClassType) {
          size += pb::CodedOutputStream.ComputeEnumSize(5, (int) PClassType);
        }
        if (HasPName) {
          size += pb::CodedOutputStream.ComputeStringSize(6, PName);
        }
        if (HasPBody) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, PBody);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AttributedNode element in PMembersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, element);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PModifierTokensList) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, element);
        }
        if (HasPInitializerA) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, PInitializerA);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstType element in PBaseTypesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, element);
        }
        {
          int dataSize = 0;
          if (pModifiers_.Count > 0) {
            foreach (global::Landman.Rascal.CSharp.Profobuf.Modifiers element in pModifiers_) {
              dataSize += pb::CodedOutputStream.ComputeEnumSizeNoTag((int) element);
            }
            size += dataSize;
            size += 1 * pModifiers_.Count;
          }
        }
        if (HasPInitializer) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, PInitializer);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PParametersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, element);
        }
        if (HasPNodeMemberDeclaration) {
          size += pb::CodedOutputStream.ComputeMessageSize(15, PNodeMemberDeclaration);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AttributedNode ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AttributedNode ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AttributedNode ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AttributedNode ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AttributedNode ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AttributedNode ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AttributedNode ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AttributedNode ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AttributedNode ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AttributedNode ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AttributedNode prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<AttributedNode, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      AttributedNode result = new AttributedNode();
      
      protected override AttributedNode MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new AttributedNode();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Descriptor; }
      }
      
      public override AttributedNode DefaultInstanceForType {
        get { return global::Landman.Rascal.CSharp.Profobuf.AttributedNode.DefaultInstance; }
      }
      
      public override AttributedNode BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.pConstraints_.MakeReadOnly();
        result.pAttributes_.MakeReadOnly();
        result.pTypeParameters_.MakeReadOnly();
        result.pMembers_.MakeReadOnly();
        result.pModifierTokens_.MakeReadOnly();
        result.pBaseTypes_.MakeReadOnly();
        result.pModifiers_.MakeReadOnly();
        result.pParameters_.MakeReadOnly();
        AttributedNode returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AttributedNode) {
          return MergeFrom((AttributedNode) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AttributedNode other) {
        if (other == global::Landman.Rascal.CSharp.Profobuf.AttributedNode.DefaultInstance) return this;
        if (other.HasKind) {
          Kind = other.Kind;
        }
        if (other.pConstraints_.Count != 0) {
          base.AddRange(other.pConstraints_, result.pConstraints_);
        }
        if (other.pAttributes_.Count != 0) {
          base.AddRange(other.pAttributes_, result.pAttributes_);
        }
        if (other.pTypeParameters_.Count != 0) {
          base.AddRange(other.pTypeParameters_, result.pTypeParameters_);
        }
        if (other.HasPClassType) {
          PClassType = other.PClassType;
        }
        if (other.HasPName) {
          PName = other.PName;
        }
        if (other.HasPBody) {
          MergePBody(other.PBody);
        }
        if (other.pMembers_.Count != 0) {
          base.AddRange(other.pMembers_, result.pMembers_);
        }
        if (other.pModifierTokens_.Count != 0) {
          base.AddRange(other.pModifierTokens_, result.pModifierTokens_);
        }
        if (other.HasPInitializerA) {
          MergePInitializerA(other.PInitializerA);
        }
        if (other.pBaseTypes_.Count != 0) {
          base.AddRange(other.pBaseTypes_, result.pBaseTypes_);
        }
        if (other.pModifiers_.Count != 0) {
          base.AddRange(other.pModifiers_, result.pModifiers_);
        }
        if (other.HasPInitializer) {
          MergePInitializer(other.PInitializer);
        }
        if (other.pParameters_.Count != 0) {
          base.AddRange(other.pParameters_, result.pParameters_);
        }
        if (other.HasPNodeMemberDeclaration) {
          MergePNodeMemberDeclaration(other.PNodeMemberDeclaration);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Types.AttributedNodeKind), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong) rawValue);
              } else {
                Kind = (global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Types.AttributedNodeKind) rawValue;
              }
              break;
            }
            case 18: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPConstraints(subBuilder.BuildPartial());
              break;
            }
            case 26: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPAttributes(subBuilder.BuildPartial());
              break;
            }
            case 34: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPTypeParameters(subBuilder.BuildPartial());
              break;
            }
            case 40: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.Class), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(5, (ulong) rawValue);
              } else {
                PClassType = (global::Landman.Rascal.CSharp.Profobuf.Class) rawValue;
              }
              break;
            }
            case 50: {
              PName = input.ReadString();
              break;
            }
            case 58: {
              global::Landman.Rascal.CSharp.Profobuf.Statement.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder();
              if (HasPBody) {
                subBuilder.MergeFrom(PBody);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PBody = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPMembers(subBuilder.BuildPartial());
              break;
            }
            case 74: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPModifierTokens(subBuilder.BuildPartial());
              break;
            }
            case 82: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              if (HasPInitializerA) {
                subBuilder.MergeFrom(PInitializerA);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PInitializerA = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::Landman.Rascal.CSharp.Profobuf.AstType.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstType.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPBaseTypes(subBuilder.BuildPartial());
              break;
            }
            case 96: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.Modifiers), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(12, (ulong) rawValue);
              } else {
                AddPModifiers((global::Landman.Rascal.CSharp.Profobuf.Modifiers) rawValue);
              }
              break;
            }
            case 106: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPInitializer) {
                subBuilder.MergeFrom(PInitializer);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PInitializer = subBuilder.BuildPartial();
              break;
            }
            case 114: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPParameters(subBuilder.BuildPartial());
              break;
            }
            case 122: {
              global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration.CreateBuilder();
              if (HasPNodeMemberDeclaration) {
                subBuilder.MergeFrom(PNodeMemberDeclaration);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PNodeMemberDeclaration = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasKind {
       get { return result.HasKind; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Types.AttributedNodeKind Kind {
        get { return result.Kind; }
        set { SetKind(value); }
      }
      public Builder SetKind(global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Types.AttributedNodeKind value) {
        result.hasKind = true;
        result.kind_ = value;
        return this;
      }
      public Builder ClearKind() {
        result.hasKind = false;
        result.kind_ = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Types.AttributedNodeKind.k_enumMemberDeclaration;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PConstraintsList {
        get { return result.pConstraints_; }
      }
      public int PConstraintsCount {
        get { return result.PConstraintsCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPConstraints(int index) {
        return result.GetPConstraints(index);
      }
      public Builder SetPConstraints(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pConstraints_[index] = value;
        return this;
      }
      public Builder SetPConstraints(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pConstraints_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPConstraints(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pConstraints_.Add(value);
        return this;
      }
      public Builder AddPConstraints(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pConstraints_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePConstraints(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pConstraints_);
        return this;
      }
      public Builder ClearPConstraints() {
        result.pConstraints_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PAttributesList {
        get { return result.pAttributes_; }
      }
      public int PAttributesCount {
        get { return result.PAttributesCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPAttributes(int index) {
        return result.GetPAttributes(index);
      }
      public Builder SetPAttributes(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pAttributes_[index] = value;
        return this;
      }
      public Builder SetPAttributes(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pAttributes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPAttributes(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pAttributes_.Add(value);
        return this;
      }
      public Builder AddPAttributes(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pAttributes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePAttributes(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pAttributes_);
        return this;
      }
      public Builder ClearPAttributes() {
        result.pAttributes_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PTypeParametersList {
        get { return result.pTypeParameters_; }
      }
      public int PTypeParametersCount {
        get { return result.PTypeParametersCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPTypeParameters(int index) {
        return result.GetPTypeParameters(index);
      }
      public Builder SetPTypeParameters(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pTypeParameters_[index] = value;
        return this;
      }
      public Builder SetPTypeParameters(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pTypeParameters_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPTypeParameters(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pTypeParameters_.Add(value);
        return this;
      }
      public Builder AddPTypeParameters(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pTypeParameters_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePTypeParameters(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pTypeParameters_);
        return this;
      }
      public Builder ClearPTypeParameters() {
        result.pTypeParameters_.Clear();
        return this;
      }
      
      public bool HasPClassType {
       get { return result.HasPClassType; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Class PClassType {
        get { return result.PClassType; }
        set { SetPClassType(value); }
      }
      public Builder SetPClassType(global::Landman.Rascal.CSharp.Profobuf.Class value) {
        result.hasPClassType = true;
        result.pClassType_ = value;
        return this;
      }
      public Builder ClearPClassType() {
        result.hasPClassType = false;
        result.pClassType_ = global::Landman.Rascal.CSharp.Profobuf.Class.e_delegate;
        return this;
      }
      
      public bool HasPName {
        get { return result.HasPName; }
      }
      public string PName {
        get { return result.PName; }
        set { SetPName(value); }
      }
      public Builder SetPName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPName = true;
        result.pName_ = value;
        return this;
      }
      public Builder ClearPName() {
        result.hasPName = false;
        result.pName_ = "";
        return this;
      }
      
      public bool HasPBody {
       get { return result.HasPBody; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Statement PBody {
        get { return result.PBody; }
        set { SetPBody(value); }
      }
      public Builder SetPBody(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPBody = true;
        result.pBody_ = value;
        return this;
      }
      public Builder SetPBody(global::Landman.Rascal.CSharp.Profobuf.Statement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPBody = true;
        result.pBody_ = builderForValue.Build();
        return this;
      }
      public Builder MergePBody(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPBody &&
            result.pBody_ != global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance) {
            result.pBody_ = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder(result.pBody_).MergeFrom(value).BuildPartial();
        } else {
          result.pBody_ = value;
        }
        result.hasPBody = true;
        return this;
      }
      public Builder ClearPBody() {
        result.hasPBody = false;
        result.pBody_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AttributedNode> PMembersList {
        get { return result.pMembers_; }
      }
      public int PMembersCount {
        get { return result.PMembersCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AttributedNode GetPMembers(int index) {
        return result.GetPMembers(index);
      }
      public Builder SetPMembers(int index, global::Landman.Rascal.CSharp.Profobuf.AttributedNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pMembers_[index] = value;
        return this;
      }
      public Builder SetPMembers(int index, global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pMembers_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPMembers(global::Landman.Rascal.CSharp.Profobuf.AttributedNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pMembers_.Add(value);
        return this;
      }
      public Builder AddPMembers(global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pMembers_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePMembers(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AttributedNode> values) {
        base.AddRange(values, result.pMembers_);
        return this;
      }
      public Builder ClearPMembers() {
        result.pMembers_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PModifierTokensList {
        get { return result.pModifierTokens_; }
      }
      public int PModifierTokensCount {
        get { return result.PModifierTokensCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPModifierTokens(int index) {
        return result.GetPModifierTokens(index);
      }
      public Builder SetPModifierTokens(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pModifierTokens_[index] = value;
        return this;
      }
      public Builder SetPModifierTokens(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pModifierTokens_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPModifierTokens(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pModifierTokens_.Add(value);
        return this;
      }
      public Builder AddPModifierTokens(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pModifierTokens_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePModifierTokens(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pModifierTokens_);
        return this;
      }
      public Builder ClearPModifierTokens() {
        result.pModifierTokens_.Clear();
        return this;
      }
      
      public bool HasPInitializerA {
       get { return result.HasPInitializerA; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode PInitializerA {
        get { return result.PInitializerA; }
        set { SetPInitializerA(value); }
      }
      public Builder SetPInitializerA(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPInitializerA = true;
        result.pInitializerA_ = value;
        return this;
      }
      public Builder SetPInitializerA(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPInitializerA = true;
        result.pInitializerA_ = builderForValue.Build();
        return this;
      }
      public Builder MergePInitializerA(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPInitializerA &&
            result.pInitializerA_ != global::Landman.Rascal.CSharp.Profobuf.AstNode.DefaultInstance) {
            result.pInitializerA_ = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder(result.pInitializerA_).MergeFrom(value).BuildPartial();
        } else {
          result.pInitializerA_ = value;
        }
        result.hasPInitializerA = true;
        return this;
      }
      public Builder ClearPInitializerA() {
        result.hasPInitializerA = false;
        result.pInitializerA_ = global::Landman.Rascal.CSharp.Profobuf.AstNode.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstType> PBaseTypesList {
        get { return result.pBaseTypes_; }
      }
      public int PBaseTypesCount {
        get { return result.PBaseTypesCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstType GetPBaseTypes(int index) {
        return result.GetPBaseTypes(index);
      }
      public Builder SetPBaseTypes(int index, global::Landman.Rascal.CSharp.Profobuf.AstType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pBaseTypes_[index] = value;
        return this;
      }
      public Builder SetPBaseTypes(int index, global::Landman.Rascal.CSharp.Profobuf.AstType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pBaseTypes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPBaseTypes(global::Landman.Rascal.CSharp.Profobuf.AstType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pBaseTypes_.Add(value);
        return this;
      }
      public Builder AddPBaseTypes(global::Landman.Rascal.CSharp.Profobuf.AstType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pBaseTypes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePBaseTypes(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstType> values) {
        base.AddRange(values, result.pBaseTypes_);
        return this;
      }
      public Builder ClearPBaseTypes() {
        result.pBaseTypes_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.Modifiers> PModifiersList {
        get { return result.pModifiers_; }
      }
      public int PModifiersCount {
        get { return result.PModifiersCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Modifiers GetPModifiers(int index) {
        return result.GetPModifiers(index);
      }
      public Builder SetPModifiers(int index, global::Landman.Rascal.CSharp.Profobuf.Modifiers value) {
        result.pModifiers_[index] = value;
        return this;
      }
      public Builder AddPModifiers(global::Landman.Rascal.CSharp.Profobuf.Modifiers value) {
        result.pModifiers_.Add(value);
        return this;
      }
      public Builder AddRangePModifiers(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.Modifiers> values) {
        base.AddRange(values, result.pModifiers_);
        return this;
      }
      public Builder ClearPModifiers() {
        result.pModifiers_.Clear();
        return this;
      }
      
      public bool HasPInitializer {
       get { return result.HasPInitializer; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PInitializer {
        get { return result.PInitializer; }
        set { SetPInitializer(value); }
      }
      public Builder SetPInitializer(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPInitializer = true;
        result.pInitializer_ = value;
        return this;
      }
      public Builder SetPInitializer(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPInitializer = true;
        result.pInitializer_ = builderForValue.Build();
        return this;
      }
      public Builder MergePInitializer(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPInitializer &&
            result.pInitializer_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pInitializer_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pInitializer_).MergeFrom(value).BuildPartial();
        } else {
          result.pInitializer_ = value;
        }
        result.hasPInitializer = true;
        return this;
      }
      public Builder ClearPInitializer() {
        result.hasPInitializer = false;
        result.pInitializer_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PParametersList {
        get { return result.pParameters_; }
      }
      public int PParametersCount {
        get { return result.PParametersCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPParameters(int index) {
        return result.GetPParameters(index);
      }
      public Builder SetPParameters(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pParameters_[index] = value;
        return this;
      }
      public Builder SetPParameters(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pParameters_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPParameters(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pParameters_.Add(value);
        return this;
      }
      public Builder AddPParameters(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pParameters_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePParameters(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pParameters_);
        return this;
      }
      public Builder ClearPParameters() {
        result.pParameters_.Clear();
        return this;
      }
      
      public bool HasPNodeMemberDeclaration {
       get { return result.HasPNodeMemberDeclaration; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration PNodeMemberDeclaration {
        get { return result.PNodeMemberDeclaration; }
        set { SetPNodeMemberDeclaration(value); }
      }
      public Builder SetPNodeMemberDeclaration(global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPNodeMemberDeclaration = true;
        result.pNodeMemberDeclaration_ = value;
        return this;
      }
      public Builder SetPNodeMemberDeclaration(global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPNodeMemberDeclaration = true;
        result.pNodeMemberDeclaration_ = builderForValue.Build();
        return this;
      }
      public Builder MergePNodeMemberDeclaration(global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPNodeMemberDeclaration &&
            result.pNodeMemberDeclaration_ != global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration.DefaultInstance) {
            result.pNodeMemberDeclaration_ = global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration.CreateBuilder(result.pNodeMemberDeclaration_).MergeFrom(value).BuildPartial();
        } else {
          result.pNodeMemberDeclaration_ = value;
        }
        result.hasPNodeMemberDeclaration = true;
        return this;
      }
      public Builder ClearPNodeMemberDeclaration() {
        result.hasPNodeMemberDeclaration = false;
        result.pNodeMemberDeclaration_ = global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration.DefaultInstance;
        return this;
      }
    }
    static AttributedNode() {
      object.ReferenceEquals(global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.Descriptor, null);
    }
  }
  
  public sealed partial class MemberDeclaration : pb::GeneratedMessage<MemberDeclaration, MemberDeclaration.Builder> {
    private static readonly MemberDeclaration defaultInstance = new Builder().BuildPartial();
    public static MemberDeclaration DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MemberDeclaration DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override MemberDeclaration ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.internal__static_Landman_Rascal_CSharp_Profobuf_MemberDeclaration__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MemberDeclaration, MemberDeclaration.Builder> InternalFieldAccessors {
      get { return global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.internal__static_Landman_Rascal_CSharp_Profobuf_MemberDeclaration__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum MemberDeclarationKind {
        k_indexerDeclaration = 0,
        k_methodDeclaration = 1,
        k_operatorDeclaration = 2,
        k_propertyDeclaration = 3,
        k_customEventDeclaration = 4,
        k_fieldDeclaration = 5,
        k_eventDeclaration = 6,
      }
      
    }
    #endregion
    
    public const int KindFieldNumber = 1;
    private bool hasKind;
    private global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration.Types.MemberDeclarationKind kind_ = global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration.Types.MemberDeclarationKind.k_indexerDeclaration;
    public bool HasKind {
      get { return hasKind; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration.Types.MemberDeclarationKind Kind {
      get { return kind_; }
    }
    
    public const int PConstraintsFieldNumber = 2;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pConstraints_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PConstraintsList {
      get { return pConstraints_; }
    }
    public int PConstraintsCount {
      get { return pConstraints_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPConstraints(int index) {
      return pConstraints_[index];
    }
    
    public const int PIsExtensionMethodFieldNumber = 3;
    private bool hasPIsExtensionMethod;
    private bool pIsExtensionMethod_ = false;
    public bool HasPIsExtensionMethod {
      get { return hasPIsExtensionMethod; }
    }
    public bool PIsExtensionMethod {
      get { return pIsExtensionMethod_; }
    }
    
    public const int PAttributesFieldNumber = 4;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pAttributes_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PAttributesList {
      get { return pAttributes_; }
    }
    public int PAttributesCount {
      get { return pAttributes_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPAttributes(int index) {
      return pAttributes_[index];
    }
    
    public const int PVariablesFieldNumber = 5;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pVariables_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PVariablesList {
      get { return pVariables_; }
    }
    public int PVariablesCount {
      get { return pVariables_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPVariables(int index) {
      return pVariables_[index];
    }
    
    public const int PTypeParametersFieldNumber = 6;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pTypeParameters_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PTypeParametersList {
      get { return pTypeParameters_; }
    }
    public int PTypeParametersCount {
      get { return pTypeParameters_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPTypeParameters(int index) {
      return pTypeParameters_[index];
    }
    
    public const int PSetterFieldNumber = 7;
    private bool hasPSetter;
    private global::Landman.Rascal.CSharp.Profobuf.AttributedNode pSetter_ = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.DefaultInstance;
    public bool HasPSetter {
      get { return hasPSetter; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AttributedNode PSetter {
      get { return pSetter_; }
    }
    
    public const int PNameFieldNumber = 8;
    private bool hasPName;
    private string pName_ = "";
    public bool HasPName {
      get { return hasPName; }
    }
    public string PName {
      get { return pName_; }
    }
    
    public const int PBodyFieldNumber = 9;
    private bool hasPBody;
    private global::Landman.Rascal.CSharp.Profobuf.Statement pBody_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
    public bool HasPBody {
      get { return hasPBody; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Statement PBody {
      get { return pBody_; }
    }
    
    public const int PAddAccessorFieldNumber = 10;
    private bool hasPAddAccessor;
    private global::Landman.Rascal.CSharp.Profobuf.AttributedNode pAddAccessor_ = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.DefaultInstance;
    public bool HasPAddAccessor {
      get { return hasPAddAccessor; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AttributedNode PAddAccessor {
      get { return pAddAccessor_; }
    }
    
    public const int PGetterFieldNumber = 11;
    private bool hasPGetter;
    private global::Landman.Rascal.CSharp.Profobuf.AttributedNode pGetter_ = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.DefaultInstance;
    public bool HasPGetter {
      get { return hasPGetter; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AttributedNode PGetter {
      get { return pGetter_; }
    }
    
    public const int PRemoveAccessorFieldNumber = 12;
    private bool hasPRemoveAccessor;
    private global::Landman.Rascal.CSharp.Profobuf.AttributedNode pRemoveAccessor_ = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.DefaultInstance;
    public bool HasPRemoveAccessor {
      get { return hasPRemoveAccessor; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AttributedNode PRemoveAccessor {
      get { return pRemoveAccessor_; }
    }
    
    public const int PModifierTokensFieldNumber = 13;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pModifierTokens_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PModifierTokensList {
      get { return pModifierTokens_; }
    }
    public int PModifierTokensCount {
      get { return pModifierTokens_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPModifierTokens(int index) {
      return pModifierTokens_[index];
    }
    
    public const int PModifiersFieldNumber = 14;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Modifiers> pModifiers_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Modifiers>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.Modifiers> PModifiersList {
      get { return pbc::Lists.AsReadOnly(pModifiers_); }
    }
    public int PModifiersCount {
      get { return pModifiers_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Modifiers GetPModifiers(int index) {
      return pModifiers_[index];
    }
    
    public const int POperatorTypeFieldNumber = 15;
    private bool hasPOperatorType;
    private global::Landman.Rascal.CSharp.Profobuf.Operator pOperatorType_ = global::Landman.Rascal.CSharp.Profobuf.Operator.e_operatorImplicit;
    public bool HasPOperatorType {
      get { return hasPOperatorType; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Operator POperatorType {
      get { return pOperatorType_; }
    }
    
    public const int PParametersFieldNumber = 16;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pParameters_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PParametersList {
      get { return pParameters_; }
    }
    public int PParametersCount {
      get { return pParameters_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPParameters(int index) {
      return pParameters_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKind) return false;
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PConstraintsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PAttributesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PVariablesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PTypeParametersList) {
          if (!element.IsInitialized) return false;
        }
        if (HasPSetter) {
          if (!PSetter.IsInitialized) return false;
        }
        if (HasPBody) {
          if (!PBody.IsInitialized) return false;
        }
        if (HasPAddAccessor) {
          if (!PAddAccessor.IsInitialized) return false;
        }
        if (HasPGetter) {
          if (!PGetter.IsInitialized) return false;
        }
        if (HasPRemoveAccessor) {
          if (!PRemoveAccessor.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PModifierTokensList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PParametersList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasKind) {
        output.WriteEnum(1, (int) Kind);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PConstraintsList) {
        output.WriteMessage(2, element);
      }
      if (HasPIsExtensionMethod) {
        output.WriteBool(3, PIsExtensionMethod);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PAttributesList) {
        output.WriteMessage(4, element);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PVariablesList) {
        output.WriteMessage(5, element);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PTypeParametersList) {
        output.WriteMessage(6, element);
      }
      if (HasPSetter) {
        output.WriteMessage(7, PSetter);
      }
      if (HasPName) {
        output.WriteString(8, PName);
      }
      if (HasPBody) {
        output.WriteMessage(9, PBody);
      }
      if (HasPAddAccessor) {
        output.WriteMessage(10, PAddAccessor);
      }
      if (HasPGetter) {
        output.WriteMessage(11, PGetter);
      }
      if (HasPRemoveAccessor) {
        output.WriteMessage(12, PRemoveAccessor);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PModifierTokensList) {
        output.WriteMessage(13, element);
      }
      if (pModifiers_.Count > 0) {
        foreach (int element in pModifiers_) {
          output.WriteEnum(14, element);
        }
      }
      if (HasPOperatorType) {
        output.WriteEnum(15, (int) POperatorType);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PParametersList) {
        output.WriteMessage(16, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasKind) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Kind);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PConstraintsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (HasPIsExtensionMethod) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, PIsExtensionMethod);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PAttributesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PVariablesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PTypeParametersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        if (HasPSetter) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, PSetter);
        }
        if (HasPName) {
          size += pb::CodedOutputStream.ComputeStringSize(8, PName);
        }
        if (HasPBody) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, PBody);
        }
        if (HasPAddAccessor) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, PAddAccessor);
        }
        if (HasPGetter) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, PGetter);
        }
        if (HasPRemoveAccessor) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, PRemoveAccessor);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PModifierTokensList) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, element);
        }
        {
          int dataSize = 0;
          if (pModifiers_.Count > 0) {
            foreach (global::Landman.Rascal.CSharp.Profobuf.Modifiers element in pModifiers_) {
              dataSize += pb::CodedOutputStream.ComputeEnumSizeNoTag((int) element);
            }
            size += dataSize;
            size += 1 * pModifiers_.Count;
          }
        }
        if (HasPOperatorType) {
          size += pb::CodedOutputStream.ComputeEnumSize(15, (int) POperatorType);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PParametersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(16, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MemberDeclaration ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MemberDeclaration ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MemberDeclaration ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MemberDeclaration ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MemberDeclaration ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MemberDeclaration ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MemberDeclaration ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MemberDeclaration ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MemberDeclaration ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MemberDeclaration ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MemberDeclaration prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<MemberDeclaration, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      MemberDeclaration result = new MemberDeclaration();
      
      protected override MemberDeclaration MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new MemberDeclaration();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration.Descriptor; }
      }
      
      public override MemberDeclaration DefaultInstanceForType {
        get { return global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration.DefaultInstance; }
      }
      
      public override MemberDeclaration BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.pConstraints_.MakeReadOnly();
        result.pAttributes_.MakeReadOnly();
        result.pVariables_.MakeReadOnly();
        result.pTypeParameters_.MakeReadOnly();
        result.pModifierTokens_.MakeReadOnly();
        result.pModifiers_.MakeReadOnly();
        result.pParameters_.MakeReadOnly();
        MemberDeclaration returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MemberDeclaration) {
          return MergeFrom((MemberDeclaration) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MemberDeclaration other) {
        if (other == global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration.DefaultInstance) return this;
        if (other.HasKind) {
          Kind = other.Kind;
        }
        if (other.pConstraints_.Count != 0) {
          base.AddRange(other.pConstraints_, result.pConstraints_);
        }
        if (other.HasPIsExtensionMethod) {
          PIsExtensionMethod = other.PIsExtensionMethod;
        }
        if (other.pAttributes_.Count != 0) {
          base.AddRange(other.pAttributes_, result.pAttributes_);
        }
        if (other.pVariables_.Count != 0) {
          base.AddRange(other.pVariables_, result.pVariables_);
        }
        if (other.pTypeParameters_.Count != 0) {
          base.AddRange(other.pTypeParameters_, result.pTypeParameters_);
        }
        if (other.HasPSetter) {
          MergePSetter(other.PSetter);
        }
        if (other.HasPName) {
          PName = other.PName;
        }
        if (other.HasPBody) {
          MergePBody(other.PBody);
        }
        if (other.HasPAddAccessor) {
          MergePAddAccessor(other.PAddAccessor);
        }
        if (other.HasPGetter) {
          MergePGetter(other.PGetter);
        }
        if (other.HasPRemoveAccessor) {
          MergePRemoveAccessor(other.PRemoveAccessor);
        }
        if (other.pModifierTokens_.Count != 0) {
          base.AddRange(other.pModifierTokens_, result.pModifierTokens_);
        }
        if (other.pModifiers_.Count != 0) {
          base.AddRange(other.pModifiers_, result.pModifiers_);
        }
        if (other.HasPOperatorType) {
          POperatorType = other.POperatorType;
        }
        if (other.pParameters_.Count != 0) {
          base.AddRange(other.pParameters_, result.pParameters_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration.Types.MemberDeclarationKind), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong) rawValue);
              } else {
                Kind = (global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration.Types.MemberDeclarationKind) rawValue;
              }
              break;
            }
            case 18: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPConstraints(subBuilder.BuildPartial());
              break;
            }
            case 24: {
              PIsExtensionMethod = input.ReadBool();
              break;
            }
            case 34: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPAttributes(subBuilder.BuildPartial());
              break;
            }
            case 42: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPVariables(subBuilder.BuildPartial());
              break;
            }
            case 50: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPTypeParameters(subBuilder.BuildPartial());
              break;
            }
            case 58: {
              global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.CreateBuilder();
              if (HasPSetter) {
                subBuilder.MergeFrom(PSetter);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PSetter = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              PName = input.ReadString();
              break;
            }
            case 74: {
              global::Landman.Rascal.CSharp.Profobuf.Statement.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder();
              if (HasPBody) {
                subBuilder.MergeFrom(PBody);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PBody = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.CreateBuilder();
              if (HasPAddAccessor) {
                subBuilder.MergeFrom(PAddAccessor);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PAddAccessor = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.CreateBuilder();
              if (HasPGetter) {
                subBuilder.MergeFrom(PGetter);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PGetter = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.CreateBuilder();
              if (HasPRemoveAccessor) {
                subBuilder.MergeFrom(PRemoveAccessor);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PRemoveAccessor = subBuilder.BuildPartial();
              break;
            }
            case 106: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPModifierTokens(subBuilder.BuildPartial());
              break;
            }
            case 112: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.Modifiers), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(14, (ulong) rawValue);
              } else {
                AddPModifiers((global::Landman.Rascal.CSharp.Profobuf.Modifiers) rawValue);
              }
              break;
            }
            case 120: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.Operator), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(15, (ulong) rawValue);
              } else {
                POperatorType = (global::Landman.Rascal.CSharp.Profobuf.Operator) rawValue;
              }
              break;
            }
            case 130: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPParameters(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasKind {
       get { return result.HasKind; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration.Types.MemberDeclarationKind Kind {
        get { return result.Kind; }
        set { SetKind(value); }
      }
      public Builder SetKind(global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration.Types.MemberDeclarationKind value) {
        result.hasKind = true;
        result.kind_ = value;
        return this;
      }
      public Builder ClearKind() {
        result.hasKind = false;
        result.kind_ = global::Landman.Rascal.CSharp.Profobuf.MemberDeclaration.Types.MemberDeclarationKind.k_indexerDeclaration;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PConstraintsList {
        get { return result.pConstraints_; }
      }
      public int PConstraintsCount {
        get { return result.PConstraintsCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPConstraints(int index) {
        return result.GetPConstraints(index);
      }
      public Builder SetPConstraints(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pConstraints_[index] = value;
        return this;
      }
      public Builder SetPConstraints(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pConstraints_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPConstraints(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pConstraints_.Add(value);
        return this;
      }
      public Builder AddPConstraints(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pConstraints_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePConstraints(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pConstraints_);
        return this;
      }
      public Builder ClearPConstraints() {
        result.pConstraints_.Clear();
        return this;
      }
      
      public bool HasPIsExtensionMethod {
        get { return result.HasPIsExtensionMethod; }
      }
      public bool PIsExtensionMethod {
        get { return result.PIsExtensionMethod; }
        set { SetPIsExtensionMethod(value); }
      }
      public Builder SetPIsExtensionMethod(bool value) {
        result.hasPIsExtensionMethod = true;
        result.pIsExtensionMethod_ = value;
        return this;
      }
      public Builder ClearPIsExtensionMethod() {
        result.hasPIsExtensionMethod = false;
        result.pIsExtensionMethod_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PAttributesList {
        get { return result.pAttributes_; }
      }
      public int PAttributesCount {
        get { return result.PAttributesCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPAttributes(int index) {
        return result.GetPAttributes(index);
      }
      public Builder SetPAttributes(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pAttributes_[index] = value;
        return this;
      }
      public Builder SetPAttributes(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pAttributes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPAttributes(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pAttributes_.Add(value);
        return this;
      }
      public Builder AddPAttributes(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pAttributes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePAttributes(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pAttributes_);
        return this;
      }
      public Builder ClearPAttributes() {
        result.pAttributes_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PVariablesList {
        get { return result.pVariables_; }
      }
      public int PVariablesCount {
        get { return result.PVariablesCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPVariables(int index) {
        return result.GetPVariables(index);
      }
      public Builder SetPVariables(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pVariables_[index] = value;
        return this;
      }
      public Builder SetPVariables(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pVariables_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPVariables(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pVariables_.Add(value);
        return this;
      }
      public Builder AddPVariables(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pVariables_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePVariables(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pVariables_);
        return this;
      }
      public Builder ClearPVariables() {
        result.pVariables_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PTypeParametersList {
        get { return result.pTypeParameters_; }
      }
      public int PTypeParametersCount {
        get { return result.PTypeParametersCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPTypeParameters(int index) {
        return result.GetPTypeParameters(index);
      }
      public Builder SetPTypeParameters(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pTypeParameters_[index] = value;
        return this;
      }
      public Builder SetPTypeParameters(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pTypeParameters_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPTypeParameters(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pTypeParameters_.Add(value);
        return this;
      }
      public Builder AddPTypeParameters(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pTypeParameters_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePTypeParameters(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pTypeParameters_);
        return this;
      }
      public Builder ClearPTypeParameters() {
        result.pTypeParameters_.Clear();
        return this;
      }
      
      public bool HasPSetter {
       get { return result.HasPSetter; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AttributedNode PSetter {
        get { return result.PSetter; }
        set { SetPSetter(value); }
      }
      public Builder SetPSetter(global::Landman.Rascal.CSharp.Profobuf.AttributedNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPSetter = true;
        result.pSetter_ = value;
        return this;
      }
      public Builder SetPSetter(global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPSetter = true;
        result.pSetter_ = builderForValue.Build();
        return this;
      }
      public Builder MergePSetter(global::Landman.Rascal.CSharp.Profobuf.AttributedNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPSetter &&
            result.pSetter_ != global::Landman.Rascal.CSharp.Profobuf.AttributedNode.DefaultInstance) {
            result.pSetter_ = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.CreateBuilder(result.pSetter_).MergeFrom(value).BuildPartial();
        } else {
          result.pSetter_ = value;
        }
        result.hasPSetter = true;
        return this;
      }
      public Builder ClearPSetter() {
        result.hasPSetter = false;
        result.pSetter_ = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.DefaultInstance;
        return this;
      }
      
      public bool HasPName {
        get { return result.HasPName; }
      }
      public string PName {
        get { return result.PName; }
        set { SetPName(value); }
      }
      public Builder SetPName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPName = true;
        result.pName_ = value;
        return this;
      }
      public Builder ClearPName() {
        result.hasPName = false;
        result.pName_ = "";
        return this;
      }
      
      public bool HasPBody {
       get { return result.HasPBody; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Statement PBody {
        get { return result.PBody; }
        set { SetPBody(value); }
      }
      public Builder SetPBody(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPBody = true;
        result.pBody_ = value;
        return this;
      }
      public Builder SetPBody(global::Landman.Rascal.CSharp.Profobuf.Statement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPBody = true;
        result.pBody_ = builderForValue.Build();
        return this;
      }
      public Builder MergePBody(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPBody &&
            result.pBody_ != global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance) {
            result.pBody_ = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder(result.pBody_).MergeFrom(value).BuildPartial();
        } else {
          result.pBody_ = value;
        }
        result.hasPBody = true;
        return this;
      }
      public Builder ClearPBody() {
        result.hasPBody = false;
        result.pBody_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
        return this;
      }
      
      public bool HasPAddAccessor {
       get { return result.HasPAddAccessor; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AttributedNode PAddAccessor {
        get { return result.PAddAccessor; }
        set { SetPAddAccessor(value); }
      }
      public Builder SetPAddAccessor(global::Landman.Rascal.CSharp.Profobuf.AttributedNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPAddAccessor = true;
        result.pAddAccessor_ = value;
        return this;
      }
      public Builder SetPAddAccessor(global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPAddAccessor = true;
        result.pAddAccessor_ = builderForValue.Build();
        return this;
      }
      public Builder MergePAddAccessor(global::Landman.Rascal.CSharp.Profobuf.AttributedNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPAddAccessor &&
            result.pAddAccessor_ != global::Landman.Rascal.CSharp.Profobuf.AttributedNode.DefaultInstance) {
            result.pAddAccessor_ = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.CreateBuilder(result.pAddAccessor_).MergeFrom(value).BuildPartial();
        } else {
          result.pAddAccessor_ = value;
        }
        result.hasPAddAccessor = true;
        return this;
      }
      public Builder ClearPAddAccessor() {
        result.hasPAddAccessor = false;
        result.pAddAccessor_ = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.DefaultInstance;
        return this;
      }
      
      public bool HasPGetter {
       get { return result.HasPGetter; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AttributedNode PGetter {
        get { return result.PGetter; }
        set { SetPGetter(value); }
      }
      public Builder SetPGetter(global::Landman.Rascal.CSharp.Profobuf.AttributedNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPGetter = true;
        result.pGetter_ = value;
        return this;
      }
      public Builder SetPGetter(global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPGetter = true;
        result.pGetter_ = builderForValue.Build();
        return this;
      }
      public Builder MergePGetter(global::Landman.Rascal.CSharp.Profobuf.AttributedNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPGetter &&
            result.pGetter_ != global::Landman.Rascal.CSharp.Profobuf.AttributedNode.DefaultInstance) {
            result.pGetter_ = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.CreateBuilder(result.pGetter_).MergeFrom(value).BuildPartial();
        } else {
          result.pGetter_ = value;
        }
        result.hasPGetter = true;
        return this;
      }
      public Builder ClearPGetter() {
        result.hasPGetter = false;
        result.pGetter_ = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.DefaultInstance;
        return this;
      }
      
      public bool HasPRemoveAccessor {
       get { return result.HasPRemoveAccessor; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AttributedNode PRemoveAccessor {
        get { return result.PRemoveAccessor; }
        set { SetPRemoveAccessor(value); }
      }
      public Builder SetPRemoveAccessor(global::Landman.Rascal.CSharp.Profobuf.AttributedNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPRemoveAccessor = true;
        result.pRemoveAccessor_ = value;
        return this;
      }
      public Builder SetPRemoveAccessor(global::Landman.Rascal.CSharp.Profobuf.AttributedNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPRemoveAccessor = true;
        result.pRemoveAccessor_ = builderForValue.Build();
        return this;
      }
      public Builder MergePRemoveAccessor(global::Landman.Rascal.CSharp.Profobuf.AttributedNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPRemoveAccessor &&
            result.pRemoveAccessor_ != global::Landman.Rascal.CSharp.Profobuf.AttributedNode.DefaultInstance) {
            result.pRemoveAccessor_ = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.CreateBuilder(result.pRemoveAccessor_).MergeFrom(value).BuildPartial();
        } else {
          result.pRemoveAccessor_ = value;
        }
        result.hasPRemoveAccessor = true;
        return this;
      }
      public Builder ClearPRemoveAccessor() {
        result.hasPRemoveAccessor = false;
        result.pRemoveAccessor_ = global::Landman.Rascal.CSharp.Profobuf.AttributedNode.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PModifierTokensList {
        get { return result.pModifierTokens_; }
      }
      public int PModifierTokensCount {
        get { return result.PModifierTokensCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPModifierTokens(int index) {
        return result.GetPModifierTokens(index);
      }
      public Builder SetPModifierTokens(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pModifierTokens_[index] = value;
        return this;
      }
      public Builder SetPModifierTokens(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pModifierTokens_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPModifierTokens(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pModifierTokens_.Add(value);
        return this;
      }
      public Builder AddPModifierTokens(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pModifierTokens_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePModifierTokens(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pModifierTokens_);
        return this;
      }
      public Builder ClearPModifierTokens() {
        result.pModifierTokens_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.Modifiers> PModifiersList {
        get { return result.pModifiers_; }
      }
      public int PModifiersCount {
        get { return result.PModifiersCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Modifiers GetPModifiers(int index) {
        return result.GetPModifiers(index);
      }
      public Builder SetPModifiers(int index, global::Landman.Rascal.CSharp.Profobuf.Modifiers value) {
        result.pModifiers_[index] = value;
        return this;
      }
      public Builder AddPModifiers(global::Landman.Rascal.CSharp.Profobuf.Modifiers value) {
        result.pModifiers_.Add(value);
        return this;
      }
      public Builder AddRangePModifiers(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.Modifiers> values) {
        base.AddRange(values, result.pModifiers_);
        return this;
      }
      public Builder ClearPModifiers() {
        result.pModifiers_.Clear();
        return this;
      }
      
      public bool HasPOperatorType {
       get { return result.HasPOperatorType; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Operator POperatorType {
        get { return result.POperatorType; }
        set { SetPOperatorType(value); }
      }
      public Builder SetPOperatorType(global::Landman.Rascal.CSharp.Profobuf.Operator value) {
        result.hasPOperatorType = true;
        result.pOperatorType_ = value;
        return this;
      }
      public Builder ClearPOperatorType() {
        result.hasPOperatorType = false;
        result.pOperatorType_ = global::Landman.Rascal.CSharp.Profobuf.Operator.e_operatorImplicit;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PParametersList {
        get { return result.pParameters_; }
      }
      public int PParametersCount {
        get { return result.PParametersCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPParameters(int index) {
        return result.GetPParameters(index);
      }
      public Builder SetPParameters(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pParameters_[index] = value;
        return this;
      }
      public Builder SetPParameters(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pParameters_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPParameters(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pParameters_.Add(value);
        return this;
      }
      public Builder AddPParameters(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pParameters_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePParameters(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pParameters_);
        return this;
      }
      public Builder ClearPParameters() {
        result.pParameters_.Clear();
        return this;
      }
    }
    static MemberDeclaration() {
      object.ReferenceEquals(global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.Descriptor, null);
    }
  }
  
  public sealed partial class AstType : pb::GeneratedMessage<AstType, AstType.Builder> {
    private static readonly AstType defaultInstance = new Builder().BuildPartial();
    public static AstType DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AstType DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override AstType ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.internal__static_Landman_Rascal_CSharp_Profobuf_AstType__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AstType, AstType.Builder> InternalFieldAccessors {
      get { return global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.internal__static_Landman_Rascal_CSharp_Profobuf_AstType__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum AstTypeKind {
        k_simpleType = 0,
        k_composedType = 1,
        k_typePlaceholder = 2,
        k_memberType = 3,
        k_primitiveType = 4,
      }
      
    }
    #endregion
    
    public const int KindFieldNumber = 1;
    private bool hasKind;
    private global::Landman.Rascal.CSharp.Profobuf.AstType.Types.AstTypeKind kind_ = global::Landman.Rascal.CSharp.Profobuf.AstType.Types.AstTypeKind.k_simpleType;
    public bool HasKind {
      get { return hasKind; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstType.Types.AstTypeKind Kind {
      get { return kind_; }
    }
    
    public const int PIsDoubleColonFieldNumber = 2;
    private bool hasPIsDoubleColon;
    private bool pIsDoubleColon_ = false;
    public bool HasPIsDoubleColon {
      get { return hasPIsDoubleColon; }
    }
    public bool PIsDoubleColon {
      get { return pIsDoubleColon_; }
    }
    
    public const int PHasNullableSpecifierFieldNumber = 3;
    private bool hasPHasNullableSpecifier;
    private bool pHasNullableSpecifier_ = false;
    public bool HasPHasNullableSpecifier {
      get { return hasPHasNullableSpecifier; }
    }
    public bool PHasNullableSpecifier {
      get { return pHasNullableSpecifier_; }
    }
    
    public const int PKeywordFieldNumber = 4;
    private bool hasPKeyword;
    private string pKeyword_ = "";
    public bool HasPKeyword {
      get { return hasPKeyword; }
    }
    public string PKeyword {
      get { return pKeyword_; }
    }
    
    public const int PIdentifierFieldNumber = 5;
    private bool hasPIdentifier;
    private string pIdentifier_ = "";
    public bool HasPIdentifier {
      get { return hasPIdentifier; }
    }
    public string PIdentifier {
      get { return pIdentifier_; }
    }
    
    public const int PArraySpecifiersFieldNumber = 6;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pArraySpecifiers_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PArraySpecifiersList {
      get { return pArraySpecifiers_; }
    }
    public int PArraySpecifiersCount {
      get { return pArraySpecifiers_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPArraySpecifiers(int index) {
      return pArraySpecifiers_[index];
    }
    
    public const int PMemberNameFieldNumber = 7;
    private bool hasPMemberName;
    private string pMemberName_ = "";
    public bool HasPMemberName {
      get { return hasPMemberName; }
    }
    public string PMemberName {
      get { return pMemberName_; }
    }
    
    public const int PPointerRankFieldNumber = 8;
    private bool hasPPointerRank;
    private int pPointerRank_ = 0;
    public bool HasPPointerRank {
      get { return hasPPointerRank; }
    }
    public int PPointerRank {
      get { return pPointerRank_; }
    }
    
    public const int PTypeArgumentsFieldNumber = 9;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstType> pTypeArguments_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstType>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstType> PTypeArgumentsList {
      get { return pTypeArguments_; }
    }
    public int PTypeArgumentsCount {
      get { return pTypeArguments_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstType GetPTypeArguments(int index) {
      return pTypeArguments_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKind) return false;
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PArraySpecifiersList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstType element in PTypeArgumentsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasKind) {
        output.WriteEnum(1, (int) Kind);
      }
      if (HasPIsDoubleColon) {
        output.WriteBool(2, PIsDoubleColon);
      }
      if (HasPHasNullableSpecifier) {
        output.WriteBool(3, PHasNullableSpecifier);
      }
      if (HasPKeyword) {
        output.WriteString(4, PKeyword);
      }
      if (HasPIdentifier) {
        output.WriteString(5, PIdentifier);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PArraySpecifiersList) {
        output.WriteMessage(6, element);
      }
      if (HasPMemberName) {
        output.WriteString(7, PMemberName);
      }
      if (HasPPointerRank) {
        output.WriteInt32(8, PPointerRank);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstType element in PTypeArgumentsList) {
        output.WriteMessage(9, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasKind) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Kind);
        }
        if (HasPIsDoubleColon) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, PIsDoubleColon);
        }
        if (HasPHasNullableSpecifier) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, PHasNullableSpecifier);
        }
        if (HasPKeyword) {
          size += pb::CodedOutputStream.ComputeStringSize(4, PKeyword);
        }
        if (HasPIdentifier) {
          size += pb::CodedOutputStream.ComputeStringSize(5, PIdentifier);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PArraySpecifiersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        if (HasPMemberName) {
          size += pb::CodedOutputStream.ComputeStringSize(7, PMemberName);
        }
        if (HasPPointerRank) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, PPointerRank);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstType element in PTypeArgumentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AstType ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AstType ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AstType ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AstType ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AstType ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AstType ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AstType ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AstType ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AstType ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AstType ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AstType prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<AstType, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      AstType result = new AstType();
      
      protected override AstType MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new AstType();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Landman.Rascal.CSharp.Profobuf.AstType.Descriptor; }
      }
      
      public override AstType DefaultInstanceForType {
        get { return global::Landman.Rascal.CSharp.Profobuf.AstType.DefaultInstance; }
      }
      
      public override AstType BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.pArraySpecifiers_.MakeReadOnly();
        result.pTypeArguments_.MakeReadOnly();
        AstType returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AstType) {
          return MergeFrom((AstType) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AstType other) {
        if (other == global::Landman.Rascal.CSharp.Profobuf.AstType.DefaultInstance) return this;
        if (other.HasKind) {
          Kind = other.Kind;
        }
        if (other.HasPIsDoubleColon) {
          PIsDoubleColon = other.PIsDoubleColon;
        }
        if (other.HasPHasNullableSpecifier) {
          PHasNullableSpecifier = other.PHasNullableSpecifier;
        }
        if (other.HasPKeyword) {
          PKeyword = other.PKeyword;
        }
        if (other.HasPIdentifier) {
          PIdentifier = other.PIdentifier;
        }
        if (other.pArraySpecifiers_.Count != 0) {
          base.AddRange(other.pArraySpecifiers_, result.pArraySpecifiers_);
        }
        if (other.HasPMemberName) {
          PMemberName = other.PMemberName;
        }
        if (other.HasPPointerRank) {
          PPointerRank = other.PPointerRank;
        }
        if (other.pTypeArguments_.Count != 0) {
          base.AddRange(other.pTypeArguments_, result.pTypeArguments_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.AstType.Types.AstTypeKind), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong) rawValue);
              } else {
                Kind = (global::Landman.Rascal.CSharp.Profobuf.AstType.Types.AstTypeKind) rawValue;
              }
              break;
            }
            case 16: {
              PIsDoubleColon = input.ReadBool();
              break;
            }
            case 24: {
              PHasNullableSpecifier = input.ReadBool();
              break;
            }
            case 34: {
              PKeyword = input.ReadString();
              break;
            }
            case 42: {
              PIdentifier = input.ReadString();
              break;
            }
            case 50: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPArraySpecifiers(subBuilder.BuildPartial());
              break;
            }
            case 58: {
              PMemberName = input.ReadString();
              break;
            }
            case 64: {
              PPointerRank = input.ReadInt32();
              break;
            }
            case 74: {
              global::Landman.Rascal.CSharp.Profobuf.AstType.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstType.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPTypeArguments(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasKind {
       get { return result.HasKind; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstType.Types.AstTypeKind Kind {
        get { return result.Kind; }
        set { SetKind(value); }
      }
      public Builder SetKind(global::Landman.Rascal.CSharp.Profobuf.AstType.Types.AstTypeKind value) {
        result.hasKind = true;
        result.kind_ = value;
        return this;
      }
      public Builder ClearKind() {
        result.hasKind = false;
        result.kind_ = global::Landman.Rascal.CSharp.Profobuf.AstType.Types.AstTypeKind.k_simpleType;
        return this;
      }
      
      public bool HasPIsDoubleColon {
        get { return result.HasPIsDoubleColon; }
      }
      public bool PIsDoubleColon {
        get { return result.PIsDoubleColon; }
        set { SetPIsDoubleColon(value); }
      }
      public Builder SetPIsDoubleColon(bool value) {
        result.hasPIsDoubleColon = true;
        result.pIsDoubleColon_ = value;
        return this;
      }
      public Builder ClearPIsDoubleColon() {
        result.hasPIsDoubleColon = false;
        result.pIsDoubleColon_ = false;
        return this;
      }
      
      public bool HasPHasNullableSpecifier {
        get { return result.HasPHasNullableSpecifier; }
      }
      public bool PHasNullableSpecifier {
        get { return result.PHasNullableSpecifier; }
        set { SetPHasNullableSpecifier(value); }
      }
      public Builder SetPHasNullableSpecifier(bool value) {
        result.hasPHasNullableSpecifier = true;
        result.pHasNullableSpecifier_ = value;
        return this;
      }
      public Builder ClearPHasNullableSpecifier() {
        result.hasPHasNullableSpecifier = false;
        result.pHasNullableSpecifier_ = false;
        return this;
      }
      
      public bool HasPKeyword {
        get { return result.HasPKeyword; }
      }
      public string PKeyword {
        get { return result.PKeyword; }
        set { SetPKeyword(value); }
      }
      public Builder SetPKeyword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPKeyword = true;
        result.pKeyword_ = value;
        return this;
      }
      public Builder ClearPKeyword() {
        result.hasPKeyword = false;
        result.pKeyword_ = "";
        return this;
      }
      
      public bool HasPIdentifier {
        get { return result.HasPIdentifier; }
      }
      public string PIdentifier {
        get { return result.PIdentifier; }
        set { SetPIdentifier(value); }
      }
      public Builder SetPIdentifier(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPIdentifier = true;
        result.pIdentifier_ = value;
        return this;
      }
      public Builder ClearPIdentifier() {
        result.hasPIdentifier = false;
        result.pIdentifier_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PArraySpecifiersList {
        get { return result.pArraySpecifiers_; }
      }
      public int PArraySpecifiersCount {
        get { return result.PArraySpecifiersCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPArraySpecifiers(int index) {
        return result.GetPArraySpecifiers(index);
      }
      public Builder SetPArraySpecifiers(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pArraySpecifiers_[index] = value;
        return this;
      }
      public Builder SetPArraySpecifiers(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pArraySpecifiers_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPArraySpecifiers(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pArraySpecifiers_.Add(value);
        return this;
      }
      public Builder AddPArraySpecifiers(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pArraySpecifiers_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePArraySpecifiers(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pArraySpecifiers_);
        return this;
      }
      public Builder ClearPArraySpecifiers() {
        result.pArraySpecifiers_.Clear();
        return this;
      }
      
      public bool HasPMemberName {
        get { return result.HasPMemberName; }
      }
      public string PMemberName {
        get { return result.PMemberName; }
        set { SetPMemberName(value); }
      }
      public Builder SetPMemberName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPMemberName = true;
        result.pMemberName_ = value;
        return this;
      }
      public Builder ClearPMemberName() {
        result.hasPMemberName = false;
        result.pMemberName_ = "";
        return this;
      }
      
      public bool HasPPointerRank {
        get { return result.HasPPointerRank; }
      }
      public int PPointerRank {
        get { return result.PPointerRank; }
        set { SetPPointerRank(value); }
      }
      public Builder SetPPointerRank(int value) {
        result.hasPPointerRank = true;
        result.pPointerRank_ = value;
        return this;
      }
      public Builder ClearPPointerRank() {
        result.hasPPointerRank = false;
        result.pPointerRank_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstType> PTypeArgumentsList {
        get { return result.pTypeArguments_; }
      }
      public int PTypeArgumentsCount {
        get { return result.PTypeArgumentsCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstType GetPTypeArguments(int index) {
        return result.GetPTypeArguments(index);
      }
      public Builder SetPTypeArguments(int index, global::Landman.Rascal.CSharp.Profobuf.AstType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pTypeArguments_[index] = value;
        return this;
      }
      public Builder SetPTypeArguments(int index, global::Landman.Rascal.CSharp.Profobuf.AstType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pTypeArguments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPTypeArguments(global::Landman.Rascal.CSharp.Profobuf.AstType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pTypeArguments_.Add(value);
        return this;
      }
      public Builder AddPTypeArguments(global::Landman.Rascal.CSharp.Profobuf.AstType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pTypeArguments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePTypeArguments(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstType> values) {
        base.AddRange(values, result.pTypeArguments_);
        return this;
      }
      public Builder ClearPTypeArguments() {
        result.pTypeArguments_.Clear();
        return this;
      }
    }
    static AstType() {
      object.ReferenceEquals(global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.Descriptor, null);
    }
  }
  
  public sealed partial class Statement : pb::GeneratedMessage<Statement, Statement.Builder> {
    private static readonly Statement defaultInstance = new Builder().BuildPartial();
    public static Statement DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Statement DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Statement ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.internal__static_Landman_Rascal_CSharp_Profobuf_Statement__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Statement, Statement.Builder> InternalFieldAccessors {
      get { return global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.internal__static_Landman_Rascal_CSharp_Profobuf_Statement__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum StatementKind {
        k_returnStatement = 0,
        k_whileStatement = 1,
        k_yieldBreakStatement = 2,
        k_blockStatementPlaceholder = 3,
        k_gotoCaseStatement = 4,
        k_fixedStatement = 5,
        k_labelStatement = 6,
        k_switchStatement = 7,
        k_ifElseStatement = 8,
        k_expressionStatement = 9,
        k_gotoDefaultStatement = 10,
        k_variableDeclarationStatement = 11,
        k_breakStatement = 12,
        k_tryCatchStatement = 13,
        k_gotoStatement = 14,
        k_usingStatement = 15,
        k_throwStatement = 16,
        k_unsafeStatement = 17,
        k_doWhileStatement = 18,
        k_continueStatement = 19,
        k_checkedStatement = 20,
        k_statementPlaceholder = 21,
        k_forStatement = 22,
        k_foreachStatement = 23,
        k_lockStatement = 24,
        k_blockStatement = 25,
        k_emptyStatement = 26,
        k_yieldStatement = 27,
        k_uncheckedStatement = 28,
      }
      
    }
    #endregion
    
    public const int KindFieldNumber = 1;
    private bool hasKind;
    private global::Landman.Rascal.CSharp.Profobuf.Statement.Types.StatementKind kind_ = global::Landman.Rascal.CSharp.Profobuf.Statement.Types.StatementKind.k_returnStatement;
    public bool HasKind {
      get { return hasKind; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Statement.Types.StatementKind Kind {
      get { return kind_; }
    }
    
    public const int PExpressionFieldNumber = 2;
    private bool hasPExpression;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPExpression {
      get { return hasPExpression; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PExpression {
      get { return pExpression_; }
    }
    
    public const int PVariablesFieldNumber = 3;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pVariables_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PVariablesList {
      get { return pVariables_; }
    }
    public int PVariablesCount {
      get { return pVariables_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPVariables(int index) {
      return pVariables_[index];
    }
    
    public const int PIteratorsFieldNumber = 4;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Statement> pIterators_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Statement>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.Statement> PIteratorsList {
      get { return pIterators_; }
    }
    public int PIteratorsCount {
      get { return pIterators_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Statement GetPIterators(int index) {
      return pIterators_[index];
    }
    
    public const int PStatementsFieldNumber = 5;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Statement> pStatements_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Statement>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.Statement> PStatementsList {
      get { return pStatements_; }
    }
    public int PStatementsCount {
      get { return pStatements_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Statement GetPStatements(int index) {
      return pStatements_[index];
    }
    
    public const int PConditionFieldNumber = 6;
    private bool hasPCondition;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pCondition_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPCondition {
      get { return hasPCondition; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PCondition {
      get { return pCondition_; }
    }
    
    public const int PEmbeddedStatementFieldNumber = 7;
    private bool hasPEmbeddedStatement;
    private global::Landman.Rascal.CSharp.Profobuf.Statement pEmbeddedStatement_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
    public bool HasPEmbeddedStatement {
      get { return hasPEmbeddedStatement; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Statement PEmbeddedStatement {
      get { return pEmbeddedStatement_; }
    }
    
    public const int PBodyFieldNumber = 8;
    private bool hasPBody;
    private global::Landman.Rascal.CSharp.Profobuf.Statement pBody_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
    public bool HasPBody {
      get { return hasPBody; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Statement PBody {
      get { return pBody_; }
    }
    
    public const int PInExpressionFieldNumber = 9;
    private bool hasPInExpression;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pInExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPInExpression {
      get { return hasPInExpression; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PInExpression {
      get { return pInExpression_; }
    }
    
    public const int PTrueStatementFieldNumber = 10;
    private bool hasPTrueStatement;
    private global::Landman.Rascal.CSharp.Profobuf.Statement pTrueStatement_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
    public bool HasPTrueStatement {
      get { return hasPTrueStatement; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Statement PTrueStatement {
      get { return pTrueStatement_; }
    }
    
    public const int PResourceAcquisitionFieldNumber = 11;
    private bool hasPResourceAcquisition;
    private global::Landman.Rascal.CSharp.Profobuf.AstNode pResourceAcquisition_ = global::Landman.Rascal.CSharp.Profobuf.AstNode.DefaultInstance;
    public bool HasPResourceAcquisition {
      get { return hasPResourceAcquisition; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode PResourceAcquisition {
      get { return pResourceAcquisition_; }
    }
    
    public const int PFalseStatementFieldNumber = 12;
    private bool hasPFalseStatement;
    private global::Landman.Rascal.CSharp.Profobuf.Statement pFalseStatement_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
    public bool HasPFalseStatement {
      get { return hasPFalseStatement; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Statement PFalseStatement {
      get { return pFalseStatement_; }
    }
    
    public const int PLabelFieldNumber = 13;
    private bool hasPLabel;
    private string pLabel_ = "";
    public bool HasPLabel {
      get { return hasPLabel; }
    }
    public string PLabel {
      get { return pLabel_; }
    }
    
    public const int PFinallyBlockFieldNumber = 14;
    private bool hasPFinallyBlock;
    private global::Landman.Rascal.CSharp.Profobuf.Statement pFinallyBlock_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
    public bool HasPFinallyBlock {
      get { return hasPFinallyBlock; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Statement PFinallyBlock {
      get { return pFinallyBlock_; }
    }
    
    public const int PTryBlockFieldNumber = 15;
    private bool hasPTryBlock;
    private global::Landman.Rascal.CSharp.Profobuf.Statement pTryBlock_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
    public bool HasPTryBlock {
      get { return hasPTryBlock; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Statement PTryBlock {
      get { return pTryBlock_; }
    }
    
    public const int PLabelExpressionFieldNumber = 16;
    private bool hasPLabelExpression;
    private global::Landman.Rascal.CSharp.Profobuf.Expression pLabelExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
    public bool HasPLabelExpression {
      get { return hasPLabelExpression; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Expression PLabelExpression {
      get { return pLabelExpression_; }
    }
    
    public const int PSwitchSectionsFieldNumber = 17;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pSwitchSections_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PSwitchSectionsList {
      get { return pSwitchSections_; }
    }
    public int PSwitchSectionsCount {
      get { return pSwitchSections_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPSwitchSections(int index) {
      return pSwitchSections_[index];
    }
    
    public const int PInitializersFieldNumber = 18;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Statement> pInitializers_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Statement>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.Statement> PInitializersList {
      get { return pInitializers_; }
    }
    public int PInitializersCount {
      get { return pInitializers_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Statement GetPInitializers(int index) {
      return pInitializers_[index];
    }
    
    public const int PVariableNameFieldNumber = 19;
    private bool hasPVariableName;
    private string pVariableName_ = "";
    public bool HasPVariableName {
      get { return hasPVariableName; }
    }
    public string PVariableName {
      get { return pVariableName_; }
    }
    
    public const int PModifiersFieldNumber = 20;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Modifiers> pModifiers_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.Modifiers>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.Modifiers> PModifiersList {
      get { return pbc::Lists.AsReadOnly(pModifiers_); }
    }
    public int PModifiersCount {
      get { return pModifiers_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.Modifiers GetPModifiers(int index) {
      return pModifiers_[index];
    }
    
    public const int PCatchClausesFieldNumber = 21;
    private pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> pCatchClauses_ = new pbc::PopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode>();
    public scg::IList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PCatchClausesList {
      get { return pCatchClauses_; }
    }
    public int PCatchClausesCount {
      get { return pCatchClauses_.Count; }
    }
    public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPCatchClauses(int index) {
      return pCatchClauses_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKind) return false;
        if (HasPExpression) {
          if (!PExpression.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PVariablesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.Statement element in PIteratorsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.Statement element in PStatementsList) {
          if (!element.IsInitialized) return false;
        }
        if (HasPCondition) {
          if (!PCondition.IsInitialized) return false;
        }
        if (HasPEmbeddedStatement) {
          if (!PEmbeddedStatement.IsInitialized) return false;
        }
        if (HasPBody) {
          if (!PBody.IsInitialized) return false;
        }
        if (HasPInExpression) {
          if (!PInExpression.IsInitialized) return false;
        }
        if (HasPTrueStatement) {
          if (!PTrueStatement.IsInitialized) return false;
        }
        if (HasPResourceAcquisition) {
          if (!PResourceAcquisition.IsInitialized) return false;
        }
        if (HasPFalseStatement) {
          if (!PFalseStatement.IsInitialized) return false;
        }
        if (HasPFinallyBlock) {
          if (!PFinallyBlock.IsInitialized) return false;
        }
        if (HasPTryBlock) {
          if (!PTryBlock.IsInitialized) return false;
        }
        if (HasPLabelExpression) {
          if (!PLabelExpression.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PSwitchSectionsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.Statement element in PInitializersList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PCatchClausesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasKind) {
        output.WriteEnum(1, (int) Kind);
      }
      if (HasPExpression) {
        output.WriteMessage(2, PExpression);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PVariablesList) {
        output.WriteMessage(3, element);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.Statement element in PIteratorsList) {
        output.WriteMessage(4, element);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.Statement element in PStatementsList) {
        output.WriteMessage(5, element);
      }
      if (HasPCondition) {
        output.WriteMessage(6, PCondition);
      }
      if (HasPEmbeddedStatement) {
        output.WriteMessage(7, PEmbeddedStatement);
      }
      if (HasPBody) {
        output.WriteMessage(8, PBody);
      }
      if (HasPInExpression) {
        output.WriteMessage(9, PInExpression);
      }
      if (HasPTrueStatement) {
        output.WriteMessage(10, PTrueStatement);
      }
      if (HasPResourceAcquisition) {
        output.WriteMessage(11, PResourceAcquisition);
      }
      if (HasPFalseStatement) {
        output.WriteMessage(12, PFalseStatement);
      }
      if (HasPLabel) {
        output.WriteString(13, PLabel);
      }
      if (HasPFinallyBlock) {
        output.WriteMessage(14, PFinallyBlock);
      }
      if (HasPTryBlock) {
        output.WriteMessage(15, PTryBlock);
      }
      if (HasPLabelExpression) {
        output.WriteMessage(16, PLabelExpression);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PSwitchSectionsList) {
        output.WriteMessage(17, element);
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.Statement element in PInitializersList) {
        output.WriteMessage(18, element);
      }
      if (HasPVariableName) {
        output.WriteString(19, PVariableName);
      }
      if (pModifiers_.Count > 0) {
        foreach (int element in pModifiers_) {
          output.WriteEnum(20, element);
        }
      }
      foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PCatchClausesList) {
        output.WriteMessage(21, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasKind) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Kind);
        }
        if (HasPExpression) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, PExpression);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PVariablesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.Statement element in PIteratorsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.Statement element in PStatementsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        if (HasPCondition) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, PCondition);
        }
        if (HasPEmbeddedStatement) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, PEmbeddedStatement);
        }
        if (HasPBody) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, PBody);
        }
        if (HasPInExpression) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, PInExpression);
        }
        if (HasPTrueStatement) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, PTrueStatement);
        }
        if (HasPResourceAcquisition) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, PResourceAcquisition);
        }
        if (HasPFalseStatement) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, PFalseStatement);
        }
        if (HasPLabel) {
          size += pb::CodedOutputStream.ComputeStringSize(13, PLabel);
        }
        if (HasPFinallyBlock) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, PFinallyBlock);
        }
        if (HasPTryBlock) {
          size += pb::CodedOutputStream.ComputeMessageSize(15, PTryBlock);
        }
        if (HasPLabelExpression) {
          size += pb::CodedOutputStream.ComputeMessageSize(16, PLabelExpression);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PSwitchSectionsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(17, element);
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.Statement element in PInitializersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(18, element);
        }
        if (HasPVariableName) {
          size += pb::CodedOutputStream.ComputeStringSize(19, PVariableName);
        }
        {
          int dataSize = 0;
          if (pModifiers_.Count > 0) {
            foreach (global::Landman.Rascal.CSharp.Profobuf.Modifiers element in pModifiers_) {
              dataSize += pb::CodedOutputStream.ComputeEnumSizeNoTag((int) element);
            }
            size += dataSize;
            size += 2 * pModifiers_.Count;
          }
        }
        foreach (global::Landman.Rascal.CSharp.Profobuf.AstNode element in PCatchClausesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(21, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Statement ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Statement ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Statement ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Statement ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Statement ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Statement ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Statement ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Statement ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Statement ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Statement ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Statement prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Statement, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Statement result = new Statement();
      
      protected override Statement MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Statement();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Landman.Rascal.CSharp.Profobuf.Statement.Descriptor; }
      }
      
      public override Statement DefaultInstanceForType {
        get { return global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance; }
      }
      
      public override Statement BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.pVariables_.MakeReadOnly();
        result.pIterators_.MakeReadOnly();
        result.pStatements_.MakeReadOnly();
        result.pSwitchSections_.MakeReadOnly();
        result.pInitializers_.MakeReadOnly();
        result.pModifiers_.MakeReadOnly();
        result.pCatchClauses_.MakeReadOnly();
        Statement returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Statement) {
          return MergeFrom((Statement) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Statement other) {
        if (other == global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance) return this;
        if (other.HasKind) {
          Kind = other.Kind;
        }
        if (other.HasPExpression) {
          MergePExpression(other.PExpression);
        }
        if (other.pVariables_.Count != 0) {
          base.AddRange(other.pVariables_, result.pVariables_);
        }
        if (other.pIterators_.Count != 0) {
          base.AddRange(other.pIterators_, result.pIterators_);
        }
        if (other.pStatements_.Count != 0) {
          base.AddRange(other.pStatements_, result.pStatements_);
        }
        if (other.HasPCondition) {
          MergePCondition(other.PCondition);
        }
        if (other.HasPEmbeddedStatement) {
          MergePEmbeddedStatement(other.PEmbeddedStatement);
        }
        if (other.HasPBody) {
          MergePBody(other.PBody);
        }
        if (other.HasPInExpression) {
          MergePInExpression(other.PInExpression);
        }
        if (other.HasPTrueStatement) {
          MergePTrueStatement(other.PTrueStatement);
        }
        if (other.HasPResourceAcquisition) {
          MergePResourceAcquisition(other.PResourceAcquisition);
        }
        if (other.HasPFalseStatement) {
          MergePFalseStatement(other.PFalseStatement);
        }
        if (other.HasPLabel) {
          PLabel = other.PLabel;
        }
        if (other.HasPFinallyBlock) {
          MergePFinallyBlock(other.PFinallyBlock);
        }
        if (other.HasPTryBlock) {
          MergePTryBlock(other.PTryBlock);
        }
        if (other.HasPLabelExpression) {
          MergePLabelExpression(other.PLabelExpression);
        }
        if (other.pSwitchSections_.Count != 0) {
          base.AddRange(other.pSwitchSections_, result.pSwitchSections_);
        }
        if (other.pInitializers_.Count != 0) {
          base.AddRange(other.pInitializers_, result.pInitializers_);
        }
        if (other.HasPVariableName) {
          PVariableName = other.PVariableName;
        }
        if (other.pModifiers_.Count != 0) {
          base.AddRange(other.pModifiers_, result.pModifiers_);
        }
        if (other.pCatchClauses_.Count != 0) {
          base.AddRange(other.pCatchClauses_, result.pCatchClauses_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.Statement.Types.StatementKind), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong) rawValue);
              } else {
                Kind = (global::Landman.Rascal.CSharp.Profobuf.Statement.Types.StatementKind) rawValue;
              }
              break;
            }
            case 18: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPExpression) {
                subBuilder.MergeFrom(PExpression);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PExpression = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPVariables(subBuilder.BuildPartial());
              break;
            }
            case 34: {
              global::Landman.Rascal.CSharp.Profobuf.Statement.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPIterators(subBuilder.BuildPartial());
              break;
            }
            case 42: {
              global::Landman.Rascal.CSharp.Profobuf.Statement.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPStatements(subBuilder.BuildPartial());
              break;
            }
            case 50: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPCondition) {
                subBuilder.MergeFrom(PCondition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PCondition = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::Landman.Rascal.CSharp.Profobuf.Statement.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder();
              if (HasPEmbeddedStatement) {
                subBuilder.MergeFrom(PEmbeddedStatement);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PEmbeddedStatement = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::Landman.Rascal.CSharp.Profobuf.Statement.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder();
              if (HasPBody) {
                subBuilder.MergeFrom(PBody);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PBody = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPInExpression) {
                subBuilder.MergeFrom(PInExpression);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PInExpression = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::Landman.Rascal.CSharp.Profobuf.Statement.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder();
              if (HasPTrueStatement) {
                subBuilder.MergeFrom(PTrueStatement);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PTrueStatement = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              if (HasPResourceAcquisition) {
                subBuilder.MergeFrom(PResourceAcquisition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PResourceAcquisition = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              global::Landman.Rascal.CSharp.Profobuf.Statement.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder();
              if (HasPFalseStatement) {
                subBuilder.MergeFrom(PFalseStatement);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PFalseStatement = subBuilder.BuildPartial();
              break;
            }
            case 106: {
              PLabel = input.ReadString();
              break;
            }
            case 114: {
              global::Landman.Rascal.CSharp.Profobuf.Statement.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder();
              if (HasPFinallyBlock) {
                subBuilder.MergeFrom(PFinallyBlock);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PFinallyBlock = subBuilder.BuildPartial();
              break;
            }
            case 122: {
              global::Landman.Rascal.CSharp.Profobuf.Statement.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder();
              if (HasPTryBlock) {
                subBuilder.MergeFrom(PTryBlock);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PTryBlock = subBuilder.BuildPartial();
              break;
            }
            case 130: {
              global::Landman.Rascal.CSharp.Profobuf.Expression.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder();
              if (HasPLabelExpression) {
                subBuilder.MergeFrom(PLabelExpression);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PLabelExpression = subBuilder.BuildPartial();
              break;
            }
            case 138: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPSwitchSections(subBuilder.BuildPartial());
              break;
            }
            case 146: {
              global::Landman.Rascal.CSharp.Profobuf.Statement.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPInitializers(subBuilder.BuildPartial());
              break;
            }
            case 154: {
              PVariableName = input.ReadString();
              break;
            }
            case 160: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Landman.Rascal.CSharp.Profobuf.Modifiers), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(20, (ulong) rawValue);
              } else {
                AddPModifiers((global::Landman.Rascal.CSharp.Profobuf.Modifiers) rawValue);
              }
              break;
            }
            case 170: {
              global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder subBuilder = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPCatchClauses(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasKind {
       get { return result.HasKind; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Statement.Types.StatementKind Kind {
        get { return result.Kind; }
        set { SetKind(value); }
      }
      public Builder SetKind(global::Landman.Rascal.CSharp.Profobuf.Statement.Types.StatementKind value) {
        result.hasKind = true;
        result.kind_ = value;
        return this;
      }
      public Builder ClearKind() {
        result.hasKind = false;
        result.kind_ = global::Landman.Rascal.CSharp.Profobuf.Statement.Types.StatementKind.k_returnStatement;
        return this;
      }
      
      public bool HasPExpression {
       get { return result.HasPExpression; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PExpression {
        get { return result.PExpression; }
        set { SetPExpression(value); }
      }
      public Builder SetPExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPExpression = true;
        result.pExpression_ = value;
        return this;
      }
      public Builder SetPExpression(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPExpression = true;
        result.pExpression_ = builderForValue.Build();
        return this;
      }
      public Builder MergePExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPExpression &&
            result.pExpression_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pExpression_).MergeFrom(value).BuildPartial();
        } else {
          result.pExpression_ = value;
        }
        result.hasPExpression = true;
        return this;
      }
      public Builder ClearPExpression() {
        result.hasPExpression = false;
        result.pExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PVariablesList {
        get { return result.pVariables_; }
      }
      public int PVariablesCount {
        get { return result.PVariablesCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPVariables(int index) {
        return result.GetPVariables(index);
      }
      public Builder SetPVariables(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pVariables_[index] = value;
        return this;
      }
      public Builder SetPVariables(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pVariables_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPVariables(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pVariables_.Add(value);
        return this;
      }
      public Builder AddPVariables(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pVariables_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePVariables(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pVariables_);
        return this;
      }
      public Builder ClearPVariables() {
        result.pVariables_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.Statement> PIteratorsList {
        get { return result.pIterators_; }
      }
      public int PIteratorsCount {
        get { return result.PIteratorsCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Statement GetPIterators(int index) {
        return result.GetPIterators(index);
      }
      public Builder SetPIterators(int index, global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pIterators_[index] = value;
        return this;
      }
      public Builder SetPIterators(int index, global::Landman.Rascal.CSharp.Profobuf.Statement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pIterators_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPIterators(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pIterators_.Add(value);
        return this;
      }
      public Builder AddPIterators(global::Landman.Rascal.CSharp.Profobuf.Statement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pIterators_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePIterators(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.Statement> values) {
        base.AddRange(values, result.pIterators_);
        return this;
      }
      public Builder ClearPIterators() {
        result.pIterators_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.Statement> PStatementsList {
        get { return result.pStatements_; }
      }
      public int PStatementsCount {
        get { return result.PStatementsCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Statement GetPStatements(int index) {
        return result.GetPStatements(index);
      }
      public Builder SetPStatements(int index, global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pStatements_[index] = value;
        return this;
      }
      public Builder SetPStatements(int index, global::Landman.Rascal.CSharp.Profobuf.Statement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pStatements_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPStatements(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pStatements_.Add(value);
        return this;
      }
      public Builder AddPStatements(global::Landman.Rascal.CSharp.Profobuf.Statement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pStatements_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePStatements(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.Statement> values) {
        base.AddRange(values, result.pStatements_);
        return this;
      }
      public Builder ClearPStatements() {
        result.pStatements_.Clear();
        return this;
      }
      
      public bool HasPCondition {
       get { return result.HasPCondition; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PCondition {
        get { return result.PCondition; }
        set { SetPCondition(value); }
      }
      public Builder SetPCondition(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPCondition = true;
        result.pCondition_ = value;
        return this;
      }
      public Builder SetPCondition(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPCondition = true;
        result.pCondition_ = builderForValue.Build();
        return this;
      }
      public Builder MergePCondition(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPCondition &&
            result.pCondition_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pCondition_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pCondition_).MergeFrom(value).BuildPartial();
        } else {
          result.pCondition_ = value;
        }
        result.hasPCondition = true;
        return this;
      }
      public Builder ClearPCondition() {
        result.hasPCondition = false;
        result.pCondition_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public bool HasPEmbeddedStatement {
       get { return result.HasPEmbeddedStatement; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Statement PEmbeddedStatement {
        get { return result.PEmbeddedStatement; }
        set { SetPEmbeddedStatement(value); }
      }
      public Builder SetPEmbeddedStatement(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPEmbeddedStatement = true;
        result.pEmbeddedStatement_ = value;
        return this;
      }
      public Builder SetPEmbeddedStatement(global::Landman.Rascal.CSharp.Profobuf.Statement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPEmbeddedStatement = true;
        result.pEmbeddedStatement_ = builderForValue.Build();
        return this;
      }
      public Builder MergePEmbeddedStatement(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPEmbeddedStatement &&
            result.pEmbeddedStatement_ != global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance) {
            result.pEmbeddedStatement_ = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder(result.pEmbeddedStatement_).MergeFrom(value).BuildPartial();
        } else {
          result.pEmbeddedStatement_ = value;
        }
        result.hasPEmbeddedStatement = true;
        return this;
      }
      public Builder ClearPEmbeddedStatement() {
        result.hasPEmbeddedStatement = false;
        result.pEmbeddedStatement_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
        return this;
      }
      
      public bool HasPBody {
       get { return result.HasPBody; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Statement PBody {
        get { return result.PBody; }
        set { SetPBody(value); }
      }
      public Builder SetPBody(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPBody = true;
        result.pBody_ = value;
        return this;
      }
      public Builder SetPBody(global::Landman.Rascal.CSharp.Profobuf.Statement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPBody = true;
        result.pBody_ = builderForValue.Build();
        return this;
      }
      public Builder MergePBody(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPBody &&
            result.pBody_ != global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance) {
            result.pBody_ = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder(result.pBody_).MergeFrom(value).BuildPartial();
        } else {
          result.pBody_ = value;
        }
        result.hasPBody = true;
        return this;
      }
      public Builder ClearPBody() {
        result.hasPBody = false;
        result.pBody_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
        return this;
      }
      
      public bool HasPInExpression {
       get { return result.HasPInExpression; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PInExpression {
        get { return result.PInExpression; }
        set { SetPInExpression(value); }
      }
      public Builder SetPInExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPInExpression = true;
        result.pInExpression_ = value;
        return this;
      }
      public Builder SetPInExpression(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPInExpression = true;
        result.pInExpression_ = builderForValue.Build();
        return this;
      }
      public Builder MergePInExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPInExpression &&
            result.pInExpression_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pInExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pInExpression_).MergeFrom(value).BuildPartial();
        } else {
          result.pInExpression_ = value;
        }
        result.hasPInExpression = true;
        return this;
      }
      public Builder ClearPInExpression() {
        result.hasPInExpression = false;
        result.pInExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public bool HasPTrueStatement {
       get { return result.HasPTrueStatement; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Statement PTrueStatement {
        get { return result.PTrueStatement; }
        set { SetPTrueStatement(value); }
      }
      public Builder SetPTrueStatement(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPTrueStatement = true;
        result.pTrueStatement_ = value;
        return this;
      }
      public Builder SetPTrueStatement(global::Landman.Rascal.CSharp.Profobuf.Statement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPTrueStatement = true;
        result.pTrueStatement_ = builderForValue.Build();
        return this;
      }
      public Builder MergePTrueStatement(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPTrueStatement &&
            result.pTrueStatement_ != global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance) {
            result.pTrueStatement_ = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder(result.pTrueStatement_).MergeFrom(value).BuildPartial();
        } else {
          result.pTrueStatement_ = value;
        }
        result.hasPTrueStatement = true;
        return this;
      }
      public Builder ClearPTrueStatement() {
        result.hasPTrueStatement = false;
        result.pTrueStatement_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
        return this;
      }
      
      public bool HasPResourceAcquisition {
       get { return result.HasPResourceAcquisition; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode PResourceAcquisition {
        get { return result.PResourceAcquisition; }
        set { SetPResourceAcquisition(value); }
      }
      public Builder SetPResourceAcquisition(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPResourceAcquisition = true;
        result.pResourceAcquisition_ = value;
        return this;
      }
      public Builder SetPResourceAcquisition(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPResourceAcquisition = true;
        result.pResourceAcquisition_ = builderForValue.Build();
        return this;
      }
      public Builder MergePResourceAcquisition(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPResourceAcquisition &&
            result.pResourceAcquisition_ != global::Landman.Rascal.CSharp.Profobuf.AstNode.DefaultInstance) {
            result.pResourceAcquisition_ = global::Landman.Rascal.CSharp.Profobuf.AstNode.CreateBuilder(result.pResourceAcquisition_).MergeFrom(value).BuildPartial();
        } else {
          result.pResourceAcquisition_ = value;
        }
        result.hasPResourceAcquisition = true;
        return this;
      }
      public Builder ClearPResourceAcquisition() {
        result.hasPResourceAcquisition = false;
        result.pResourceAcquisition_ = global::Landman.Rascal.CSharp.Profobuf.AstNode.DefaultInstance;
        return this;
      }
      
      public bool HasPFalseStatement {
       get { return result.HasPFalseStatement; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Statement PFalseStatement {
        get { return result.PFalseStatement; }
        set { SetPFalseStatement(value); }
      }
      public Builder SetPFalseStatement(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPFalseStatement = true;
        result.pFalseStatement_ = value;
        return this;
      }
      public Builder SetPFalseStatement(global::Landman.Rascal.CSharp.Profobuf.Statement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPFalseStatement = true;
        result.pFalseStatement_ = builderForValue.Build();
        return this;
      }
      public Builder MergePFalseStatement(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPFalseStatement &&
            result.pFalseStatement_ != global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance) {
            result.pFalseStatement_ = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder(result.pFalseStatement_).MergeFrom(value).BuildPartial();
        } else {
          result.pFalseStatement_ = value;
        }
        result.hasPFalseStatement = true;
        return this;
      }
      public Builder ClearPFalseStatement() {
        result.hasPFalseStatement = false;
        result.pFalseStatement_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
        return this;
      }
      
      public bool HasPLabel {
        get { return result.HasPLabel; }
      }
      public string PLabel {
        get { return result.PLabel; }
        set { SetPLabel(value); }
      }
      public Builder SetPLabel(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPLabel = true;
        result.pLabel_ = value;
        return this;
      }
      public Builder ClearPLabel() {
        result.hasPLabel = false;
        result.pLabel_ = "";
        return this;
      }
      
      public bool HasPFinallyBlock {
       get { return result.HasPFinallyBlock; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Statement PFinallyBlock {
        get { return result.PFinallyBlock; }
        set { SetPFinallyBlock(value); }
      }
      public Builder SetPFinallyBlock(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPFinallyBlock = true;
        result.pFinallyBlock_ = value;
        return this;
      }
      public Builder SetPFinallyBlock(global::Landman.Rascal.CSharp.Profobuf.Statement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPFinallyBlock = true;
        result.pFinallyBlock_ = builderForValue.Build();
        return this;
      }
      public Builder MergePFinallyBlock(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPFinallyBlock &&
            result.pFinallyBlock_ != global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance) {
            result.pFinallyBlock_ = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder(result.pFinallyBlock_).MergeFrom(value).BuildPartial();
        } else {
          result.pFinallyBlock_ = value;
        }
        result.hasPFinallyBlock = true;
        return this;
      }
      public Builder ClearPFinallyBlock() {
        result.hasPFinallyBlock = false;
        result.pFinallyBlock_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
        return this;
      }
      
      public bool HasPTryBlock {
       get { return result.HasPTryBlock; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Statement PTryBlock {
        get { return result.PTryBlock; }
        set { SetPTryBlock(value); }
      }
      public Builder SetPTryBlock(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPTryBlock = true;
        result.pTryBlock_ = value;
        return this;
      }
      public Builder SetPTryBlock(global::Landman.Rascal.CSharp.Profobuf.Statement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPTryBlock = true;
        result.pTryBlock_ = builderForValue.Build();
        return this;
      }
      public Builder MergePTryBlock(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPTryBlock &&
            result.pTryBlock_ != global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance) {
            result.pTryBlock_ = global::Landman.Rascal.CSharp.Profobuf.Statement.CreateBuilder(result.pTryBlock_).MergeFrom(value).BuildPartial();
        } else {
          result.pTryBlock_ = value;
        }
        result.hasPTryBlock = true;
        return this;
      }
      public Builder ClearPTryBlock() {
        result.hasPTryBlock = false;
        result.pTryBlock_ = global::Landman.Rascal.CSharp.Profobuf.Statement.DefaultInstance;
        return this;
      }
      
      public bool HasPLabelExpression {
       get { return result.HasPLabelExpression; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Expression PLabelExpression {
        get { return result.PLabelExpression; }
        set { SetPLabelExpression(value); }
      }
      public Builder SetPLabelExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPLabelExpression = true;
        result.pLabelExpression_ = value;
        return this;
      }
      public Builder SetPLabelExpression(global::Landman.Rascal.CSharp.Profobuf.Expression.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPLabelExpression = true;
        result.pLabelExpression_ = builderForValue.Build();
        return this;
      }
      public Builder MergePLabelExpression(global::Landman.Rascal.CSharp.Profobuf.Expression value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPLabelExpression &&
            result.pLabelExpression_ != global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance) {
            result.pLabelExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.CreateBuilder(result.pLabelExpression_).MergeFrom(value).BuildPartial();
        } else {
          result.pLabelExpression_ = value;
        }
        result.hasPLabelExpression = true;
        return this;
      }
      public Builder ClearPLabelExpression() {
        result.hasPLabelExpression = false;
        result.pLabelExpression_ = global::Landman.Rascal.CSharp.Profobuf.Expression.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PSwitchSectionsList {
        get { return result.pSwitchSections_; }
      }
      public int PSwitchSectionsCount {
        get { return result.PSwitchSectionsCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPSwitchSections(int index) {
        return result.GetPSwitchSections(index);
      }
      public Builder SetPSwitchSections(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pSwitchSections_[index] = value;
        return this;
      }
      public Builder SetPSwitchSections(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pSwitchSections_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPSwitchSections(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pSwitchSections_.Add(value);
        return this;
      }
      public Builder AddPSwitchSections(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pSwitchSections_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePSwitchSections(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pSwitchSections_);
        return this;
      }
      public Builder ClearPSwitchSections() {
        result.pSwitchSections_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.Statement> PInitializersList {
        get { return result.pInitializers_; }
      }
      public int PInitializersCount {
        get { return result.PInitializersCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Statement GetPInitializers(int index) {
        return result.GetPInitializers(index);
      }
      public Builder SetPInitializers(int index, global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pInitializers_[index] = value;
        return this;
      }
      public Builder SetPInitializers(int index, global::Landman.Rascal.CSharp.Profobuf.Statement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pInitializers_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPInitializers(global::Landman.Rascal.CSharp.Profobuf.Statement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pInitializers_.Add(value);
        return this;
      }
      public Builder AddPInitializers(global::Landman.Rascal.CSharp.Profobuf.Statement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pInitializers_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePInitializers(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.Statement> values) {
        base.AddRange(values, result.pInitializers_);
        return this;
      }
      public Builder ClearPInitializers() {
        result.pInitializers_.Clear();
        return this;
      }
      
      public bool HasPVariableName {
        get { return result.HasPVariableName; }
      }
      public string PVariableName {
        get { return result.PVariableName; }
        set { SetPVariableName(value); }
      }
      public Builder SetPVariableName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPVariableName = true;
        result.pVariableName_ = value;
        return this;
      }
      public Builder ClearPVariableName() {
        result.hasPVariableName = false;
        result.pVariableName_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.Modifiers> PModifiersList {
        get { return result.pModifiers_; }
      }
      public int PModifiersCount {
        get { return result.PModifiersCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.Modifiers GetPModifiers(int index) {
        return result.GetPModifiers(index);
      }
      public Builder SetPModifiers(int index, global::Landman.Rascal.CSharp.Profobuf.Modifiers value) {
        result.pModifiers_[index] = value;
        return this;
      }
      public Builder AddPModifiers(global::Landman.Rascal.CSharp.Profobuf.Modifiers value) {
        result.pModifiers_.Add(value);
        return this;
      }
      public Builder AddRangePModifiers(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.Modifiers> values) {
        base.AddRange(values, result.pModifiers_);
        return this;
      }
      public Builder ClearPModifiers() {
        result.pModifiers_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Landman.Rascal.CSharp.Profobuf.AstNode> PCatchClausesList {
        get { return result.pCatchClauses_; }
      }
      public int PCatchClausesCount {
        get { return result.PCatchClausesCount; }
      }
      public global::Landman.Rascal.CSharp.Profobuf.AstNode GetPCatchClauses(int index) {
        return result.GetPCatchClauses(index);
      }
      public Builder SetPCatchClauses(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pCatchClauses_[index] = value;
        return this;
      }
      public Builder SetPCatchClauses(int index, global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pCatchClauses_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPCatchClauses(global::Landman.Rascal.CSharp.Profobuf.AstNode value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.pCatchClauses_.Add(value);
        return this;
      }
      public Builder AddPCatchClauses(global::Landman.Rascal.CSharp.Profobuf.AstNode.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.pCatchClauses_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePCatchClauses(scg::IEnumerable<global::Landman.Rascal.CSharp.Profobuf.AstNode> values) {
        base.AddRange(values, result.pCatchClauses_);
        return this;
      }
      public Builder ClearPCatchClauses() {
        result.pCatchClauses_.Clear();
        return this;
      }
    }
    static Statement() {
      object.ReferenceEquals(global::Landman.Rascal.CSharp.Profobuf.CSharpASTProtos.Descriptor, null);
    }
  }
  
  #endregion
  
}
