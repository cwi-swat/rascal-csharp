package Landman.Rascal.CSharp.Profobuf;

option optimize_for = SPEED;
message CSharpParseRequest { 
  required string Filename = 1;
}
message CSharpParseResult {
  repeated AstNode Result = 1 
;}
message AstNode { 
  enum AstNodeKind { 
    k_comment = 0;
    k_namespaceDeclaration = 1;
    k_constraint = 2;
    k_attribute = 3;
    k_queryOrdering = 4;
    k_cSharpModifierToken = 5;
    k_variablePlaceholder = 6;
    k_usingDeclaration = 7;
    k_cSharpTokenNode = 8;
    k_parameterDeclaration = 9;
    k_switchSection = 10;
    k_usingAliasDeclaration = 11;
    k_typeParameterDeclaration = 12;
    k_catchClause = 13;
    k_identifier = 14;
    k_attributeSection = 15;
    k_constructorInitializer = 16;
    k_compilationUnit = 17;
    k_variableInitializer = 18;
    k_arraySpecifier = 19;
    k_caseLabel = 20;
    k_statement = 21;
    k_astType = 22;
    k_attributedNode = 23;
    k_expression = 24;
    k_queryClause = 25;
  }
  required AstNodeKind Kind = 1;
  optional QueryOrderingDirection p_direction = 2;
  optional Expression p_defaultExpression = 3;
  repeated AstNode p_attributes = 4;
  optional Expression p_nodeExpression = 5;
  optional string p_fullName = 6;
  optional string p_content = 7;
  optional Statement p_nodeStatement = 8;
  repeated AstNode p_members = 9;
  optional VarianceModifier p_variance = 10;
  optional string p_variableName = 11;
  repeated AstNode p_caseLabels = 12;
  optional Expression p_initializer = 13;
  repeated AstNode p_attributesA = 14;
  optional Expression p_expression = 15;
  optional AttributedNode p_nodeAttributedNode = 16;
  repeated Expression p_arguments = 17;
  repeated Statement p_statements = 18;
  optional Statement p_body = 19;
  optional string p_namespace = 20;
  optional AstType p_nodeAstType = 21;
  optional Comment p_commentType = 22;
  optional string p_alias = 23;
  optional string p_typeParameter = 24;
  optional ParameterModifier p_parameterModifier = 25;
  repeated Modifiers p_modifier = 26;
  optional bool p_startsLine = 27;
  optional string p_name = 28;
  repeated AstType p_baseTypes = 29;
  optional int32 p_dimensions = 30;
  optional AttributeTarget p_attributeTarget = 31;
  repeated AstNode p_identifiers = 32;
  optional ConstructorInitializer p_constructorInitializerType = 33;
  repeated Modifiers p_allModifiers = 34;
  optional QueryClause p_nodeQueryClause = 35;
} 
message QueryClause { 
  enum QueryClauseKind { 
    k_queryContinuationClause = 0;
    k_queryWhereClause = 1;
    k_queryGroupClause = 2;
    k_queryOrderClause = 3;
    k_querySelectClause = 4;
    k_queryLetClause = 5;
    k_queryFromClause = 6;
    k_queryJoinClause = 7;
  }
  required QueryClauseKind Kind = 1;
  optional Expression p_expression = 2;
  optional Expression p_condition = 3;
  optional Expression p_inExpression = 4;
  optional string p_identifier = 5;
  optional string p_intoIdentifier = 6;
  optional Expression p_key = 7;
  optional Expression p_projection = 8;
  optional bool p_isGroupJoin = 9;
  repeated AstNode p_orderings = 10;
  optional string p_joinIdentifier = 11;
  optional Expression p_precedingQuery = 12;
  optional Expression p_onExpression = 13;
  optional Expression p_equalsExpression = 14;
} 
message Expression { 
  enum ExpressionKind { 
    k_lambdaExpression = 0;
    k_conditionalExpression = 1;
    k_binaryOperatorExpression = 2;
    k_directionExpression = 3;
    k_castExpression = 4;
    k_indexerExpression = 5;
    k_parenthesizedExpression = 6;
    k_baseReferenceExpression = 7;
    k_sizeOfExpression = 8;
    k_arrayCreateExpression = 9;
    k_unaryOperatorExpression = 10;
    k_asExpression = 11;
    k_typeReferenceExpression = 12;
    k_typeOfExpression = 13;
    k_defaultValueExpression = 14;
    k_anonymousMethodExpression = 15;
    k_uncheckedExpression = 16;
    k_isExpression = 17;
    k_identifierExpression = 18;
    k_checkedExpression = 19;
    k_primitiveExpression = 20;
    k_expressionPlaceholder = 21;
    k_objectCreateExpression = 22;
    k_namedArgumentExpression = 23;
    k_argListExpression = 24;
    k_memberReferenceExpression = 25;
    k_invocationExpression = 26;
    k_pointerReferenceExpression = 27;
    k_assignmentExpression = 28;
    k_thisReferenceExpression = 29;
    k_stackAllocExpression = 30;
    k_arrayInitializerExpression = 31;
    k_queryExpression = 32;
  }
  required ExpressionKind Kind = 1;
  repeated Expression p_elements = 2;
  optional Expression p_expression = 3;
  optional string p_value = 4;
  repeated Expression p_arguments = 5;
  optional BinaryOperator p_operator = 6;
  optional Expression p_condition = 7;
  optional Expression p_falseExpression = 8;
  optional Expression p_right = 9;
  repeated QueryClause p_clauses = 10;
  optional UnaryOperator p_operatorU = 11;
  optional Expression p_target = 12;
  repeated AstType p_typeArguments = 13;
  optional AssignmentOperator p_operatorA = 14;
  repeated AstNode p_additionalArraySpecifiers = 15;
  optional AstNode p_body = 16;
  optional string p_identifier = 17;
  optional Statement p_bodyS = 18;
  optional bool p_isAccess = 19;
  optional Expression p_initializer = 20;
  optional string p_memberName = 21;
  optional FieldDirection p_fieldDirection = 22;
  optional bool p_hasParameterList = 23;
  repeated AstNode p_parameters = 24;
  optional Expression p_trueExpression = 25;
  optional Expression p_left = 26;
  optional Expression p_countExpression = 27;
} 
message AttributedNode { 
  enum AttributedNodeKind { 
    k_enumMemberDeclaration = 0;
    k_accessor = 1;
    k_delegateDeclaration = 2;
    k_destructorDeclaration = 3;
    k_typeDeclaration = 4;
    k_constructorDeclaration = 5;
    k_memberDeclaration = 6;
  }
  required AttributedNodeKind Kind = 1;
  repeated AstNode p_constraints = 2;
  repeated AstNode p_attributes = 3;
  repeated AstNode p_typeParameters = 4;
  optional Class p_classType = 5;
  optional string p_name = 6;
  optional Statement p_body = 7;
  repeated AttributedNode p_members = 8;
  repeated AstNode p_modifierTokens = 9;
  optional AstNode p_initializerA = 10;
  repeated AstType p_baseTypes = 11;
  repeated Modifiers p_modifiers = 12;
  optional Expression p_initializer = 13;
  repeated AstNode p_parameters = 14;
  optional MemberDeclaration p_nodeMemberDeclaration = 15;
} 
message MemberDeclaration { 
  enum MemberDeclarationKind { 
    k_indexerDeclaration = 0;
    k_methodDeclaration = 1;
    k_operatorDeclaration = 2;
    k_propertyDeclaration = 3;
    k_customEventDeclaration = 4;
    k_fieldDeclaration = 5;
    k_eventDeclaration = 6;
  }
  required MemberDeclarationKind Kind = 1;
  repeated AstNode p_constraints = 2;
  optional bool p_isExtensionMethod = 3;
  repeated AstNode p_attributes = 4;
  repeated AstNode p_variables = 5;
  repeated AstNode p_typeParameters = 6;
  optional AttributedNode p_setter = 7;
  optional string p_name = 8;
  optional Statement p_body = 9;
  optional AttributedNode p_addAccessor = 10;
  optional AttributedNode p_getter = 11;
  optional AttributedNode p_removeAccessor = 12;
  repeated AstNode p_modifierTokens = 13;
  repeated Modifiers p_modifiers = 14;
  optional Operator p_operatorType = 15;
  repeated AstNode p_parameters = 16;
} 
message AstType { 
  enum AstTypeKind { 
    k_simpleType = 0;
    k_composedType = 1;
    k_typePlaceholder = 2;
    k_memberType = 3;
    k_primitiveType = 4;
  }
  required AstTypeKind Kind = 1;
  optional bool p_isDoubleColon = 2;
  optional bool p_hasNullableSpecifier = 3;
  optional string p_keyword = 4;
  optional string p_identifier = 5;
  repeated AstNode p_arraySpecifiers = 6;
  optional string p_memberName = 7;
  optional int32 p_pointerRank = 8;
  repeated AstType p_typeArguments = 9;
} 
message Statement { 
  enum StatementKind { 
    k_returnStatement = 0;
    k_whileStatement = 1;
    k_yieldBreakStatement = 2;
    k_blockStatementPlaceholder = 3;
    k_gotoCaseStatement = 4;
    k_fixedStatement = 5;
    k_labelStatement = 6;
    k_switchStatement = 7;
    k_ifElseStatement = 8;
    k_expressionStatement = 9;
    k_gotoDefaultStatement = 10;
    k_variableDeclarationStatement = 11;
    k_breakStatement = 12;
    k_tryCatchStatement = 13;
    k_gotoStatement = 14;
    k_usingStatement = 15;
    k_throwStatement = 16;
    k_unsafeStatement = 17;
    k_doWhileStatement = 18;
    k_continueStatement = 19;
    k_checkedStatement = 20;
    k_statementPlaceholder = 21;
    k_forStatement = 22;
    k_foreachStatement = 23;
    k_lockStatement = 24;
    k_blockStatement = 25;
    k_emptyStatement = 26;
    k_yieldStatement = 27;
    k_uncheckedStatement = 28;
  }
  required StatementKind Kind = 1;
  optional Expression p_expression = 2;
  repeated AstNode p_variables = 3;
  repeated Statement p_iterators = 4;
  repeated Statement p_statements = 5;
  optional Expression p_condition = 6;
  optional Statement p_embeddedStatement = 7;
  optional Statement p_body = 8;
  optional Expression p_inExpression = 9;
  optional Statement p_trueStatement = 10;
  optional AstNode p_resourceAcquisition = 11;
  optional Statement p_falseStatement = 12;
  optional string p_label = 13;
  optional Statement p_finallyBlock = 14;
  optional Statement p_tryBlock = 15;
  optional Expression p_labelExpression = 16;
  repeated AstNode p_switchSections = 17;
  repeated Statement p_initializers = 18;
  optional string p_variableName = 19;
  repeated Modifiers p_modifiers = 20;
  repeated AstNode p_catchClauses = 21;
} 
enum ConstructorInitializer { 
    e_this = 0;
    e_base = 1;
}
enum ParameterModifier { 
    e_parameterModifierThis = 0;
    e_parameterModifierNone = 1;
    e_parameterModifierParams = 2;
    e_parameterModifierRef = 3;
    e_parameterModifierOut = 4;
}
enum QueryOrderingDirection { 
    e_queryOrderingDirectionAscending = 0;
    e_queryOrderingDirectionNone = 1;
    e_queryOrderingDirectionDescending = 2;
}
enum UnaryOperator { 
    e_bitNot = 0;
    e_dereference = 1;
    e_not = 2;
    e_plus = 3;
    e_decrement = 4;
    e_minus = 5;
    e_postIncrement = 6;
    e_postDecrement = 7;
    e_addressOf = 8;
    e_increment = 9;
}
enum FieldDirection { 
    e_fieldDirectionNone = 0;
    e_fieldDirectionRef = 1;
    e_fieldDirectionOut = 2;
}
enum BinaryOperator { 
    e_conditionalOr = 0;
    e_divide = 1;
    e_inEquality = 2;
    e_conditionalAnd = 3;
    e_bitwiseOr = 4;
    e_bitwiseAnd = 5;
    e_modulus = 6;
    e_equality = 7;
    e_lessThanOrEqual = 8;
    e_lessThan = 9;
    e_shiftLeft = 10;
    e_greaterThan = 11;
    e_add = 12;
    e_exclusiveOr = 13;
    e_shiftRight = 14;
    e_multiply = 15;
    e_any = 16;
    e_nullCoalescing = 17;
    e_greaterThanOrEqual = 18;
    e_subtract = 19;
}
enum AssignmentOperator { 
    e_assignmentOperatorShiftLeft = 0;
    e_assignmentOperatorDivide = 1;
    e_assignmentOperatorAssign = 2;
    e_assignmentOperatorBitwiseOr = 3;
    e_assignmentOperatorAdd = 4;
    e_assignmentOperatorExclusiveOr = 5;
    e_assignmentOperatorShiftRight = 6;
    e_assignmentOperatorMultiply = 7;
    e_assignmentOperatorAny = 8;
    e_assignmentOperatorBitwiseAnd = 9;
    e_assignmentOperatorModulus = 10;
    e_assignmentOperatorSubtract = 11;
}
enum Class { 
    e_delegate = 0;
    e_interface = 1;
    e_module = 2;
    e_class = 3;
    e_enum = 4;
    e_struct = 5;
}
enum Modifiers { 
    e_modifiersReadonly = 0;
    e_modifiersVirtual = 1;
    e_modifiersPartial = 2;
    e_modifiersNew = 3;
    e_modifiersConst = 4;
    e_modifiersProtected = 5;
    e_modifiersPublic = 6;
    e_modifiersSealed = 7;
    e_modifiersAbstract = 8;
    e_modifiersExtern = 9;
    e_modifiersNone = 10;
    e_modifiersStatic = 11;
    e_modifiersVisibilityMask = 12;
    e_modifiersOverride = 13;
    e_modifiersInternal = 14;
    e_modifiersUnsafe = 15;
    e_modifiersFixed = 16;
    e_modifiersVolatile = 17;
    e_modifiersPrivate = 18;
}
enum Comment { 
    e_multiLine = 0;
    e_singleLine = 1;
    e_documentation = 2;
}
enum Operator { 
    e_operatorImplicit = 0;
    e_operatorTrue = 1;
    e_operatorBitwiseOr = 2;
    e_operatorDivision = 3;
    e_operatorDecrement = 4;
    e_operatorUnaryNegation = 5;
    e_operatorLeftShift = 6;
    e_operatorBitwiseAnd = 7;
    e_operatorSubtraction = 8;
    e_operatorRightShift = 9;
    e_operatorModulus = 10;
    e_operatorIncrement = 11;
    e_operatorEquality = 12;
    e_operatorInequality = 13;
    e_operatorLessThanOrEqual = 14;
    e_operatorLessThan = 15;
    e_operatorLogicalNot = 16;
    e_operatorGreaterThan = 17;
    e_operatorUnaryPlus = 18;
    e_operatorExclusiveOr = 19;
    e_operatorExplicit = 20;
    e_operatorMultiply = 21;
    e_operatorFalse = 22;
    e_operatorAddition = 23;
    e_operatorGreaterThanOrEqual = 24;
    e_operatorOnesComplement = 25;
}
enum AttributeTarget { 
    e_attributeTargetField = 0;
    e_attributeTargetNone = 1;
    e_attributeTargetReturn = 2;
    e_attributeTargetUnknown = 3;
    e_attributeTargetType = 4;
    e_attributeTargetModule = 5;
    e_attributeTargetAssembly = 6;
    e_attributeTargetMethod = 7;
    e_attributeTargetParam = 8;
}
enum VarianceModifier { 
    e_invariant = 0;
    e_covariant = 1;
    e_contravariant = 2;
}
